; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33321.0 

	TITLE	c:\users\pichau\documents\boldergarte\softwares\libraries\downloads\zlib\zlib-develop\zlib-develop\contrib\vstudio\vc17\x86\zlibdllrelease\tmp\deflate.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

?my_version@?1??deflateInit2_@@9@9 DB '1.3.1.1-motley', 00H ; `deflateInit2_'::`2'::my_version
	ORG $+1
_configuration_table DW 00H
	DW	00H
	DW	00H
	DW	00H
	DD	FLAT:_deflate_stored
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	05H
	DW	010H
	DW	08H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	06H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_fast
	DW	04H
	DW	04H
	DW	010H
	DW	010H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	020H
	DW	020H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	010H
	DW	080H
	DW	080H
	DD	FLAT:_deflate_slow
	DW	08H
	DW	020H
	DW	080H
	DW	0100H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	080H
	DW	0102H
	DW	0400H
	DD	FLAT:_deflate_slow
	DW	020H
	DW	0102H
	DW	0102H
	DW	01000H
	DD	FLAT:_deflate_slow
PUBLIC	_deflateCopy@8
PUBLIC	_deflateBound@8
PUBLIC	_deflateTune@20
PUBLIC	_deflateParams@12
PUBLIC	_deflatePrime@12
PUBLIC	_deflatePending@12
PUBLIC	_deflateSetHeader@8
PUBLIC	_deflateReset@4
PUBLIC	_deflateResetKeep@4
PUBLIC	_deflateGetDictionary@12
PUBLIC	_deflateSetDictionary@12
PUBLIC	_deflateInit2_@32
PUBLIC	_deflateInit_@16
PUBLIC	_deflateEnd@4
PUBLIC	_deflate@8
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflate@8
_TEXT	SEGMENT
$T1 = -8						; size = 4
_beg$1$ = -4						; size = 4
tv2293 = 8						; size = 4
_beg$1$ = 8						; size = 4
_beg$1$ = 8						; size = 4
_left$1$ = 8						; size = 4
_strm$ = 8						; size = 4
_flush$ = 12						; size = 4
_deflate@8 PROC						; COMDAT

; 946  : int ZEXPORT deflate(z_streamp strm, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	53		 push	 ebx
  00007	57		 push	 edi
  00008	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]

; 947  :     int old_flush; /* value of flush param for previous deflate call */
; 948  :     deflate_state *s;
; 949  : 
; 950  :     if (deflateStateCheck(strm) || flush > Z_BLOCK || flush < 0) {

  0000b	8b cf		 mov	 ecx, edi
  0000d	e8 00 00 00 00	 call	 _deflateStateCheck
  00012	85 c0		 test	 eax, eax
  00014	0f 85 c2 08 00
	00		 jne	 $LN32@deflate
  0001a	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0001d	83 fb 05	 cmp	 ebx, 5
  00020	0f 87 b6 08 00
	00		 ja	 $LN32@deflate

; 952  :     }
; 953  :     s = strm->state;

  00026	56		 push	 esi
  00027	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]

; 954  : 
; 955  :     if (strm->next_out == Z_NULL ||
; 956  :         (strm->avail_in != 0 && strm->next_in == Z_NULL) ||

  0002a	39 47 0c	 cmp	 DWORD PTR [edi+12], eax
  0002d	0f 84 94 08 00
	00		 je	 $LN34@deflate
  00033	39 47 04	 cmp	 DWORD PTR [edi+4], eax
  00036	74 08		 je	 SHORT $LN35@deflate
  00038	39 07		 cmp	 DWORD PTR [edi], eax
  0003a	0f 84 87 08 00
	00		 je	 $LN34@deflate
$LN35@deflate:
  00040	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  00047	75 09		 jne	 SHORT $LN33@deflate
  00049	83 fb 04	 cmp	 ebx, 4
  0004c	0f 85 75 08 00
	00		 jne	 $LN34@deflate
$LN33@deflate:

; 959  :     }
; 960  :     if (strm->avail_out == 0) ERR_RETURN(strm, Z_BUF_ERROR);

  00052	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  00056	74 6f		 je	 SHORT $LN156@deflate

; 961  : 
; 962  :     old_flush = s->last_flush;
; 963  :     s->last_flush = flush;
; 964  : 
; 965  :     /* Flush as much pending output as possible */
; 966  :     if (s->pending != 0) {

  00058	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  0005c	8b 56 28	 mov	 edx, DWORD PTR [esi+40]
  0005f	89 5e 28	 mov	 DWORD PTR [esi+40], ebx
  00062	74 1d		 je	 SHORT $LN37@deflate

; 967  :         flush_pending(strm);

  00064	e8 00 00 00 00	 call	 _flush_pending

; 968  :         if (strm->avail_out == 0) {

  00069	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  0006d	75 44		 jne	 SHORT $LN40@deflate
$LN151@deflate:

; 969  :             /* Since avail_out is 0, deflate will be called again with
; 970  :              * more output space, but possibly with both pending and
; 971  :              * avail_in equal to zero. There won't be anything to do,
; 972  :              * but this is not an error situation so make sure we
; 973  :              * return OK instead of BUF_ERROR at next call of deflate:
; 974  :              */
; 975  :             s->last_flush = -1;

  0006f	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
$LN88@deflate:
  00076	5e		 pop	 esi
  00077	5f		 pop	 edi

; 976  :             return Z_OK;

  00078	33 c0		 xor	 eax, eax

; 1255 : }

  0007a	5b		 pop	 ebx
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 08 00	 ret	 8
$LN37@deflate:

; 977  :         }
; 978  : 
; 979  :     /* Make sure there is something to do and avoid duplicate consecutive
; 980  :      * flushes. For repeated and useless calls with Z_FINISH, we keep
; 981  :      * returning Z_STREAM_END instead of Z_BUF_ERROR.
; 982  :      */
; 983  :     } else if (strm->avail_in == 0 && RANK(flush) <= RANK(old_flush) &&

  00081	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  00085	75 2c		 jne	 SHORT $LN40@deflate
  00087	33 c0		 xor	 eax, eax
  00089	b9 09 00 00 00	 mov	 ecx, 9
  0008e	83 fa 04	 cmp	 edx, 4
  00091	0f 4f c1	 cmovg	 eax, ecx
  00094	03 d2		 add	 edx, edx
  00096	2b d0		 sub	 edx, eax
  00098	33 c9		 xor	 ecx, ecx
  0009a	83 fb 04	 cmp	 ebx, 4
  0009d	b8 09 00 00 00	 mov	 eax, 9
  000a2	0f 4f c8	 cmovg	 ecx, eax
  000a5	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  000a8	2b c1		 sub	 eax, ecx
  000aa	3b c2		 cmp	 eax, edx
  000ac	7f 05		 jg	 SHORT $LN40@deflate
  000ae	83 fb 04	 cmp	 ebx, 4
  000b1	75 14		 jne	 SHORT $LN156@deflate
$LN40@deflate:

; 984  :                flush != Z_FINISH) {
; 985  :         ERR_RETURN(strm, Z_BUF_ERROR);
; 986  :     }
; 987  : 
; 988  :     /* User must not provide more input after the first FINISH: */
; 989  :     if (s->status == FINISH_STATE && strm->avail_in != 0) {

  000b3	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000b6	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  000bb	75 1f		 jne	 SHORT $LN41@deflate
  000bd	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  000c1	0f 84 eb 00 00
	00		 je	 $LN140@deflate
$LN156@deflate:
  000c7	5e		 pop	 esi

; 990  :         ERR_RETURN(strm, Z_BUF_ERROR);

  000c8	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@DFPGLBGC@buffer?5error@
  000cf	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  000d4	5f		 pop	 edi

; 1255 : }

  000d5	5b		 pop	 ebx
  000d6	8b e5		 mov	 esp, ebp
  000d8	5d		 pop	 ebp
  000d9	c2 08 00	 ret	 8
$LN41@deflate:

; 991  :     }
; 992  : 
; 993  :     /* Write the header */
; 994  :     if (s->status == INIT_STATE && s->wrap == 0)

  000dc	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  000df	0f 85 cd 00 00
	00		 jne	 $LN140@deflate
  000e5	83 7e 18 00	 cmp	 DWORD PTR [esi+24], 0
  000e9	75 0c		 jne	 SHORT $LN150@deflate

; 995  :         s->status = BUSY_STATE;

  000eb	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H

; 1127 :             s->gzindex = 0;

  000f2	e9 bb 00 00 00	 jmp	 $LN140@deflate
$LN150@deflate:

; 996  :     if (s->status == INIT_STATE) {
; 997  :         /* zlib header */
; 998  :         uInt header = (Z_DEFLATED + ((s->w_bits - 8) << 4)) << 8;

  000f7	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000fa	c1 e1 0c	 shl	 ecx, 12			; 0000000cH
  000fd	81 e9 00 78 00
	00		 sub	 ecx, 30720		; 00007800H

; 999  :         uInt level_flags;
; 1000 : 
; 1001 :         if (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2)

  00103	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0010a	89 4d 08	 mov	 DWORD PTR tv2293[ebp], ecx
  0010d	7d 30		 jge	 SHORT $LN130@deflate
  0010f	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00115	83 f8 02	 cmp	 eax, 2
  00118	7c 25		 jl	 SHORT $LN130@deflate

; 1003 :         else if (s->level < 6)

  0011a	83 f8 06	 cmp	 eax, 6
  0011d	7d 0a		 jge	 SHORT $LN47@deflate

; 1004 :             level_flags = 1;

  0011f	b8 40 00 00 00	 mov	 eax, 64			; 00000040H
  00124	8d 50 20	 lea	 edx, DWORD PTR [eax+32]
  00127	eb 1b		 jmp	 SHORT $LN50@deflate
$LN47@deflate:

; 1005 :         else if (s->level == 6)

  00129	75 0a		 jne	 SHORT $LN49@deflate

; 1006 :             level_flags = 2;

  0012b	b8 80 00 00 00	 mov	 eax, 128		; 00000080H
  00130	8d 50 20	 lea	 edx, DWORD PTR [eax+32]
  00133	eb 0f		 jmp	 SHORT $LN50@deflate
$LN49@deflate:

; 1007 :         else
; 1008 :             level_flags = 3;

  00135	b8 c0 00 00 00	 mov	 eax, 192		; 000000c0H
  0013a	8d 50 20	 lea	 edx, DWORD PTR [eax+32]
  0013d	eb 05		 jmp	 SHORT $LN50@deflate
$LN130@deflate:

; 1002 :             level_flags = 0;

  0013f	33 c0		 xor	 eax, eax
  00141	8d 50 20	 lea	 edx, DWORD PTR [eax+32]
$LN50@deflate:

; 1009 :         header |= (level_flags << 6);

  00144	0b c8		 or	 ecx, eax

; 1010 :         if (s->strstart != 0) header |= PRESET_DICT;

  00146	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  0014a	74 05		 je	 SHORT $LN51@deflate
  0014c	8b ca		 mov	 ecx, edx
  0014e	0b 4d 08	 or	 ecx, DWORD PTR tv2293[ebp]
$LN51@deflate:

; 1011 :         header += 31 - (header % 31);

  00151	b8 85 10 42 08	 mov	 eax, 138547333		; 08421085H
  00156	f7 e1		 mul	 ecx
  00158	2b ca		 sub	 ecx, edx
  0015a	d1 e9		 shr	 ecx, 1
  0015c	03 ca		 add	 ecx, edx
  0015e	c1 e9 04	 shr	 ecx, 4
  00161	41		 inc	 ecx
  00162	8b d1		 mov	 edx, ecx
  00164	c1 e2 05	 shl	 edx, 5
  00167	2b d1		 sub	 edx, ecx

; 1012 : 
; 1013 :         putShortMSB(s, header);

  00169	8b ce		 mov	 ecx, esi
  0016b	e8 00 00 00 00	 call	 _putShortMSB

; 1014 : 
; 1015 :         /* Save the adler32 of the preset dictionary: */
; 1016 :         if (s->strstart != 0) {

  00170	83 7e 6c 00	 cmp	 DWORD PTR [esi+108], 0
  00174	74 16		 je	 SHORT $LN138@deflate

; 1017 :             putShortMSB(s, (uInt)(strm->adler >> 16));

  00176	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  0017a	8b ce		 mov	 ecx, esi
  0017c	e8 00 00 00 00	 call	 _putShortMSB

; 1018 :             putShortMSB(s, (uInt)(strm->adler & 0xffff));

  00181	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00185	8b ce		 mov	 ecx, esi
  00187	e8 00 00 00 00	 call	 _putShortMSB
$LN138@deflate:

; 1019 :         }
; 1020 :         strm->adler = adler32(0L, Z_NULL, 0);

  0018c	6a 00		 push	 0
  0018e	6a 00		 push	 0
  00190	6a 00		 push	 0
  00192	e8 00 00 00 00	 call	 _adler32@12
  00197	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 1021 :         s->status = BUSY_STATE;
; 1022 : 
; 1023 :         /* Compression must start with an empty pending buffer */
; 1024 :         flush_pending(strm);

  0019a	8b cf		 mov	 ecx, edi
  0019c	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  001a3	e8 00 00 00 00	 call	 _flush_pending

; 1025 :         if (s->pending != 0) {

  001a8	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  001ac	0f 85 bd fe ff
	ff		 jne	 $LN151@deflate
$LN140@deflate:

; 1026 :             s->last_flush = -1;
; 1027 :             return Z_OK;
; 1028 :         }
; 1029 :     }
; 1030 : #ifdef GZIP
; 1031 :     if (s->status == GZIP_STATE) {

  001b2	83 7e 04 39	 cmp	 DWORD PTR [esi+4], 57	; 00000039H
  001b6	0f 85 13 02 00
	00		 jne	 $LN56@deflate

; 1032 :         /* gzip header */
; 1033 :         strm->adler = crc32(0L, Z_NULL, 0);

  001bc	6a 00		 push	 0
  001be	6a 00		 push	 0
  001c0	6a 00		 push	 0
  001c2	e8 00 00 00 00	 call	 _crc32@12
  001c7	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 1034 :         put_byte(s, 31);

  001ca	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  001cd	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001d0	c6 04 01 1f	 mov	 BYTE PTR [ecx+eax], 31	; 0000001fH
  001d4	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1035 :         put_byte(s, 139);

  001d7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001da	41		 inc	 ecx
  001db	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  001de	c6 04 01 8b	 mov	 BYTE PTR [ecx+eax], 139	; 0000008bH
  001e2	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1036 :         put_byte(s, 8);

  001e5	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001e8	41		 inc	 ecx
  001e9	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  001ec	c6 04 01 08	 mov	 BYTE PTR [ecx+eax], 8
  001f0	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1037 :         if (s->gzhead == Z_NULL) {

  001f3	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  001f6	42		 inc	 edx
  001f7	89 56 14	 mov	 DWORD PTR [esi+20], edx
  001fa	85 c0		 test	 eax, eax
  001fc	0f 85 9d 00 00
	00		 jne	 $LN55@deflate

; 1038 :             put_byte(s, 0);

  00202	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00205	c6 04 02 00	 mov	 BYTE PTR [edx+eax], 0
  00209	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1039 :             put_byte(s, 0);

  0020c	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0020f	41		 inc	 ecx
  00210	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00213	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00217	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1040 :             put_byte(s, 0);

  0021a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0021d	41		 inc	 ecx
  0021e	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  00221	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00225	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1041 :             put_byte(s, 0);

  00228	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0022b	41		 inc	 ecx
  0022c	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0022f	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00233	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1042 :             put_byte(s, 0);

  00236	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00239	41		 inc	 ecx
  0023a	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0023d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00241	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1043 :             put_byte(s, s->level == 9 ? 2 :

  00244	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0024a	42		 inc	 edx
  0024b	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0024e	83 f8 09	 cmp	 eax, 9
  00251	75 04		 jne	 SHORT $LN104@deflate
  00253	b1 02		 mov	 cl, 2
  00255	eb 14		 jmp	 SHORT $LN103@deflate
$LN104@deflate:
  00257	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0025e	7d 09		 jge	 SHORT $LN102@deflate
  00260	83 f8 02	 cmp	 eax, 2
  00263	7c 04		 jl	 SHORT $LN102@deflate
  00265	32 c9		 xor	 cl, cl
  00267	eb 02		 jmp	 SHORT $LN103@deflate
$LN102@deflate:
  00269	b1 04		 mov	 cl, 4
$LN103@deflate:
  0026b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0026e	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00271	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1044 :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 1045 :                       4 : 0));
; 1046 :             put_byte(s, OS_CODE);

  00274	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00277	41		 inc	 ecx
  00278	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  0027b	c6 04 01 0a	 mov	 BYTE PTR [ecx+eax], 10	; 0000000aH

; 1047 :             s->status = BUSY_STATE;
; 1048 : 
; 1049 :             /* Compression must start with an empty pending buffer */
; 1050 :             flush_pending(strm);

  0027f	8b cf		 mov	 ecx, edi
  00281	ff 46 14	 inc	 DWORD PTR [esi+20]
  00284	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  0028b	e8 00 00 00 00	 call	 _flush_pending

; 1051 :             if (s->pending != 0) {

  00290	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00294	0f 85 d5 fd ff
	ff		 jne	 $LN151@deflate
  0029a	e9 30 01 00 00	 jmp	 $LN56@deflate
$LN55@deflate:

; 1052 :                 s->last_flush = -1;
; 1053 :                 return Z_OK;
; 1054 :             }
; 1055 :         }
; 1056 :         else {
; 1057 :             put_byte(s, (s->gzhead->text ? 1 : 0) +

  0029f	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  002a2	8b 40 2c	 mov	 eax, DWORD PTR [eax+44]
  002a5	f7 d9		 neg	 ecx
  002a7	1a c9		 sbb	 cl, cl
  002a9	80 e1 10	 and	 cl, 16			; 00000010H
  002ac	f7 d8		 neg	 eax
  002ae	1a c0		 sbb	 al, al
  002b0	24 02		 and	 al, 2
  002b2	02 c8		 add	 cl, al
  002b4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002b7	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  002ba	f7 d8		 neg	 eax
  002bc	1a c0		 sbb	 al, al
  002be	24 08		 and	 al, 8
  002c0	02 c8		 add	 cl, al
  002c2	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002c5	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  002c8	f7 d8		 neg	 eax
  002ca	1a c0		 sbb	 al, al
  002cc	24 04		 and	 al, 4
  002ce	02 c8		 add	 cl, al
  002d0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002d3	83 38 00	 cmp	 DWORD PTR [eax], 0
  002d6	0f 95 c0	 setne	 al
  002d9	02 c8		 add	 cl, al
  002db	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002de	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  002e1	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1058 :                      (s->gzhead->hcrc ? 2 : 0) +
; 1059 :                      (s->gzhead->extra == Z_NULL ? 0 : 4) +
; 1060 :                      (s->gzhead->name == Z_NULL ? 0 : 8) +
; 1061 :                      (s->gzhead->comment == Z_NULL ? 0 : 16)
; 1062 :                      );
; 1063 :             put_byte(s, (Byte)(s->gzhead->time & 0xff));

  002e4	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002e7	42		 inc	 edx
  002e8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002eb	89 56 14	 mov	 DWORD PTR [esi+20], edx
  002ee	0f b6 40 04	 movzx	 eax, BYTE PTR [eax+4]
  002f2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  002f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1064 :             put_byte(s, (Byte)((s->gzhead->time >> 8) & 0xff));

  002f8	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  002fb	42		 inc	 edx
  002fc	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  002ff	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00302	0f b6 40 05	 movzx	 eax, BYTE PTR [eax+5]
  00306	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00309	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1065 :             put_byte(s, (Byte)((s->gzhead->time >> 16) & 0xff));

  0030c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0030f	42		 inc	 edx
  00310	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00313	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00316	0f b6 40 06	 movzx	 eax, BYTE PTR [eax+6]
  0031a	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0031d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1066 :             put_byte(s, (Byte)((s->gzhead->time >> 24) & 0xff));

  00320	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00323	42		 inc	 edx
  00324	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00327	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0032a	0f b6 40 07	 movzx	 eax, BYTE PTR [eax+7]
  0032e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00331	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1067 :             put_byte(s, s->level == 9 ? 2 :

  00334	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0033a	42		 inc	 edx
  0033b	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0033e	83 f8 09	 cmp	 eax, 9
  00341	75 04		 jne	 SHORT $LN108@deflate
  00343	b1 02		 mov	 cl, 2
  00345	eb 14		 jmp	 SHORT $LN107@deflate
$LN108@deflate:
  00347	83 be 88 00 00
	00 02		 cmp	 DWORD PTR [esi+136], 2
  0034e	7d 09		 jge	 SHORT $LN141@deflate
  00350	83 f8 02	 cmp	 eax, 2
  00353	7c 04		 jl	 SHORT $LN141@deflate
  00355	32 c9		 xor	 cl, cl
  00357	eb 02		 jmp	 SHORT $LN107@deflate
$LN141@deflate:
  00359	b1 04		 mov	 cl, 4
$LN107@deflate:
  0035b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0035e	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00361	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1068 :                      (s->strategy >= Z_HUFFMAN_ONLY || s->level < 2 ?
; 1069 :                       4 : 0));
; 1070 :             put_byte(s, s->gzhead->os & 0xff);

  00364	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00367	42		 inc	 edx
  00368	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0036b	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0036e	8a 40 0c	 mov	 al, BYTE PTR [eax+12]
  00371	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00374	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1071 :             if (s->gzhead->extra != Z_NULL) {

  00377	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0037a	42		 inc	 edx
  0037b	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0037e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00382	74 25		 je	 SHORT $LN58@deflate

; 1072 :                 put_byte(s, s->gzhead->extra_len & 0xff);

  00384	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00387	0f b6 40 14	 movzx	 eax, BYTE PTR [eax+20]
  0038b	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0038e	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1073 :                 put_byte(s, (s->gzhead->extra_len >> 8) & 0xff);

  00391	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00394	42		 inc	 edx
  00395	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00398	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0039b	0f b6 40 15	 movzx	 eax, BYTE PTR [eax+21]
  0039f	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  003a2	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  003a5	42		 inc	 edx
  003a6	89 56 14	 mov	 DWORD PTR [esi+20], edx
$LN58@deflate:

; 1074 :             }
; 1075 :             if (s->gzhead->hcrc)

  003a9	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003ac	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  003b0	74 0f		 je	 SHORT $LN59@deflate

; 1076 :                 strm->adler = crc32(strm->adler, s->pending_buf,

  003b2	52		 push	 edx
  003b3	ff 76 08	 push	 DWORD PTR [esi+8]
  003b6	ff 77 30	 push	 DWORD PTR [edi+48]
  003b9	e8 00 00 00 00	 call	 _crc32@12
  003be	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN59@deflate:

; 1077 :                                     s->pending);
; 1078 :             s->gzindex = 0;

  003c1	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0

; 1079 :             s->status = EXTRA_STATE;

  003c8	c7 46 04 45 00
	00 00		 mov	 DWORD PTR [esi+4], 69	; 00000045H
$LN56@deflate:

; 1080 :         }
; 1081 :     }
; 1082 :     if (s->status == EXTRA_STATE) {

  003cf	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  003d2	83 f8 45	 cmp	 eax, 69			; 00000045H
  003d5	0f 85 f2 00 00
	00		 jne	 $LN60@deflate

; 1083 :         if (s->gzhead->extra != Z_NULL) {

  003db	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  003de	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  003e2	0f 84 dc 00 00
	00		 je	 $LN142@deflate

; 1084 :             ulg beg = s->pending;   /* start of bytes to update crc */
; 1085 :             uInt left = (s->gzhead->extra_len & 0xffff) - s->gzindex;

  003e8	0f b7 50 14	 movzx	 edx, WORD PTR [eax+20]
  003ec	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  003ef	2b 56 20	 sub	 edx, DWORD PTR [esi+32]

; 1086 :             while (s->pending + left > s->pending_buf_size) {

  003f2	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  003f5	89 4d fc	 mov	 DWORD PTR _beg$1$[ebp], ecx
  003f8	89 55 08	 mov	 DWORD PTR _left$1$[ebp], edx
  003fb	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  003fe	89 4d f8	 mov	 DWORD PTR $T1[ebp], ecx
  00401	3b c3		 cmp	 eax, ebx
  00403	76 71		 jbe	 SHORT $LN3@deflate
$LL2@deflate:

; 1087 :                 uInt copy = s->pending_buf_size - s->pending;
; 1088 :                 zmemcpy(s->pending_buf + s->pending,

  00405	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00408	2b d9		 sub	 ebx, ecx
  0040a	53		 push	 ebx
  0040b	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0040e	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00411	50		 push	 eax
  00412	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00415	03 c1		 add	 eax, ecx
  00417	50		 push	 eax
  00418	e8 00 00 00 00	 call	 _memcpy

; 1089 :                         s->gzhead->extra + s->gzindex, copy);
; 1090 :                 s->pending = s->pending_buf_size;
; 1091 :                 HCRC_UPDATE(beg);

  0041d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00420	83 c4 0c	 add	 esp, 12			; 0000000cH
  00423	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00426	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00429	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0042d	74 1b		 je	 SHORT $LN4@deflate
  0042f	8b 4d fc	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00432	3b d1		 cmp	 edx, ecx
  00434	76 14		 jbe	 SHORT $LN4@deflate
  00436	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00439	2b d1		 sub	 edx, ecx
  0043b	52		 push	 edx
  0043c	03 c1		 add	 eax, ecx
  0043e	50		 push	 eax
  0043f	ff 77 30	 push	 DWORD PTR [edi+48]
  00442	e8 00 00 00 00	 call	 _crc32@12
  00447	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN4@deflate:

; 1092 :                 s->gzindex += copy;

  0044a	01 5e 20	 add	 DWORD PTR [esi+32], ebx

; 1093 :                 flush_pending(strm);

  0044d	8b cf		 mov	 ecx, edi
  0044f	e8 00 00 00 00	 call	 _flush_pending

; 1094 :                 if (s->pending != 0) {

  00454	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00457	89 45 f8	 mov	 DWORD PTR $T1[ebp], eax
  0045a	85 c0		 test	 eax, eax
  0045c	0f 85 0d fc ff
	ff		 jne	 $LN151@deflate

; 1095 :                     s->last_flush = -1;
; 1096 :                     return Z_OK;
; 1097 :                 }
; 1098 :                 beg = 0;
; 1099 :                 left -= copy;

  00462	8b 55 08	 mov	 edx, DWORD PTR _left$1$[ebp]
  00465	33 c9		 xor	 ecx, ecx
  00467	2b d3		 sub	 edx, ebx
  00469	89 45 fc	 mov	 DWORD PTR _beg$1$[ebp], eax
  0046c	8b 5e 0c	 mov	 ebx, DWORD PTR [esi+12]
  0046f	89 55 08	 mov	 DWORD PTR _left$1$[ebp], edx
  00472	3b d3		 cmp	 edx, ebx
  00474	77 8f		 ja	 SHORT $LL2@deflate
$LN3@deflate:

; 1100 :             }
; 1101 :             zmemcpy(s->pending_buf + s->pending,

  00476	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00479	52		 push	 edx
  0047a	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0047d	03 46 20	 add	 eax, DWORD PTR [esi+32]
  00480	50		 push	 eax
  00481	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00484	03 45 f8	 add	 eax, DWORD PTR $T1[ebp]
  00487	50		 push	 eax
  00488	e8 00 00 00 00	 call	 _memcpy

; 1102 :                     s->gzhead->extra + s->gzindex, left);
; 1103 :             s->pending += left;

  0048d	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00490	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1104 :             HCRC_UPDATE(beg);

  00493	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00496	03 55 08	 add	 edx, DWORD PTR _left$1$[ebp]
  00499	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0049c	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004a0	74 1b		 je	 SHORT $LN7@deflate
  004a2	8b 4d fc	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  004a5	3b d1		 cmp	 edx, ecx
  004a7	76 14		 jbe	 SHORT $LN7@deflate
  004a9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  004ac	2b d1		 sub	 edx, ecx
  004ae	52		 push	 edx
  004af	03 c1		 add	 eax, ecx
  004b1	50		 push	 eax
  004b2	ff 77 30	 push	 DWORD PTR [edi+48]
  004b5	e8 00 00 00 00	 call	 _crc32@12
  004ba	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN7@deflate:

; 1105 :             s->gzindex = 0;

  004bd	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN142@deflate:

; 1106 :         }
; 1107 :         s->status = NAME_STATE;

  004c4	c7 46 04 49 00
	00 00		 mov	 DWORD PTR [esi+4], 73	; 00000049H

; 1127 :             s->gzindex = 0;

  004cb	eb 09		 jmp	 SHORT $LN149@deflate
$LN60@deflate:

; 1108 :     }
; 1109 :     if (s->status == NAME_STATE) {

  004cd	83 f8 49	 cmp	 eax, 73			; 00000049H
  004d0	0f 85 b6 00 00
	00		 jne	 $LN65@deflate
$LN149@deflate:

; 1110 :         if (s->gzhead->name != Z_NULL) {

  004d6	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004d9	83 78 1c 00	 cmp	 DWORD PTR [eax+28], 0
  004dd	0f 84 a0 00 00
	00		 je	 $LN143@deflate

; 1111 :             ulg beg = s->pending;   /* start of bytes to update crc */

  004e3	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  004e6	8b d9		 mov	 ebx, ecx
  004e8	89 4d 08	 mov	 DWORD PTR _beg$1$[ebp], ecx
  004eb	0f 1f 44 00 00	 npad	 5
$LL12@deflate:

; 1112 :             int val;
; 1113 :             do {
; 1114 :                 if (s->pending == s->pending_buf_size) {

  004f0	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  004f3	75 3b		 jne	 SHORT $LN67@deflate

; 1115 :                     HCRC_UPDATE(beg);

  004f5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  004f8	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  004fc	74 18		 je	 SHORT $LN13@deflate
  004fe	3b d9		 cmp	 ebx, ecx
  00500	76 14		 jbe	 SHORT $LN13@deflate
  00502	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00505	2b d9		 sub	 ebx, ecx
  00507	53		 push	 ebx
  00508	03 c1		 add	 eax, ecx
  0050a	50		 push	 eax
  0050b	ff 77 30	 push	 DWORD PTR [edi+48]
  0050e	e8 00 00 00 00	 call	 _crc32@12
  00513	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN13@deflate:

; 1116 :                     flush_pending(strm);

  00516	8b cf		 mov	 ecx, edi
  00518	e8 00 00 00 00	 call	 _flush_pending

; 1117 :                     if (s->pending != 0) {

  0051d	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  00521	0f 85 48 fb ff
	ff		 jne	 $LN151@deflate

; 1118 :                         s->last_flush = -1;
; 1119 :                         return Z_OK;
; 1120 :                     }
; 1121 :                     beg = 0;

  00527	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  0052e	33 db		 xor	 ebx, ebx
$LN67@deflate:

; 1122 :                 }
; 1123 :                 val = s->gzhead->name[s->gzindex++];

  00530	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00533	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  00536	8b 40 1c	 mov	 eax, DWORD PTR [eax+28]
  00539	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0053c	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0053f	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 1124 :                 put_byte(s, val);

  00542	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00545	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  00548	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0054b	43		 inc	 ebx
  0054c	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 1125 :             } while (val != 0);

  0054f	84 d2		 test	 dl, dl
  00551	74 05		 je	 SHORT $LN121@deflate
  00553	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00556	eb 98		 jmp	 SHORT $LL12@deflate
$LN121@deflate:

; 1126 :             HCRC_UPDATE(beg);

  00558	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0055b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0055f	74 1b		 je	 SHORT $LN16@deflate
  00561	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00564	3b d9		 cmp	 ebx, ecx
  00566	76 14		 jbe	 SHORT $LN16@deflate
  00568	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0056b	2b d9		 sub	 ebx, ecx
  0056d	53		 push	 ebx
  0056e	03 c1		 add	 eax, ecx
  00570	50		 push	 eax
  00571	ff 77 30	 push	 DWORD PTR [edi+48]
  00574	e8 00 00 00 00	 call	 _crc32@12
  00579	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN16@deflate:

; 1127 :             s->gzindex = 0;

  0057c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
$LN143@deflate:

; 1128 :         }
; 1129 :         s->status = COMMENT_STATE;

  00583	c7 46 04 5b 00
	00 00		 mov	 DWORD PTR [esi+4], 91	; 0000005bH
  0058a	eb 09		 jmp	 SHORT $LN148@deflate
$LN65@deflate:

; 1130 :     }
; 1131 :     if (s->status == COMMENT_STATE) {

  0058c	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  0058f	0f 85 b3 00 00
	00		 jne	 $LN71@deflate
$LN148@deflate:

; 1132 :         if (s->gzhead->comment != Z_NULL) {

  00595	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00598	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0059c	0f 84 9a 00 00
	00		 je	 $LN26@deflate

; 1133 :             ulg beg = s->pending;   /* start of bytes to update crc */

  005a2	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  005a5	8b d9		 mov	 ebx, ecx
  005a7	89 4d 08	 mov	 DWORD PTR _beg$1$[ebp], ecx
  005aa	66 0f 1f 44 00
	00		 npad	 6
$LL21@deflate:

; 1134 :             int val;
; 1135 :             do {
; 1136 :                 if (s->pending == s->pending_buf_size) {

  005b0	3b 5e 0c	 cmp	 ebx, DWORD PTR [esi+12]
  005b3	75 3b		 jne	 SHORT $LN73@deflate

; 1137 :                     HCRC_UPDATE(beg);

  005b5	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005b8	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  005bc	74 18		 je	 SHORT $LN22@deflate
  005be	3b d9		 cmp	 ebx, ecx
  005c0	76 14		 jbe	 SHORT $LN22@deflate
  005c2	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  005c5	2b d9		 sub	 ebx, ecx
  005c7	53		 push	 ebx
  005c8	03 c1		 add	 eax, ecx
  005ca	50		 push	 eax
  005cb	ff 77 30	 push	 DWORD PTR [edi+48]
  005ce	e8 00 00 00 00	 call	 _crc32@12
  005d3	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN22@deflate:

; 1138 :                     flush_pending(strm);

  005d6	8b cf		 mov	 ecx, edi
  005d8	e8 00 00 00 00	 call	 _flush_pending

; 1139 :                     if (s->pending != 0) {

  005dd	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  005e1	0f 85 88 fa ff
	ff		 jne	 $LN151@deflate

; 1140 :                         s->last_flush = -1;
; 1141 :                         return Z_OK;
; 1142 :                     }
; 1143 :                     beg = 0;

  005e7	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _beg$1$[ebp], 0
  005ee	33 db		 xor	 ebx, ebx
$LN73@deflate:

; 1144 :                 }
; 1145 :                 val = s->gzhead->comment[s->gzindex++];

  005f0	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  005f3	8b 4e 20	 mov	 ecx, DWORD PTR [esi+32]
  005f6	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  005f9	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  005fc	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  005ff	89 46 20	 mov	 DWORD PTR [esi+32], eax

; 1146 :                 put_byte(s, val);

  00602	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00605	88 14 03	 mov	 BYTE PTR [ebx+eax], dl
  00608	8b 5e 14	 mov	 ebx, DWORD PTR [esi+20]
  0060b	43		 inc	 ebx
  0060c	89 5e 14	 mov	 DWORD PTR [esi+20], ebx

; 1147 :             } while (val != 0);

  0060f	84 d2		 test	 dl, dl
  00611	74 05		 je	 SHORT $LN123@deflate
  00613	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00616	eb 98		 jmp	 SHORT $LL21@deflate
$LN123@deflate:

; 1148 :             HCRC_UPDATE(beg);

  00618	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0061b	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  0061f	74 1b		 je	 SHORT $LN26@deflate
  00621	8b 4d 08	 mov	 ecx, DWORD PTR _beg$1$[ebp]
  00624	3b d9		 cmp	 ebx, ecx
  00626	76 14		 jbe	 SHORT $LN26@deflate
  00628	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0062b	2b d9		 sub	 ebx, ecx
  0062d	53		 push	 ebx
  0062e	03 c1		 add	 eax, ecx
  00630	50		 push	 eax
  00631	ff 77 30	 push	 DWORD PTR [edi+48]
  00634	e8 00 00 00 00	 call	 _crc32@12
  00639	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN26@deflate:

; 1149 :         }
; 1150 :         s->status = HCRC_STATE;

  0063c	8b 5d 0c	 mov	 ebx, DWORD PTR _flush$[ebp]
  0063f	c7 46 04 67 00
	00 00		 mov	 DWORD PTR [esi+4], 103	; 00000067H
  00646	eb 05		 jmp	 SHORT $LN147@deflate
$LN71@deflate:

; 1151 :     }
; 1152 :     if (s->status == HCRC_STATE) {

  00648	83 f8 67	 cmp	 eax, 103		; 00000067H
  0064b	75 6a		 jne	 SHORT $LN145@deflate
$LN147@deflate:

; 1153 :         if (s->gzhead->hcrc) {

  0064d	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00650	83 78 2c 00	 cmp	 DWORD PTR [eax+44], 0
  00654	74 49		 je	 SHORT $LN78@deflate

; 1154 :             if (s->pending + 2 > s->pending_buf_size) {

  00656	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00659	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0065c	3b 46 0c	 cmp	 eax, DWORD PTR [esi+12]
  0065f	76 12		 jbe	 SHORT $LN144@deflate

; 1155 :                 flush_pending(strm);

  00661	8b cf		 mov	 ecx, edi
  00663	e8 00 00 00 00	 call	 _flush_pending

; 1156 :                 if (s->pending != 0) {

  00668	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  0066b	85 d2		 test	 edx, edx
  0066d	0f 85 fc f9 ff
	ff		 jne	 $LN151@deflate
$LN144@deflate:

; 1157 :                     s->last_flush = -1;
; 1158 :                     return Z_OK;
; 1159 :                 }
; 1160 :             }
; 1161 :             put_byte(s, (Byte)(strm->adler & 0xff));

  00673	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00676	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]

; 1162 :             put_byte(s, (Byte)((strm->adler >> 8) & 0xff));
; 1163 :             strm->adler = crc32(0L, Z_NULL, 0);

  0067a	6a 00		 push	 0
  0067c	6a 00		 push	 0
  0067e	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00681	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  00684	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00687	42		 inc	 edx
  00688	89 56 14	 mov	 DWORD PTR [esi+20], edx
  0068b	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  0068f	6a 00		 push	 0
  00691	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00694	ff 46 14	 inc	 DWORD PTR [esi+20]
  00697	e8 00 00 00 00	 call	 _crc32@12
  0069c	89 47 30	 mov	 DWORD PTR [edi+48], eax
$LN78@deflate:

; 1164 :         }
; 1165 :         s->status = BUSY_STATE;
; 1166 : 
; 1167 :         /* Compression must start with an empty pending buffer */
; 1168 :         flush_pending(strm);

  0069f	8b cf		 mov	 ecx, edi
  006a1	c7 46 04 71 00
	00 00		 mov	 DWORD PTR [esi+4], 113	; 00000071H
  006a8	e8 00 00 00 00	 call	 _flush_pending

; 1169 :         if (s->pending != 0) {

  006ad	83 7e 14 00	 cmp	 DWORD PTR [esi+20], 0
  006b1	0f 85 b8 f9 ff
	ff		 jne	 $LN151@deflate
$LN145@deflate:

; 1170 :             s->last_flush = -1;
; 1171 :             return Z_OK;
; 1172 :         }
; 1173 :     }
; 1174 : #endif
; 1175 : 
; 1176 :     /* Start a new block or continue the current one.
; 1177 :      */
; 1178 :     if (strm->avail_in != 0 || s->lookahead != 0 ||

  006b7	83 7f 04 00	 cmp	 DWORD PTR [edi+4], 0
  006bb	75 1b		 jne	 SHORT $LN83@deflate
  006bd	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  006c1	75 15		 jne	 SHORT $LN83@deflate
  006c3	85 db		 test	 ebx, ebx
  006c5	0f 84 ab f9 ff
	ff		 je	 $LN88@deflate
  006cb	81 7e 04 9a 02
	00 00		 cmp	 DWORD PTR [esi+4], 666	; 0000029aH
  006d2	0f 84 eb 00 00
	00		 je	 $LN95@deflate
$LN83@deflate:

; 1179 :         (flush != Z_NO_FLUSH && s->status != FINISH_STATE)) {
; 1180 :         block_state bstate;
; 1181 : 
; 1182 :         bstate = s->level == 0 ? deflate_stored(s, flush) :

  006d8	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  006de	85 c0		 test	 eax, eax
  006e0	75 09		 jne	 SHORT $LN114@deflate
  006e2	53		 push	 ebx
  006e3	56		 push	 esi
  006e4	e8 00 00 00 00	 call	 _deflate_stored
  006e9	eb 34		 jmp	 SHORT $LN234@deflate
$LN114@deflate:
  006eb	8b 8e 88 00 00
	00		 mov	 ecx, DWORD PTR [esi+136]
  006f1	83 f9 02	 cmp	 ecx, 2
  006f4	75 0b		 jne	 SHORT $LN112@deflate
  006f6	8b d3		 mov	 edx, ebx
  006f8	8b ce		 mov	 ecx, esi
  006fa	e8 00 00 00 00	 call	 _deflate_huff
  006ff	eb 21		 jmp	 SHORT $LN111@deflate
$LN112@deflate:
  00701	83 f9 03	 cmp	 ecx, 3
  00704	75 0b		 jne	 SHORT $LN110@deflate
  00706	8b d3		 mov	 edx, ebx
  00708	8b ce		 mov	 ecx, esi
  0070a	e8 00 00 00 00	 call	 _deflate_rle
  0070f	eb 11		 jmp	 SHORT $LN111@deflate
$LN110@deflate:
  00711	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00714	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  0071b	53		 push	 ebx
  0071c	56		 push	 esi
  0071d	ff d0		 call	 eax
$LN234@deflate:

; 1183 :                  s->strategy == Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
; 1184 :                  s->strategy == Z_RLE ? deflate_rle(s, flush) :
; 1185 :                  (*(configuration_table[s->level].func))(s, flush);
; 1186 : 
; 1187 :         if (bstate == finish_started || bstate == finish_done) {

  0071f	83 c4 08	 add	 esp, 8
$LN111@deflate:
  00722	83 f8 02	 cmp	 eax, 2
  00725	74 05		 je	 SHORT $LN85@deflate
  00727	83 f8 03	 cmp	 eax, 3
  0072a	75 07		 jne	 SHORT $LN84@deflate
$LN85@deflate:

; 1188 :             s->status = FINISH_STATE;

  0072c	c7 46 04 9a 02
	00 00		 mov	 DWORD PTR [esi+4], 666	; 0000029aH
$LN84@deflate:

; 1189 :         }
; 1190 :         if (bstate == need_more || bstate == finish_started) {

  00733	85 c0		 test	 eax, eax
  00735	0f 84 70 01 00
	00		 je	 $LN87@deflate
  0073b	83 f8 02	 cmp	 eax, 2
  0073e	0f 84 67 01 00
	00		 je	 $LN87@deflate

; 1192 :                 s->last_flush = -1; /* avoid BUF_ERROR next call, see above */
; 1193 :             }
; 1194 :             return Z_OK;
; 1195 :             /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
; 1196 :              * of deflate should use the same flush parameter to make sure
; 1197 :              * that the flush is complete. So we don't have to output an
; 1198 :              * empty block here, this will be done at next call. This also
; 1199 :              * ensures that for a very small output buffer, we emit at most
; 1200 :              * one empty block.
; 1201 :              */
; 1202 :         }
; 1203 :         if (bstate == block_done) {

  00744	83 f8 01	 cmp	 eax, 1
  00747	75 7a		 jne	 SHORT $LN95@deflate

; 1204 :             if (flush == Z_PARTIAL_FLUSH) {

  00749	3b d8		 cmp	 ebx, eax
  0074b	75 09		 jne	 SHORT $LN90@deflate

; 1205 :                 _tr_align(s);

  0074d	8b ce		 mov	 ecx, esi
  0074f	e8 00 00 00 00	 call	 __tr_align
  00754	eb 5c		 jmp	 SHORT $LN94@deflate
$LN90@deflate:

; 1206 :             } else if (flush != Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */

  00756	83 fb 05	 cmp	 ebx, 5
  00759	74 57		 je	 SHORT $LN94@deflate

; 1207 :                 _tr_stored_block(s, (char*)0, 0L, 0);

  0075b	6a 00		 push	 0
  0075d	6a 00		 push	 0
  0075f	33 d2		 xor	 edx, edx
  00761	8b ce		 mov	 ecx, esi
  00763	e8 00 00 00 00	 call	 __tr_stored_block
  00768	83 c4 08	 add	 esp, 8

; 1208 :                 /* For a full flush, this empty block will be recognized
; 1209 :                  * as a special marker by inflate_sync().
; 1210 :                  */
; 1211 :                 if (flush == Z_FULL_FLUSH) {

  0076b	83 fb 03	 cmp	 ebx, 3
  0076e	75 42		 jne	 SHORT $LN94@deflate

; 1212 :                     CLEAR_HASH(s);             /* forget history */

  00770	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00773	33 d2		 xor	 edx, edx
  00775	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00778	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  0077d	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00780	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00787	50		 push	 eax
  00788	52		 push	 edx
  00789	ff 76 44	 push	 DWORD PTR [esi+68]
  0078c	e8 00 00 00 00	 call	 _memset
  00791	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1213 :                     if (s->lookahead == 0) {

  00794	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00798	75 18		 jne	 SHORT $LN94@deflate

; 1214 :                         s->strstart = 0;

  0079a	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 1215 :                         s->block_start = 0L;

  007a1	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 1216 :                         s->insert = 0;

  007a8	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN94@deflate:

; 1217 :                     }
; 1218 :                 }
; 1219 :             }
; 1220 :             flush_pending(strm);

  007b2	8b cf		 mov	 ecx, edi
  007b4	e8 00 00 00 00	 call	 _flush_pending

; 1221 :             if (strm->avail_out == 0) {

  007b9	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  007bd	0f 84 ac f8 ff
	ff		 je	 $LN151@deflate
$LN95@deflate:

; 1222 :               s->last_flush = -1; /* avoid BUF_ERROR at next call, see above */
; 1223 :               return Z_OK;
; 1224 :             }
; 1225 :         }
; 1226 :     }
; 1227 : 
; 1228 :     if (flush != Z_FINISH) return Z_OK;

  007c3	83 fb 04	 cmp	 ebx, 4
  007c6	0f 85 aa f8 ff
	ff		 jne	 $LN88@deflate

; 1229 :     if (s->wrap <= 0) return Z_STREAM_END;

  007cc	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  007cf	85 c0		 test	 eax, eax
  007d1	7f 0c		 jg	 SHORT $LN97@deflate
  007d3	5e		 pop	 esi
  007d4	5f		 pop	 edi
  007d5	8d 43 fd	 lea	 eax, DWORD PTR [ebx-3]

; 1255 : }

  007d8	5b		 pop	 ebx
  007d9	8b e5		 mov	 esp, ebp
  007db	5d		 pop	 ebp
  007dc	c2 08 00	 ret	 8
$LN97@deflate:

; 1230 : 
; 1231 :     /* Write the trailer */
; 1232 : #ifdef GZIP
; 1233 :     if (s->wrap == 2) {

  007df	83 f8 02	 cmp	 eax, 2
  007e2	0f 85 89 00 00
	00		 jne	 $LN98@deflate

; 1234 :         put_byte(s, (Byte)(strm->adler & 0xff));

  007e8	8b 56 14	 mov	 edx, DWORD PTR [esi+20]
  007eb	0f b6 47 30	 movzx	 eax, BYTE PTR [edi+48]
  007ef	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007f2	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  007f5	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1235 :         put_byte(s, (Byte)((strm->adler >> 8) & 0xff));

  007f8	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  007fb	42		 inc	 edx
  007fc	89 56 14	 mov	 DWORD PTR [esi+20], edx
  007ff	0f b6 47 31	 movzx	 eax, BYTE PTR [edi+49]
  00803	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00806	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1236 :         put_byte(s, (Byte)((strm->adler >> 16) & 0xff));

  00809	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0080c	42		 inc	 edx
  0080d	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00810	0f b6 47 32	 movzx	 eax, BYTE PTR [edi+50]
  00814	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00817	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1237 :         put_byte(s, (Byte)((strm->adler >> 24) & 0xff));

  0081a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0081d	42		 inc	 edx
  0081e	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00821	0f b6 47 33	 movzx	 eax, BYTE PTR [edi+51]
  00825	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00828	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1238 :         put_byte(s, (Byte)(strm->total_in & 0xff));

  0082b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0082e	42		 inc	 edx
  0082f	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00832	0f b6 47 08	 movzx	 eax, BYTE PTR [edi+8]
  00836	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  00839	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1239 :         put_byte(s, (Byte)((strm->total_in >> 8) & 0xff));

  0083c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0083f	42		 inc	 edx
  00840	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00843	0f b6 47 09	 movzx	 eax, BYTE PTR [edi+9]
  00847	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0084a	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1240 :         put_byte(s, (Byte)((strm->total_in >> 16) & 0xff));

  0084d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00850	42		 inc	 edx
  00851	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00854	0f b6 47 0a	 movzx	 eax, BYTE PTR [edi+10]
  00858	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0085b	8b 56 14	 mov	 edx, DWORD PTR [esi+20]

; 1241 :         put_byte(s, (Byte)((strm->total_in >> 24) & 0xff));

  0085e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00861	42		 inc	 edx
  00862	89 56 14	 mov	 DWORD PTR [esi+20], edx
  00865	0f b6 47 0b	 movzx	 eax, BYTE PTR [edi+11]
  00869	88 04 0a	 mov	 BYTE PTR [edx+ecx], al
  0086c	ff 46 14	 inc	 DWORD PTR [esi+20]

; 1242 :     }

  0086f	eb 16		 jmp	 SHORT $LN99@deflate
$LN98@deflate:

; 1243 :     else
; 1244 : #endif
; 1245 :     {
; 1246 :         putShortMSB(s, (uInt)(strm->adler >> 16));

  00871	0f b7 57 32	 movzx	 edx, WORD PTR [edi+50]
  00875	8b ce		 mov	 ecx, esi
  00877	e8 00 00 00 00	 call	 _putShortMSB

; 1247 :         putShortMSB(s, (uInt)(strm->adler & 0xffff));

  0087c	0f b7 57 30	 movzx	 edx, WORD PTR [edi+48]
  00880	8b ce		 mov	 ecx, esi
  00882	e8 00 00 00 00	 call	 _putShortMSB
$LN99@deflate:

; 1248 :     }
; 1249 :     flush_pending(strm);

  00887	8b cf		 mov	 ecx, edi
  00889	e8 00 00 00 00	 call	 _flush_pending

; 1250 :     /* If avail_out is zero, the application will call deflate again
; 1251 :      * to flush the rest.
; 1252 :      */
; 1253 :     if (s->wrap > 0) s->wrap = -s->wrap; /* write the trailer only once! */

  0088e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00891	85 c0		 test	 eax, eax
  00893	7e 05		 jle	 SHORT $LN100@deflate
  00895	f7 d8		 neg	 eax
  00897	89 46 18	 mov	 DWORD PTR [esi+24], eax
$LN100@deflate:

; 1254 :     return s->pending != 0 ? Z_OK : Z_STREAM_END;

  0089a	33 c0		 xor	 eax, eax
  0089c	39 46 14	 cmp	 DWORD PTR [esi+20], eax
  0089f	5e		 pop	 esi
  008a0	5f		 pop	 edi
  008a1	0f 94 c0	 sete	 al

; 1255 : }

  008a4	5b		 pop	 ebx
  008a5	8b e5		 mov	 esp, ebp
  008a7	5d		 pop	 ebp
  008a8	c2 08 00	 ret	 8
$LN87@deflate:

; 1191 :             if (strm->avail_out == 0) {

  008ab	83 7f 10 00	 cmp	 DWORD PTR [edi+16], 0
  008af	0f 85 c1 f7 ff
	ff		 jne	 $LN88@deflate

; 976  :             return Z_OK;

  008b5	c7 46 28 ff ff
	ff ff		 mov	 DWORD PTR [esi+40], -1
  008bc	33 c0		 xor	 eax, eax
  008be	5e		 pop	 esi
  008bf	5f		 pop	 edi

; 1255 : }

  008c0	5b		 pop	 ebx
  008c1	8b e5		 mov	 esp, ebp
  008c3	5d		 pop	 ebp
  008c4	c2 08 00	 ret	 8
$LN34@deflate:
  008c7	5e		 pop	 esi

; 957  :         (s->status == FINISH_STATE && flush != Z_FINISH)) {
; 958  :         ERR_RETURN(strm, Z_STREAM_ERROR);

  008c8	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], OFFSET ??_C@_0N@MKKNPMJD@stream?5error@
  008cf	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  008d4	5f		 pop	 edi

; 1255 : }

  008d5	5b		 pop	 ebx
  008d6	8b e5		 mov	 esp, ebp
  008d8	5d		 pop	 ebp
  008d9	c2 08 00	 ret	 8
$LN32@deflate:
  008dc	5f		 pop	 edi

; 951  :         return Z_STREAM_ERROR;

  008dd	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1255 : }

  008e2	5b		 pop	 ebx
  008e3	8b e5		 mov	 esp, ebp
  008e5	5d		 pop	 ebp
  008e6	c2 08 00	 ret	 8
_deflate@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateEnd@4
_TEXT	SEGMENT
_status$1$ = -8						; size = 4
$T1 = -4						; size = 4
$T2 = 8							; size = 4
_strm$ = 8						; size = 4
_deflateEnd@4 PROC					; COMDAT

; 1258 : int ZEXPORT deflateEnd(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1259 :     int status;
; 1260 : 
; 1261 :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0b		 je	 SHORT $LN2@deflateEnd
  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1275 : }

  00017	8b e5		 mov	 esp, ebp
  00019	5d		 pop	 ebp
  0001a	c2 04 00	 ret	 4
$LN2@deflateEnd:

; 1262 : 
; 1263 :     status = strm->state->status;

  0001d	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00020	53		 push	 ebx
  00021	56		 push	 esi
  00022	8d 71 1c	 lea	 esi, DWORD PTR [ecx+28]
  00025	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 1264 : 
; 1265 :     /* Deallocate in reverse order of allocations: */
; 1266 :     TRY_FREE(strm, strm->state->pending_buf);

  00028	8d 59 28	 lea	 ebx, DWORD PTR [ecx+40]
  0002b	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002e	89 55 f8	 mov	 DWORD PTR _status$1$[ebp], edx
  00031	57		 push	 edi
  00032	8d 79 24	 lea	 edi, DWORD PTR [ecx+36]
  00035	85 c0		 test	 eax, eax
  00037	74 10		 je	 SHORT $LN8@deflateEnd
  00039	50		 push	 eax
  0003a	ff 33		 push	 DWORD PTR [ebx]
  0003c	8b 07		 mov	 eax, DWORD PTR [edi]
  0003e	ff d0		 call	 eax
  00040	83 c4 08	 add	 esp, 8
  00043	83 45 08 1c	 add	 DWORD PTR _strm$[ebp], 28 ; 0000001cH
  00047	eb 03		 jmp	 SHORT $LN3@deflateEnd
$LN8@deflateEnd:
  00049	89 75 08	 mov	 DWORD PTR $T2[ebp], esi
$LN3@deflateEnd:

; 1267 :     TRY_FREE(strm, strm->state->head);

  0004c	8b 06		 mov	 eax, DWORD PTR [esi]
  0004e	89 75 fc	 mov	 DWORD PTR $T1[ebp], esi
  00051	8b 40 44	 mov	 eax, DWORD PTR [eax+68]
  00054	85 c0		 test	 eax, eax
  00056	74 10		 je	 SHORT $LN4@deflateEnd
  00058	50		 push	 eax
  00059	ff 33		 push	 DWORD PTR [ebx]
  0005b	8b 07		 mov	 eax, DWORD PTR [edi]
  0005d	ff d0		 call	 eax
  0005f	8b 45 08	 mov	 eax, DWORD PTR $T2[ebp]
  00062	83 c4 08	 add	 esp, 8
  00065	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax
$LN4@deflateEnd:

; 1268 :     TRY_FREE(strm, strm->state->prev);

  00068	8b 06		 mov	 eax, DWORD PTR [esi]
  0006a	8b 40 40	 mov	 eax, DWORD PTR [eax+64]
  0006d	85 c0		 test	 eax, eax
  0006f	74 0d		 je	 SHORT $LN5@deflateEnd
  00071	50		 push	 eax
  00072	ff 33		 push	 DWORD PTR [ebx]
  00074	8b 07		 mov	 eax, DWORD PTR [edi]
  00076	ff d0		 call	 eax
  00078	8b 75 fc	 mov	 esi, DWORD PTR $T1[ebp]
  0007b	83 c4 08	 add	 esp, 8
$LN5@deflateEnd:

; 1269 :     TRY_FREE(strm, strm->state->window);

  0007e	8b 06		 mov	 eax, DWORD PTR [esi]
  00080	8b 40 38	 mov	 eax, DWORD PTR [eax+56]
  00083	85 c0		 test	 eax, eax
  00085	74 0a		 je	 SHORT $LN6@deflateEnd
  00087	50		 push	 eax
  00088	ff 33		 push	 DWORD PTR [ebx]
  0008a	8b 07		 mov	 eax, DWORD PTR [edi]
  0008c	ff d0		 call	 eax
  0008e	83 c4 08	 add	 esp, 8
$LN6@deflateEnd:

; 1270 : 
; 1271 :     ZFREE(strm, strm->state);

  00091	ff 36		 push	 DWORD PTR [esi]
  00093	8b 07		 mov	 eax, DWORD PTR [edi]
  00095	ff 33		 push	 DWORD PTR [ebx]
  00097	ff d0		 call	 eax
  00099	83 c4 08	 add	 esp, 8

; 1272 :     strm->state = Z_NULL;

  0009c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0

; 1273 : 
; 1274 :     return status == BUSY_STATE ? Z_DATA_ERROR : Z_OK;

  000a2	33 c0		 xor	 eax, eax
  000a4	b9 fd ff ff ff	 mov	 ecx, -3			; fffffffdH
  000a9	83 7d f8 71	 cmp	 DWORD PTR _status$1$[ebp], 113 ; 00000071H
  000ad	5f		 pop	 edi
  000ae	5e		 pop	 esi
  000af	0f 44 c1	 cmove	 eax, ecx
  000b2	5b		 pop	 ebx

; 1275 : }

  000b3	8b e5		 mov	 esp, ebp
  000b5	5d		 pop	 ebp
  000b6	c2 04 00	 ret	 4
_deflateEnd@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateInit_@16
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_version$ = 16						; size = 4
_stream_size$ = 20					; size = 4
_deflateInit_@16 PROC					; COMDAT

; 372  :                          int stream_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 373  :     return deflateInit2_(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL,

  00003	ff 75 14	 push	 DWORD PTR _stream_size$[ebp]
  00006	ff 75 10	 push	 DWORD PTR _version$[ebp]
  00009	6a 00		 push	 0
  0000b	6a 08		 push	 8
  0000d	6a 0f		 push	 15			; 0000000fH
  0000f	6a 08		 push	 8
  00011	ff 75 0c	 push	 DWORD PTR _level$[ebp]
  00014	ff 75 08	 push	 DWORD PTR _strm$[ebp]
  00017	e8 00 00 00 00	 call	 _deflateInit2_@32

; 374  :                          Z_DEFAULT_STRATEGY, version, stream_size);
; 375  :     /* To do: ignore strm->next_in if we use it as window */
; 376  : }

  0001c	5d		 pop	 ebp
  0001d	c2 10 00	 ret	 16			; 00000010H
_deflateInit_@16 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _slide_hash
_TEXT	SEGMENT
tv243 = -4						; size = 4
_slide_hash PROC					; COMDAT
; _s$ = ecx

; 187  : local void slide_hash(deflate_state *s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	56		 push	 esi
  00008	57		 push	 edi

; 188  :     unsigned n, m;
; 189  :     Posf *p;
; 190  :     uInt wsize = s->w_size;
; 191  : 
; 192  :     n = s->hash_size;

  00009	8b 7b 4c	 mov	 edi, DWORD PTR [ebx+76]

; 193  :     p = &s->head[n];

  0000c	8b 43 44	 mov	 eax, DWORD PTR [ebx+68]
  0000f	8b 53 2c	 mov	 edx, DWORD PTR [ebx+44]
  00012	8d 34 78	 lea	 esi, DWORD PTR [eax+edi*2]
$LL4@slide_hash:

; 194  :     do {
; 195  :         m = *--p;

  00015	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00019	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 196  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  0001c	8b c1		 mov	 eax, ecx
  0001e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv243[ebp], 0
  00025	2b c2		 sub	 eax, edx
  00027	3b ca		 cmp	 ecx, edx
  00029	0f b7 c0	 movzx	 eax, ax
  0002c	0f 42 45 fc	 cmovb	 eax, DWORD PTR tv243[ebp]
  00030	66 89 06	 mov	 WORD PTR [esi], ax

; 197  :     } while (--n);

  00033	83 ef 01	 sub	 edi, 1
  00036	75 dd		 jne	 SHORT $LL4@slide_hash

; 198  :     n = wsize;
; 199  : #ifndef FASTEST
; 200  :     p = &s->prev[n];

  00038	8b 43 40	 mov	 eax, DWORD PTR [ebx+64]
  0003b	8b fa		 mov	 edi, edx
  0003d	8d 34 50	 lea	 esi, DWORD PTR [eax+edx*2]
$LL7@slide_hash:

; 201  :     do {
; 202  :         m = *--p;

  00040	0f b7 4e fe	 movzx	 ecx, WORD PTR [esi-2]
  00044	8d 76 fe	 lea	 esi, DWORD PTR [esi-2]

; 203  :         *p = (Pos)(m >= wsize ? m - wsize : NIL);

  00047	8b c1		 mov	 eax, ecx
  00049	33 db		 xor	 ebx, ebx
  0004b	2b c2		 sub	 eax, edx
  0004d	3b ca		 cmp	 ecx, edx
  0004f	0f b7 c0	 movzx	 eax, ax
  00052	0f 42 c3	 cmovb	 eax, ebx
  00055	66 89 06	 mov	 WORD PTR [esi], ax

; 204  :         /* If n is not on any hash chain, prev[n] is garbage but
; 205  :          * its value will never be used.
; 206  :          */
; 207  :     } while (--n);

  00058	83 ef 01	 sub	 edi, 1
  0005b	75 e3		 jne	 SHORT $LL7@slide_hash
  0005d	5f		 pop	 edi
  0005e	5e		 pop	 esi
  0005f	5b		 pop	 ebx

; 208  : #endif
; 209  : }

  00060	8b e5		 mov	 esp, ebp
  00062	5d		 pop	 ebp
  00063	c3		 ret	 0
_slide_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _read_buf
_TEXT	SEGMENT
_size$ = 8						; size = 4
_read_buf PROC						; COMDAT
; _strm$ = ecx
; _buf$ = edx

; 218  : local unsigned read_buf(z_streamp strm, Bytef *buf, unsigned size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b da		 mov	 ebx, edx
  00009	57		 push	 edi

; 219  :     unsigned len = strm->avail_in;

  0000a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]

; 220  : 
; 221  :     if (len > size) len = size;

  0000d	8b f9		 mov	 edi, ecx
  0000f	3b 4d 08	 cmp	 ecx, DWORD PTR _size$[ebp]
  00012	0f 47 7d 08	 cmova	 edi, DWORD PTR _size$[ebp]

; 222  :     if (len == 0) return 0;

  00016	85 ff		 test	 edi, edi
  00018	75 07		 jne	 SHORT $LN3@read_buf

; 239  : }

  0001a	5f		 pop	 edi
  0001b	5e		 pop	 esi
  0001c	33 c0		 xor	 eax, eax
  0001e	5b		 pop	 ebx
  0001f	5d		 pop	 ebp
  00020	c3		 ret	 0
$LN3@read_buf:

; 223  : 
; 224  :     strm->avail_in  -= len;
; 225  : 
; 226  :     zmemcpy(buf, strm->next_in, len);

  00021	57		 push	 edi
  00022	ff 36		 push	 DWORD PTR [esi]
  00024	2b cf		 sub	 ecx, edi
  00026	53		 push	 ebx
  00027	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0002a	e8 00 00 00 00	 call	 _memcpy

; 227  :     if (strm->state->wrap == 1) {

  0002f	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8b 40 18	 mov	 eax, DWORD PTR [eax+24]
  00038	83 f8 01	 cmp	 eax, 1
  0003b	75 19		 jne	 SHORT $LN4@read_buf

; 228  :         strm->adler = adler32(strm->adler, buf, len);

  0003d	57		 push	 edi
  0003e	53		 push	 ebx
  0003f	ff 76 30	 push	 DWORD PTR [esi+48]
  00042	e8 00 00 00 00	 call	 _adler32@12

; 233  :     }
; 234  : #endif
; 235  :     strm->next_in  += len;

  00047	01 3e		 add	 DWORD PTR [esi], edi

; 236  :     strm->total_in += len;

  00049	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0004c	89 46 30	 mov	 DWORD PTR [esi+48], eax

; 237  : 
; 238  :     return len;

  0004f	8b c7		 mov	 eax, edi
  00051	5f		 pop	 edi

; 239  : }

  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN4@read_buf:

; 229  :     }
; 230  : #ifdef GZIP
; 231  :     else if (strm->state->wrap == 2) {

  00056	83 f8 02	 cmp	 eax, 2
  00059	75 0d		 jne	 SHORT $LN6@read_buf

; 232  :         strm->adler = crc32(strm->adler, buf, len);

  0005b	57		 push	 edi
  0005c	53		 push	 ebx
  0005d	ff 76 30	 push	 DWORD PTR [esi+48]
  00060	e8 00 00 00 00	 call	 _crc32@12

; 233  :     }
; 234  : #endif
; 235  :     strm->next_in  += len;

  00065	89 46 30	 mov	 DWORD PTR [esi+48], eax
$LN6@read_buf:
  00068	01 3e		 add	 DWORD PTR [esi], edi

; 237  : 
; 238  :     return len;

  0006a	8b c7		 mov	 eax, edi
  0006c	01 7e 08	 add	 DWORD PTR [esi+8], edi
  0006f	5f		 pop	 edi

; 239  : }

  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	5d		 pop	 ebp
  00073	c3		 ret	 0
_read_buf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _fill_window
_TEXT	SEGMENT
_wsize$1$ = -4						; size = 4
_fill_window PROC					; COMDAT
; _s$ = ecx

; 251  : local void fill_window(deflate_state *s) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	57		 push	 edi

; 252  :     unsigned n;
; 253  :     unsigned more;    /* Amount of free space at the end of the window. */
; 254  :     uInt wsize = s->w_size;

  00009	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0000c	89 5d fc	 mov	 DWORD PTR _wsize$1$[ebp], ebx
  0000f	90		 npad	 1
$LL4@fill_windo:

; 255  : 
; 256  :     Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");
; 257  : 
; 258  :     do {
; 259  :         more = (unsigned)(s->window_size -(ulg)s->lookahead -(ulg)s->strstart);
; 260  : 
; 261  :         /* Deal with !@#$% 64K limit: */
; 262  :         if (sizeof(int) <= 2) {
; 263  :             if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
; 264  :                 more = wsize;
; 265  : 
; 266  :             } else if (more == (unsigned)(-1)) {
; 267  :                 /* Very unlikely, but possible on 16 bit machine if
; 268  :                  * strstart == 0 && lookahead == 1 (input done a byte at time)
; 269  :                  */
; 270  :                 more--;
; 271  :             }
; 272  :         }
; 273  : 
; 274  :         /* If the window is almost full and there is insufficient lookahead,
; 275  :          * move the upper half to the lower one to make room in the upper half.
; 276  :          */
; 277  :         if (s->strstart >= wsize + MAX_DIST(s)) {

  00010	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00013	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00016	05 fa fe ff ff	 add	 eax, -262		; fffffefaH
  0001b	2b 7e 74	 sub	 edi, DWORD PTR [esi+116]
  0001e	03 c3		 add	 eax, ebx
  00020	2b 7e 6c	 sub	 edi, DWORD PTR [esi+108]
  00023	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  00026	72 3a		 jb	 SHORT $LN11@fill_windo

; 278  : 
; 279  :             zmemcpy(s->window, s->window + wsize, (unsigned)wsize - more);

  00028	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0002b	8b c3		 mov	 eax, ebx
  0002d	2b c7		 sub	 eax, edi
  0002f	50		 push	 eax
  00030	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00033	50		 push	 eax
  00034	51		 push	 ecx
  00035	e8 00 00 00 00	 call	 _memcpy

; 280  :             s->match_start -= wsize;
; 281  :             s->strstart    -= wsize; /* we now have strstart >= MAX_DIST */

  0003a	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00040	29 5e 70	 sub	 DWORD PTR [esi+112], ebx
  00043	2b c3		 sub	 eax, ebx

; 282  :             s->block_start -= (long) wsize;

  00045	29 5e 5c	 sub	 DWORD PTR [esi+92], ebx
  00048	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 283  :             if (s->insert > s->strstart)

  0004b	39 86 b4 16 00
	00		 cmp	 DWORD PTR [esi+5812], eax
  00051	76 06		 jbe	 SHORT $LN30@fill_windo

; 284  :                 s->insert = s->strstart;

  00053	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN30@fill_windo:

; 285  :             slide_hash(s);

  00059	8b ce		 mov	 ecx, esi
  0005b	e8 00 00 00 00	 call	 _slide_hash

; 286  :             more += wsize;

  00060	03 fb		 add	 edi, ebx
$LN11@fill_windo:

; 287  :         }
; 288  :         if (s->strm->avail_in == 0) break;

  00062	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00064	83 79 04 00	 cmp	 DWORD PTR [ecx+4], 0
  00068	0f 84 bf 00 00
	00		 je	 $LN3@fill_windo

; 289  : 
; 290  :         /* If there was no sliding:
; 291  :          *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
; 292  :          *    more == window_size - lookahead - strstart
; 293  :          * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
; 294  :          * => more >= window_size - 2*WSIZE + 2
; 295  :          * In the BIG_MEM or MMAP case (not yet supported),
; 296  :          *   window_size == input_size + MIN_LOOKAHEAD  &&
; 297  :          *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
; 298  :          * Otherwise, window_size == 2*WSIZE so more >= 2.
; 299  :          * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
; 300  :          */
; 301  :         Assert(more >= 2, "more < 2");
; 302  : 
; 303  :         n = read_buf(s->strm, s->window + s->strstart + s->lookahead, more);

  0006e	8b 56 74	 mov	 edx, DWORD PTR [esi+116]
  00071	03 56 6c	 add	 edx, DWORD PTR [esi+108]
  00074	03 56 38	 add	 edx, DWORD PTR [esi+56]
  00077	57		 push	 edi
  00078	e8 00 00 00 00	 call	 _read_buf

; 304  :         s->lookahead += n;

  0007d	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00080	83 c4 04	 add	 esp, 4

; 305  : 
; 306  :         /* Initialize the hash value now that we have some input: */
; 307  :         if (s->lookahead + s->insert >= MIN_MATCH) {

  00083	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  00089	03 f8		 add	 edi, eax
  0008b	89 7e 74	 mov	 DWORD PTR [esi+116], edi
  0008e	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  00091	83 f8 03	 cmp	 eax, 3
  00094	0f 82 7f 00 00
	00		 jb	 $LN2@fill_windo

; 308  :             uInt str = s->strstart - s->insert;

  0009a	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 309  :             s->ins_h = s->window[str];

  0009d	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000a0	2b d9		 sub	 ebx, ecx

; 310  :             UPDATE_HASH(s, s->ins_h, s->window[str + 1]);

  000a2	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  000a5	0f b6 14 18	 movzx	 edx, BYTE PTR [eax+ebx]
  000a9	89 56 48	 mov	 DWORD PTR [esi+72], edx
  000ac	0f b6 44 18 01	 movzx	 eax, BYTE PTR [eax+ebx+1]
  000b1	d3 e2		 shl	 edx, cl
  000b3	33 c2		 xor	 eax, edx
  000b5	23 46 54	 and	 eax, DWORD PTR [esi+84]

; 311  : #if MIN_MATCH != 3
; 312  :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 313  : #endif
; 314  :             while (s->insert) {

  000b8	83 be b4 16 00
	00 00		 cmp	 DWORD PTR [esi+5812], 0
  000bf	89 46 48	 mov	 DWORD PTR [esi+72], eax
  000c2	74 52		 je	 SHORT $LN34@fill_windo
$LL5@fill_windo:

; 315  :                 UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000c4	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000c7	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 316  : #ifndef FASTEST
; 317  :                 s->prev[str & s->w_mask] = s->head[s->ins_h];

  000ca	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000cd	23 d3		 and	 edx, ebx
  000cf	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  000d4	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  000d7	d3 e0		 shl	 eax, cl
  000d9	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  000dc	33 f8		 xor	 edi, eax
  000de	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  000e1	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000e4	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  000e7	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  000eb	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 318  : #endif
; 319  :                 s->head[s->ins_h] = (Pos)str;

  000ef	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  000f2	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000f5	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 320  :                 str++;

  000f9	43		 inc	 ebx

; 321  :                 s->insert--;

  000fa	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]

; 322  :                 if (s->lookahead + s->insert < MIN_MATCH)

  00100	8b 7e 74	 mov	 edi, DWORD PTR [esi+116]
  00103	49		 dec	 ecx
  00104	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx
  0010a	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
  0010d	83 f8 03	 cmp	 eax, 3
  00110	72 04		 jb	 SHORT $LN34@fill_windo

; 311  : #if MIN_MATCH != 3
; 312  :             Call UPDATE_HASH() MIN_MATCH-3 more times
; 313  : #endif
; 314  :             while (s->insert) {

  00112	85 c9		 test	 ecx, ecx
  00114	75 ae		 jne	 SHORT $LL5@fill_windo
$LN34@fill_windo:

; 323  :                     break;
; 324  :             }
; 325  :         }
; 326  :         /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
; 327  :          * but this is not important since only literal bytes will be emitted.
; 328  :          */
; 329  : 
; 330  :     } while (s->lookahead < MIN_LOOKAHEAD && s->strm->avail_in != 0);

  00116	8b 5d fc	 mov	 ebx, DWORD PTR _wsize$1$[ebp]
$LN2@fill_windo:
  00119	81 ff 06 01 00
	00		 cmp	 edi, 262		; 00000106H
  0011f	73 0c		 jae	 SHORT $LN3@fill_windo
  00121	8b 06		 mov	 eax, DWORD PTR [esi]
  00123	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00127	0f 85 e3 fe ff
	ff		 jne	 $LL4@fill_windo
$LN3@fill_windo:

; 331  : 
; 332  :     /* If the WIN_INIT bytes after the end of the current data have never been
; 333  :      * written, then zero those bytes in order to avoid memory check reports of
; 334  :      * the use of uninitialized (or uninitialised as Julian writes) bytes by
; 335  :      * the longest match routines.  Update the high water mark for the next
; 336  :      * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
; 337  :      * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
; 338  :      */
; 339  :     if (s->high_water < s->window_size) {

  0012d	8b 8e c0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5824]
  00133	8b 7e 3c	 mov	 edi, DWORD PTR [esi+60]
  00136	3b cf		 cmp	 ecx, edi
  00138	73 67		 jae	 SHORT $LN21@fill_windo

; 340  :         ulg curr = s->strstart + (ulg)(s->lookahead);

  0013a	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  0013d	03 5e 74	 add	 ebx, DWORD PTR [esi+116]

; 341  :         ulg init;
; 342  : 
; 343  :         if (s->high_water < curr) {

  00140	3b cb		 cmp	 ecx, ebx
  00142	73 2d		 jae	 SHORT $LN18@fill_windo

; 344  :             /* Previous high water mark below current data -- zero WIN_INIT
; 345  :              * bytes or up to end of window, whichever is less.
; 346  :              */
; 347  :             init = s->window_size - curr;
; 348  :             if (init > WIN_INIT)

  00144	b8 02 01 00 00	 mov	 eax, 258		; 00000102H
  00149	2b fb		 sub	 edi, ebx
  0014b	3b f8		 cmp	 edi, eax
  0014d	0f 47 f8	 cmova	 edi, eax

; 349  :                 init = WIN_INIT;
; 350  :             zmemzero(s->window + curr, (unsigned)init);

  00150	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00153	57		 push	 edi
  00154	03 c3		 add	 eax, ebx
  00156	6a 00		 push	 0
  00158	50		 push	 eax
  00159	e8 00 00 00 00	 call	 _memset
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 351  :             s->high_water = curr + init;

  00161	8d 04 1f	 lea	 eax, DWORD PTR [edi+ebx]
  00164	89 86 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], eax
  0016a	5f		 pop	 edi

; 363  :         }
; 364  :     }
; 365  : 
; 366  :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 367  :            "not enough room for search");
; 368  : }

  0016b	5e		 pop	 esi
  0016c	5b		 pop	 ebx
  0016d	8b e5		 mov	 esp, ebp
  0016f	5d		 pop	 ebp
  00170	c3		 ret	 0
$LN18@fill_windo:

; 352  :         }
; 353  :         else if (s->high_water < (ulg)curr + WIN_INIT) {

  00171	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]
  00177	3b c8		 cmp	 ecx, eax
  00179	73 26		 jae	 SHORT $LN21@fill_windo

; 354  :             /* High water mark at or above current data, but below current data
; 355  :              * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
; 356  :              * to end of window, whichever is less.
; 357  :              */
; 358  :             init = (ulg)curr + WIN_INIT - s->high_water;

  0017b	2b d9		 sub	 ebx, ecx
  0017d	2b f9		 sub	 edi, ecx
  0017f	8d 83 02 01 00
	00		 lea	 eax, DWORD PTR [ebx+258]

; 359  :             if (init > s->window_size - s->high_water)
; 360  :                 init = s->window_size - s->high_water;
; 361  :             zmemzero(s->window + s->high_water, (unsigned)init);

  00185	3b c7		 cmp	 eax, edi
  00187	0f 46 f8	 cmovbe	 edi, eax
  0018a	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0018d	57		 push	 edi
  0018e	03 c1		 add	 eax, ecx
  00190	6a 00		 push	 0
  00192	50		 push	 eax
  00193	e8 00 00 00 00	 call	 _memset
  00198	83 c4 0c	 add	 esp, 12			; 0000000cH

; 362  :             s->high_water += init;

  0019b	01 be c0 16 00
	00		 add	 DWORD PTR [esi+5824], edi
$LN21@fill_windo:

; 363  :         }
; 364  :     }
; 365  : 
; 366  :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 367  :            "not enough room for search");
; 368  : }

  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5b		 pop	 ebx
  001a4	8b e5		 mov	 esp, ebp
  001a6	5d		 pop	 ebp
  001a7	c3		 ret	 0
_fill_window ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateInit2_@32
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_method$ = 16						; size = 4
_windowBits$ = 20					; size = 4
_memLevel$ = 24						; size = 4
_strategy$ = 28						; size = 4
tv507 = 32						; size = 4
_version$ = 32						; size = 4
_stream_size$ = 36					; size = 4
_deflateInit2_@32 PROC					; COMDAT

; 381  :                           const char *version, int stream_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 382  :     deflate_state *s;
; 383  :     int wrap = 1;
; 384  :     static const char my_version[] = ZLIB_VERSION;
; 385  : 
; 386  :     if (version == Z_NULL || version[0] != my_version[0] ||

  00003	8b 45 20	 mov	 eax, DWORD PTR _version$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00009	56		 push	 esi
  0000a	be 01 00 00 00	 mov	 esi, 1
  0000f	85 c0		 test	 eax, eax
  00011	0f 84 13 02 00
	00		 je	 $LN3@deflateIni
  00017	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  0001a	0f 85 0a 02 00
	00		 jne	 $LN3@deflateIni
  00020	83 7d 24 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  00024	0f 85 00 02 00
	00		 jne	 $LN3@deflateIni

; 389  :     }
; 390  :     if (strm == Z_NULL) return Z_STREAM_ERROR;

  0002a	53		 push	 ebx
  0002b	57		 push	 edi
  0002c	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  0002f	85 ff		 test	 edi, edi
  00031	0f 84 e7 01 00
	00		 je	 $LN13@deflateIni

; 391  : 
; 392  :     strm->msg = Z_NULL;
; 393  :     if (strm->zalloc == (alloc_func)0) {

  00037	83 7f 20 00	 cmp	 DWORD PTR [edi+32], 0
  0003b	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00042	75 0e		 jne	 SHORT $LN5@deflateIni

; 394  : #ifdef Z_SOLO
; 395  :         return Z_STREAM_ERROR;
; 396  : #else
; 397  :         strm->zalloc = zcalloc;

  00044	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], OFFSET _zcalloc

; 398  :         strm->opaque = (voidpf)0;

  0004b	c7 47 28 00 00
	00 00		 mov	 DWORD PTR [edi+40], 0
$LN5@deflateIni:

; 399  : #endif
; 400  :     }
; 401  :     if (strm->zfree == (free_func)0)

  00052	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00056	75 07		 jne	 SHORT $LN6@deflateIni

; 402  : #ifdef Z_SOLO
; 403  :         return Z_STREAM_ERROR;
; 404  : #else
; 405  :         strm->zfree = zcfree;

  00058	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], OFFSET _zcfree
$LN6@deflateIni:

; 406  : #endif
; 407  : 
; 408  : #ifdef FASTEST
; 409  :     if (level != 0) level = 1;
; 410  : #else
; 411  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 412  : #endif
; 413  : 
; 414  :     if (windowBits < 0) { /* suppress zlib wrapper */

  0005f	8b 5d 14	 mov	 ebx, DWORD PTR _windowBits$[ebp]
  00062	83 fa ff	 cmp	 edx, -1
  00065	b9 06 00 00 00	 mov	 ecx, 6
  0006a	0f 45 ca	 cmovne	 ecx, edx
  0006d	89 4d 20	 mov	 DWORD PTR tv507[ebp], ecx
  00070	85 db		 test	 ebx, ebx
  00072	79 0f		 jns	 SHORT $LN8@deflateIni

; 415  :         wrap = 0;

  00074	33 f6		 xor	 esi, esi

; 416  :         if (windowBits < -15)

  00076	83 fb f1	 cmp	 ebx, -15		; fffffff1H
  00079	0f 8c 9f 01 00
	00		 jl	 $LN13@deflateIni

; 417  :             return Z_STREAM_ERROR;
; 418  :         windowBits = -windowBits;

  0007f	f7 db		 neg	 ebx

; 419  :     }

  00081	eb 0d		 jmp	 SHORT $LN11@deflateIni
$LN8@deflateIni:

; 420  : #ifdef GZIP
; 421  :     else if (windowBits > 15) {

  00083	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00086	7e 08		 jle	 SHORT $LN11@deflateIni

; 422  :         wrap = 2;       /* write gzip wrapper instead */

  00088	be 02 00 00 00	 mov	 esi, 2

; 423  :         windowBits -= 16;

  0008d	83 eb 10	 sub	 ebx, 16			; 00000010H
$LN11@deflateIni:

; 424  :     }
; 425  : #endif
; 426  :     if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method != Z_DEFLATED ||
; 427  :         windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
; 428  :         strategy < 0 || strategy > Z_FIXED || (windowBits == 8 && wrap != 1)) {

  00090	8b 45 18	 mov	 eax, DWORD PTR _memLevel$[ebp]
  00093	48		 dec	 eax
  00094	83 f8 08	 cmp	 eax, 8
  00097	0f 87 81 01 00
	00		 ja	 $LN13@deflateIni
  0009d	83 7d 10 08	 cmp	 DWORD PTR _method$[ebp], 8
  000a1	0f 85 77 01 00
	00		 jne	 $LN13@deflateIni
  000a7	8d 43 f8	 lea	 eax, DWORD PTR [ebx-8]
  000aa	83 f8 07	 cmp	 eax, 7
  000ad	0f 87 6b 01 00
	00		 ja	 $LN13@deflateIni
  000b3	83 f9 09	 cmp	 ecx, 9
  000b6	0f 87 62 01 00
	00		 ja	 $LN13@deflateIni
  000bc	83 7d 1c 04	 cmp	 DWORD PTR _strategy$[ebp], 4
  000c0	0f 87 58 01 00
	00		 ja	 $LN13@deflateIni
  000c6	83 fb 08	 cmp	 ebx, 8
  000c9	75 0c		 jne	 SHORT $LN14@deflateIni
  000cb	83 fe 01	 cmp	 esi, 1
  000ce	0f 85 4a 01 00
	00		 jne	 $LN13@deflateIni

; 430  :     }
; 431  :     if (windowBits == 8) windowBits = 9;  /* until 256-byte window bug fixed */

  000d4	8d 5e 08	 lea	 ebx, DWORD PTR [esi+8]
$LN14@deflateIni:

; 432  :     s = (deflate_state *) ZALLOC(strm, 1, sizeof(deflate_state));

  000d7	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000da	68 c4 16 00 00	 push	 5828			; 000016c4H
  000df	6a 01		 push	 1
  000e1	ff 77 28	 push	 DWORD PTR [edi+40]
  000e4	ff d0		 call	 eax
  000e6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 433  :     if (s == Z_NULL) return Z_MEM_ERROR;

  000e9	85 c0		 test	 eax, eax
  000eb	0f 84 21 01 00
	00		 je	 $LN45@deflateIni

; 434  :     strm->state = (struct internal_state FAR *)s;

  000f1	89 47 1c	 mov	 DWORD PTR [edi+28], eax

; 435  :     s->strm = strm;
; 436  :     s->status = INIT_STATE;     /* to pass state test in deflateReset() */
; 437  : 
; 438  :     s->wrap = wrap;
; 439  :     s->gzhead = Z_NULL;
; 440  :     s->w_bits = (uInt)windowBits;
; 441  :     s->w_size = 1 << s->w_bits;

  000f4	8b cb		 mov	 ecx, ebx
  000f6	89 70 18	 mov	 DWORD PTR [eax+24], esi
  000f9	be 01 00 00 00	 mov	 esi, 1
  000fe	89 58 30	 mov	 DWORD PTR [eax+48], ebx
  00101	8b d8		 mov	 ebx, eax
  00103	d3 e6		 shl	 esi, cl

; 442  :     s->w_mask = s->w_size - 1;
; 443  : 
; 444  :     s->hash_bits = (uInt)memLevel + 7;

  00105	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00108	89 38		 mov	 DWORD PTR [eax], edi
  0010a	83 c1 07	 add	 ecx, 7
  0010d	c7 40 04 2a 00
	00 00		 mov	 DWORD PTR [eax+4], 42	; 0000002aH
  00114	c7 40 1c 00 00
	00 00		 mov	 DWORD PTR [eax+28], 0
  0011b	8d 46 ff	 lea	 eax, DWORD PTR [esi-1]
  0011e	89 43 34	 mov	 DWORD PTR [ebx+52], eax

; 445  :     s->hash_size = 1 << s->hash_bits;

  00121	b8 01 00 00 00	 mov	 eax, 1
  00126	d3 e0		 shl	 eax, cl
  00128	89 43 4c	 mov	 DWORD PTR [ebx+76], eax

; 446  :     s->hash_mask = s->hash_size - 1;

  0012b	48		 dec	 eax
  0012c	89 43 54	 mov	 DWORD PTR [ebx+84], eax

; 447  :     s->hash_shift =  ((s->hash_bits + MIN_MATCH-1) / MIN_MATCH);

  0012f	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  00134	89 4b 50	 mov	 DWORD PTR [ebx+80], ecx
  00137	83 c1 02	 add	 ecx, 2
  0013a	f7 e1		 mul	 ecx

; 448  : 
; 449  :     s->window = (Bytef *) ZALLOC(strm, s->w_size, 2*sizeof(Byte));

  0013c	6a 02		 push	 2
  0013e	d1 ea		 shr	 edx, 1
  00140	89 73 2c	 mov	 DWORD PTR [ebx+44], esi
  00143	89 53 58	 mov	 DWORD PTR [ebx+88], edx
  00146	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00149	56		 push	 esi
  0014a	ff 77 28	 push	 DWORD PTR [edi+40]
  0014d	ff d0		 call	 eax

; 450  :     s->prev   = (Posf *)  ZALLOC(strm, s->w_size, sizeof(Pos));

  0014f	6a 02		 push	 2
  00151	ff 73 2c	 push	 DWORD PTR [ebx+44]
  00154	89 43 38	 mov	 DWORD PTR [ebx+56], eax
  00157	ff 77 28	 push	 DWORD PTR [edi+40]
  0015a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0015d	ff d0		 call	 eax

; 451  :     s->head   = (Posf *)  ZALLOC(strm, s->hash_size, sizeof(Pos));

  0015f	6a 02		 push	 2
  00161	ff 73 4c	 push	 DWORD PTR [ebx+76]
  00164	89 43 40	 mov	 DWORD PTR [ebx+64], eax
  00167	ff 77 28	 push	 DWORD PTR [edi+40]
  0016a	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0016d	ff d0		 call	 eax

; 452  : 
; 453  :     s->high_water = 0;      /* nothing written to s->window yet */
; 454  : 
; 455  :     s->lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

  0016f	8b 4d 18	 mov	 ecx, DWORD PTR _memLevel$[ebp]
  00172	89 43 44	 mov	 DWORD PTR [ebx+68], eax
  00175	b8 01 00 00 00	 mov	 eax, 1

; 456  : 
; 457  :     /* We overlay pending_buf and sym_buf. This works since the average size
; 458  :      * for length/distance pairs over any compressed block is assured to be 31
; 459  :      * bits or less.
; 460  :      *
; 461  :      * Analysis: The longest fixed codes are a length code of 8 bits plus 5
; 462  :      * extra bits, for lengths 131 to 257. The longest fixed distance codes are
; 463  :      * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
; 464  :      * possible fixed-codes length/distance pair is then 31 bits total.
; 465  :      *
; 466  :      * sym_buf starts one-fourth of the way into pending_buf. So there are
; 467  :      * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
; 468  :      * in sym_buf is three bytes -- two for the distance and one for the
; 469  :      * literal/length. As each symbol is consumed, the pointer to the next
; 470  :      * sym_buf value to read moves forward three bytes. From that symbol, up to
; 471  :      * 31 bits are written to pending_buf. The closest the written pending_buf
; 472  :      * bits gets to the next sym_buf symbol to read is just before the last
; 473  :      * code is written. At that time, 31*(n - 2) bits have been written, just
; 474  :      * after 24*(n - 2) bits have been consumed from sym_buf. sym_buf starts at
; 475  :      * 8*n bits into pending_buf. (Note that the symbol buffer fills when n - 1
; 476  :      * symbols are written.) The closest the writing gets to what is unread is
; 477  :      * then n + 14 bits. Here n is lit_bufsize, which is 16384 by default, and
; 478  :      * can range from 128 to 32768.
; 479  :      *
; 480  :      * Therefore, at a minimum, there are 142 bits of space between what is
; 481  :      * written and what is read in the overlain buffers, so the symbols cannot
; 482  :      * be overwritten by the compressed data. That space is actually 139 bits,
; 483  :      * due to the three-bit fixed-code block header.
; 484  :      *
; 485  :      * That covers the case where either Z_FIXED is specified, forcing fixed
; 486  :      * codes, or when the use of fixed codes is chosen, because that choice
; 487  :      * results in a smaller compressed block than dynamic codes. That latter
; 488  :      * condition then assures that the above analysis also covers all dynamic
; 489  :      * blocks. A dynamic-code block will only be chosen to be emitted if it has
; 490  :      * fewer bits than a fixed-code block would for the same set of symbols.
; 491  :      * Therefore its average symbol length is assured to be less than 31. So
; 492  :      * the compressed data for a dynamic block also cannot overwrite the
; 493  :      * symbols from which it is being constructed.
; 494  :      */
; 495  : 
; 496  :     s->pending_buf = (uchf *) ZALLOC(strm, s->lit_bufsize, LIT_BUFS);

  0017a	6a 04		 push	 4
  0017c	c7 83 c0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [ebx+5824], 0
  00186	8d 49 06	 lea	 ecx, DWORD PTR [ecx+6]
  00189	d3 e0		 shl	 eax, cl
  0018b	50		 push	 eax
  0018c	89 83 9c 16 00
	00		 mov	 DWORD PTR [ebx+5788], eax
  00192	ff 77 28	 push	 DWORD PTR [edi+40]
  00195	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00198	ff d0		 call	 eax

; 497  :     s->pending_buf_size = (ulg)s->lit_bufsize * 4;

  0019a	8b 93 9c 16 00
	00		 mov	 edx, DWORD PTR [ebx+5788]
  001a0	83 c4 30	 add	 esp, 48			; 00000030H

; 498  : 
; 499  :     if (s->window == Z_NULL || s->prev == Z_NULL || s->head == Z_NULL ||

  001a3	83 7b 38 00	 cmp	 DWORD PTR [ebx+56], 0
  001a7	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  001aa	8d 0c 95 00 00
	00 00		 lea	 ecx, DWORD PTR [edx*4]
  001b1	89 4b 0c	 mov	 DWORD PTR [ebx+12], ecx
  001b4	74 47		 je	 SHORT $LN17@deflateIni
  001b6	83 7b 40 00	 cmp	 DWORD PTR [ebx+64], 0
  001ba	74 41		 je	 SHORT $LN17@deflateIni
  001bc	83 7b 44 00	 cmp	 DWORD PTR [ebx+68], 0
  001c0	74 3b		 je	 SHORT $LN17@deflateIni
  001c2	85 c0		 test	 eax, eax
  001c4	74 37		 je	 SHORT $LN17@deflateIni

; 505  :     }
; 506  : #ifdef LIT_MEM
; 507  :     s->d_buf = (ushf *)(s->pending_buf + (s->lit_bufsize << 1));
; 508  :     s->l_buf = s->pending_buf + (s->lit_bufsize << 2);
; 509  :     s->sym_end = s->lit_bufsize - 1;
; 510  : #else
; 511  :     s->sym_buf = s->pending_buf + s->lit_bufsize;

  001c6	03 c2		 add	 eax, edx

; 512  :     s->sym_end = (s->lit_bufsize - 1) * 3;

  001c8	4a		 dec	 edx
  001c9	89 83 98 16 00
	00		 mov	 DWORD PTR [ebx+5784], eax

; 513  : #endif
; 514  :     /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
; 515  :      * on 16 bit machines and because stored blocks are restricted to
; 516  :      * 64K-1 bytes.
; 517  :      */
; 518  : 
; 519  :     s->level = level;
; 520  :     s->strategy = strategy;
; 521  :     s->method = (Byte)method;
; 522  : 
; 523  :     return deflateReset(strm);

  001cf	57		 push	 edi
  001d0	8d 04 52	 lea	 eax, DWORD PTR [edx+edx*2]
  001d3	89 83 a4 16 00
	00		 mov	 DWORD PTR [ebx+5796], eax
  001d9	8b 45 20	 mov	 eax, DWORD PTR tv507[ebp]
  001dc	89 83 84 00 00
	00		 mov	 DWORD PTR [ebx+132], eax
  001e2	8b 45 1c	 mov	 eax, DWORD PTR _strategy$[ebp]
  001e5	89 83 88 00 00
	00		 mov	 DWORD PTR [ebx+136], eax
  001eb	8b 45 10	 mov	 eax, DWORD PTR _method$[ebp]
  001ee	88 43 24	 mov	 BYTE PTR [ebx+36], al
  001f1	e8 00 00 00 00	 call	 _deflateReset@4
  001f6	5f		 pop	 edi
  001f7	5b		 pop	 ebx
  001f8	5e		 pop	 esi

; 524  : }

  001f9	5d		 pop	 ebp
  001fa	c2 20 00	 ret	 32			; 00000020H
$LN17@deflateIni:

; 500  :         s->pending_buf == Z_NULL) {
; 501  :         s->status = FINISH_STATE;
; 502  :         strm->msg = ERR_MSG(Z_MEM_ERROR);

  001fd	a1 18 00 00 00	 mov	 eax, DWORD PTR _z_errmsg+24
  00202	c7 43 04 9a 02
	00 00		 mov	 DWORD PTR [ebx+4], 666	; 0000029aH

; 503  :         deflateEnd (strm);

  00209	57		 push	 edi
  0020a	89 47 18	 mov	 DWORD PTR [edi+24], eax
  0020d	e8 00 00 00 00	 call	 _deflateEnd@4
$LN45@deflateIni:

; 504  :         return Z_MEM_ERROR;

  00212	5f		 pop	 edi
  00213	5b		 pop	 ebx
  00214	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  00219	5e		 pop	 esi

; 524  : }

  0021a	5d		 pop	 ebp
  0021b	c2 20 00	 ret	 32			; 00000020H
$LN13@deflateIni:
  0021e	5f		 pop	 edi
  0021f	5b		 pop	 ebx

; 429  :         return Z_STREAM_ERROR;

  00220	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00225	5e		 pop	 esi

; 524  : }

  00226	5d		 pop	 ebp
  00227	c2 20 00	 ret	 32			; 00000020H
$LN3@deflateIni:

; 387  :         stream_size != sizeof(z_stream)) {
; 388  :         return Z_VERSION_ERROR;

  0022a	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  0022f	5e		 pop	 esi

; 524  : }

  00230	5d		 pop	 ebp
  00231	c2 20 00	 ret	 32			; 00000020H
_deflateInit2_@32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateStateCheck
_TEXT	SEGMENT
_deflateStateCheck PROC					; COMDAT
; _strm$ = ecx

; 530  :     deflate_state *s;
; 531  :     if (strm == Z_NULL ||
; 532  :         strm->zalloc == (alloc_func)0 || strm->zfree == (free_func)0)

  00000	85 c9		 test	 ecx, ecx
  00002	74 47		 je	 SHORT $LN3@deflateSta
  00004	83 79 20 00	 cmp	 DWORD PTR [ecx+32], 0
  00008	74 41		 je	 SHORT $LN3@deflateSta
  0000a	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  0000e	74 3b		 je	 SHORT $LN3@deflateSta

; 534  :     s = strm->state;

  00010	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]

; 535  :     if (s == Z_NULL || s->strm != strm || (s->status != INIT_STATE &&

  00013	85 c0		 test	 eax, eax
  00015	74 34		 je	 SHORT $LN3@deflateSta
  00017	39 08		 cmp	 DWORD PTR [eax], ecx
  00019	75 30		 jne	 SHORT $LN3@deflateSta
  0001b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0001e	83 f8 2a	 cmp	 eax, 42			; 0000002aH
  00021	74 25		 je	 SHORT $LN4@deflateSta
  00023	83 f8 39	 cmp	 eax, 57			; 00000039H
  00026	74 20		 je	 SHORT $LN4@deflateSta
  00028	83 f8 45	 cmp	 eax, 69			; 00000045H
  0002b	74 1b		 je	 SHORT $LN4@deflateSta
  0002d	83 f8 49	 cmp	 eax, 73			; 00000049H
  00030	74 16		 je	 SHORT $LN4@deflateSta
  00032	83 f8 5b	 cmp	 eax, 91			; 0000005bH
  00035	74 11		 je	 SHORT $LN4@deflateSta
  00037	83 f8 67	 cmp	 eax, 103		; 00000067H
  0003a	74 0c		 je	 SHORT $LN4@deflateSta
  0003c	83 f8 71	 cmp	 eax, 113		; 00000071H
  0003f	74 07		 je	 SHORT $LN4@deflateSta
  00041	3d 9a 02 00 00	 cmp	 eax, 666		; 0000029aH
  00046	75 03		 jne	 SHORT $LN3@deflateSta
$LN4@deflateSta:

; 536  : #ifdef GZIP
; 537  :                                            s->status != GZIP_STATE &&
; 538  : #endif
; 539  :                                            s->status != EXTRA_STATE &&
; 540  :                                            s->status != NAME_STATE &&
; 541  :                                            s->status != COMMENT_STATE &&
; 542  :                                            s->status != HCRC_STATE &&
; 543  :                                            s->status != BUSY_STATE &&
; 544  :                                            s->status != FINISH_STATE))
; 545  :         return 1;
; 546  :     return 0;

  00048	33 c0		 xor	 eax, eax

; 547  : }

  0004a	c3		 ret	 0
$LN3@deflateSta:

; 533  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1

; 547  : }

  00050	c3		 ret	 0
_deflateStateCheck ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateSetDictionary@12
_TEXT	SEGMENT
_avail$1$ = -8						; size = 4
_wrap$1$ = -4						; size = 4
_strm$ = 8						; size = 4
_n$1$ = 12						; size = 4
_dictionary$ = 12					; size = 4
_next$1$ = 16						; size = 4
_dictLength$ = 16					; size = 4
_deflateSetDictionary@12 PROC				; COMDAT

; 551  :                                  uInt  dictLength) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 552  :     deflate_state *s;
; 553  :     uInt str, n;
; 554  :     int wrap;
; 555  :     unsigned avail;
; 556  :     z_const unsigned char *next;
; 557  : 
; 558  :     if (deflateStateCheck(strm) || dictionary == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 08	 sub	 esp, 8
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	e8 00 00 00 00	 call	 _deflateStateCheck
  00010	85 c0		 test	 eax, eax
  00012	0f 85 77 01 00
	00		 jne	 $LN11@deflateSet
  00018	8b 5d 0c	 mov	 ebx, DWORD PTR _dictionary$[ebp]
  0001b	85 db		 test	 ebx, ebx
  0001d	0f 84 6c 01 00
	00		 je	 $LN11@deflateSet

; 560  :     s = strm->state;

  00023	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 561  :     wrap = s->wrap;

  00026	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00029	89 45 fc	 mov	 DWORD PTR _wrap$1$[ebp], eax

; 562  :     if (wrap == 2 || (wrap == 1 && s->status != INIT_STATE) || s->lookahead)

  0002c	83 f8 02	 cmp	 eax, 2
  0002f	0f 84 5a 01 00
	00		 je	 $LN11@deflateSet
  00035	83 f8 01	 cmp	 eax, 1
  00038	75 0a		 jne	 SHORT $LN14@deflateSet
  0003a	83 7e 04 2a	 cmp	 DWORD PTR [esi+4], 42	; 0000002aH
  0003e	0f 85 4b 01 00
	00		 jne	 $LN11@deflateSet
$LN14@deflateSet:
  00044	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00048	0f 85 41 01 00
	00		 jne	 $LN11@deflateSet

; 563  :         return Z_STREAM_ERROR;
; 564  : 
; 565  :     /* when using zlib wrappers, compute Adler-32 for provided dictionary */
; 566  :     if (wrap == 1)

  0004e	57		 push	 edi
  0004f	8b 7d 10	 mov	 edi, DWORD PTR _dictLength$[ebp]
  00052	83 f8 01	 cmp	 eax, 1
  00055	75 13		 jne	 SHORT $LN15@deflateSet

; 567  :         strm->adler = adler32(strm->adler, dictionary, dictLength);

  00057	57		 push	 edi
  00058	53		 push	 ebx
  00059	ff 71 30	 push	 DWORD PTR [ecx+48]
  0005c	e8 00 00 00 00	 call	 _adler32@12
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00064	89 41 30	 mov	 DWORD PTR [ecx+48], eax
  00067	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]
$LN15@deflateSet:

; 568  :     s->wrap = 0;                    /* avoid computing Adler-32 in read_buf */

  0006a	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0

; 569  : 
; 570  :     /* if dictionary would fill window, just replace the history */
; 571  :     if (dictLength >= s->w_size) {

  00071	3b 7e 2c	 cmp	 edi, DWORD PTR [esi+44]
  00074	72 48		 jb	 SHORT $LN16@deflateSet

; 572  :         if (wrap == 0) {            /* already empty otherwise */

  00076	85 c0		 test	 eax, eax
  00078	75 3c		 jne	 SHORT $LN28@deflateSet

; 573  :             CLEAR_HASH(s);

  0007a	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0007d	33 d2		 xor	 edx, edx
  0007f	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  00082	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  00087	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0008a	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00091	50		 push	 eax
  00092	52		 push	 edx
  00093	ff 76 44	 push	 DWORD PTR [esi+68]
  00096	e8 00 00 00 00	 call	 _memset
  0009b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 574  :             s->strstart = 0;

  0009e	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 575  :             s->block_start = 0L;

  000a5	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 576  :             s->insert = 0;

  000ac	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0
$LN28@deflateSet:

; 577  :         }
; 578  :         dictionary += dictLength - s->w_size;  /* use the tail */

  000b6	2b 7e 2c	 sub	 edi, DWORD PTR [esi+44]
  000b9	03 df		 add	 ebx, edi

; 579  :         dictLength = s->w_size;

  000bb	8b 7e 2c	 mov	 edi, DWORD PTR [esi+44]
$LN16@deflateSet:

; 580  :     }
; 581  : 
; 582  :     /* insert dictionary into window and hash */
; 583  :     avail = strm->avail_in;

  000be	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  000c1	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c4	89 4d f8	 mov	 DWORD PTR _avail$1$[ebp], ecx

; 584  :     next = strm->next_in;

  000c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c9	89 4d 10	 mov	 DWORD PTR _next$1$[ebp], ecx

; 585  :     strm->avail_in = dictLength;
; 586  :     strm->next_in = (z_const Bytef *)dictionary;
; 587  :     fill_window(s);

  000cc	8b ce		 mov	 ecx, esi
  000ce	89 78 04	 mov	 DWORD PTR [eax+4], edi
  000d1	89 18		 mov	 DWORD PTR [eax], ebx
  000d3	e8 00 00 00 00	 call	 _fill_window

; 588  :     while (s->lookahead >= MIN_MATCH) {

  000d8	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  000db	83 f9 03	 cmp	 ecx, 3
  000de	72 65		 jb	 SHORT $LN6@deflateSet
$LL5@deflateSet:

; 589  :         str = s->strstart;

  000e0	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]

; 590  :         n = s->lookahead - (MIN_MATCH-1);

  000e3	83 c1 fe	 add	 ecx, -2			; fffffffeH
  000e6	89 4d 0c	 mov	 DWORD PTR _n$1$[ebp], ecx
  000e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL9@deflateSet:

; 591  :         do {
; 592  :             UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]);

  000f0	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  000f3	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]

; 593  : #ifndef FASTEST
; 594  :             s->prev[str & s->w_mask] = s->head[s->ins_h];

  000f6	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  000f9	23 d3		 and	 edx, ebx
  000fb	0f b6 7c 18 02	 movzx	 edi, BYTE PTR [eax+ebx+2]
  00100	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  00103	d3 e0		 shl	 eax, cl
  00105	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00108	33 f8		 xor	 edi, eax
  0010a	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  0010d	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00110	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  00113	66 8b 04 78	 mov	 ax, WORD PTR [eax+edi*2]
  00117	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 595  : #endif
; 596  :             s->head[s->ins_h] = (Pos)str;

  0011b	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0011e	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00121	66 89 1c 48	 mov	 WORD PTR [eax+ecx*2], bx

; 597  :             str++;

  00125	43		 inc	 ebx

; 598  :         } while (--n);

  00126	83 6d 0c 01	 sub	 DWORD PTR _n$1$[ebp], 1
  0012a	75 c4		 jne	 SHORT $LL9@deflateSet

; 599  :         s->strstart = str;
; 600  :         s->lookahead = MIN_MATCH-1;
; 601  :         fill_window(s);

  0012c	8b ce		 mov	 ecx, esi
  0012e	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00131	c7 46 74 02 00
	00 00		 mov	 DWORD PTR [esi+116], 2
  00138	e8 00 00 00 00	 call	 _fill_window
  0013d	8b 4e 74	 mov	 ecx, DWORD PTR [esi+116]
  00140	83 f9 03	 cmp	 ecx, 3
  00143	73 9b		 jae	 SHORT $LL5@deflateSet
$LN6@deflateSet:

; 602  :     }
; 603  :     s->strstart += s->lookahead;

  00145	01 4e 6c	 add	 DWORD PTR [esi+108], ecx
  00148	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]

; 604  :     s->block_start = (long)s->strstart;
; 605  :     s->insert = s->lookahead;

  0014b	89 8e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ecx

; 606  :     s->lookahead = 0;
; 607  :     s->match_length = s->prev_length = MIN_MATCH-1;
; 608  :     s->match_available = 0;
; 609  :     strm->next_in = next;

  00151	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00154	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00157	8b 45 10	 mov	 eax, DWORD PTR _next$1$[ebp]
  0015a	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0
  00161	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00168	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0016f	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00176	89 01		 mov	 DWORD PTR [ecx], eax

; 610  :     strm->avail_in = avail;

  00178	8b 45 f8	 mov	 eax, DWORD PTR _avail$1$[ebp]
  0017b	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 611  :     s->wrap = wrap;

  0017e	8b 45 fc	 mov	 eax, DWORD PTR _wrap$1$[ebp]

; 612  :     return Z_OK;

  00181	5f		 pop	 edi
  00182	89 46 18	 mov	 DWORD PTR [esi+24], eax
  00185	33 c0		 xor	 eax, eax
  00187	5e		 pop	 esi

; 613  : }

  00188	5b		 pop	 ebx
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c2 0c 00	 ret	 12			; 0000000cH
$LN11@deflateSet:
  0018f	5e		 pop	 esi

; 559  :         return Z_STREAM_ERROR;

  00190	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 613  : }

  00195	5b		 pop	 ebx
  00196	8b e5		 mov	 esp, ebp
  00198	5d		 pop	 ebp
  00199	c2 0c 00	 ret	 12			; 0000000cH
_deflateSetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateGetDictionary@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_dictionary$ = 12					; size = 4
_dictLength$ = 16					; size = 4
_deflateGetDictionary@12 PROC				; COMDAT

; 617  :                                  uInt *dictLength) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 618  :     deflate_state *s;
; 619  :     uInt len;
; 620  : 
; 621  :     if (deflateStateCheck(strm))

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateGet

; 622  :         return Z_STREAM_ERROR;

  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 632  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflateGet:

; 623  :     s = strm->state;

  00018	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0001b	56		 push	 esi

; 624  :     len = s->strstart + s->lookahead;

  0001c	8b 4a 74	 mov	 ecx, DWORD PTR [edx+116]
  0001f	03 4a 6c	 add	 ecx, DWORD PTR [edx+108]

; 625  :     if (len > s->w_size)

  00022	8b 72 2c	 mov	 esi, DWORD PTR [edx+44]

; 626  :         len = s->w_size;
; 627  :     if (dictionary != Z_NULL && len)

  00025	3b ce		 cmp	 ecx, esi
  00027	0f 46 f1	 cmovbe	 esi, ecx
  0002a	83 7d 0c 00	 cmp	 DWORD PTR _dictionary$[ebp], 0
  0002e	74 18		 je	 SHORT $LN4@deflateGet
  00030	85 f6		 test	 esi, esi
  00032	74 14		 je	 SHORT $LN4@deflateGet

; 628  :         zmemcpy(dictionary, s->window + s->strstart + s->lookahead - len, len);

  00034	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00037	2b c6		 sub	 eax, esi
  00039	56		 push	 esi
  0003a	03 c1		 add	 eax, ecx
  0003c	50		 push	 eax
  0003d	ff 75 0c	 push	 DWORD PTR _dictionary$[ebp]
  00040	e8 00 00 00 00	 call	 _memcpy
  00045	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@deflateGet:

; 629  :     if (dictLength != Z_NULL)

  00048	8b 45 10	 mov	 eax, DWORD PTR _dictLength$[ebp]
  0004b	85 c0		 test	 eax, eax
  0004d	74 02		 je	 SHORT $LN5@deflateGet

; 630  :         *dictLength = len;

  0004f	89 30		 mov	 DWORD PTR [eax], esi
$LN5@deflateGet:

; 631  :     return Z_OK;

  00051	33 c0		 xor	 eax, eax
  00053	5e		 pop	 esi

; 632  : }

  00054	5d		 pop	 ebp
  00055	c2 0c 00	 ret	 12			; 0000000cH
_deflateGetDictionary@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateResetKeep@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateResetKeep@4 PROC				; COMDAT

; 635  : int ZEXPORT deflateResetKeep(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	57		 push	 edi

; 636  :     deflate_state *s;
; 637  : 
; 638  :     if (deflateStateCheck(strm)) {

  00004	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00007	8b cf		 mov	 ecx, edi
  00009	e8 00 00 00 00	 call	 _deflateStateCheck
  0000e	85 c0		 test	 eax, eax
  00010	74 0a		 je	 SHORT $LN2@deflateRes

; 639  :         return Z_STREAM_ERROR;

  00012	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00017	5f		 pop	 edi

; 668  : }

  00018	5d		 pop	 ebp
  00019	c2 04 00	 ret	 4
$LN2@deflateRes:
  0001c	56		 push	 esi

; 640  :     }
; 641  : 
; 642  :     strm->total_in = strm->total_out = 0;
; 643  :     strm->msg = Z_NULL; /* use zfree if we ever allocate msg dynamically */
; 644  :     strm->data_type = Z_UNKNOWN;
; 645  : 
; 646  :     s = (deflate_state *)strm->state;

  0001d	8b 77 1c	 mov	 esi, DWORD PTR [edi+28]
  00020	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  00027	c7 47 08 00 00
	00 00		 mov	 DWORD PTR [edi+8], 0
  0002e	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  00035	c7 47 2c 02 00
	00 00		 mov	 DWORD PTR [edi+44], 2

; 647  :     s->pending = 0;
; 648  :     s->pending_out = s->pending_buf;
; 649  : 
; 650  :     if (s->wrap < 0) {

  0003c	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  0003f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00042	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00049	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0004c	85 c9		 test	 ecx, ecx
  0004e	79 05		 jns	 SHORT $LN3@deflateRes

; 651  :         s->wrap = -s->wrap; /* was made negative by deflate(..., Z_FINISH); */

  00050	f7 d9		 neg	 ecx
  00052	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
$LN3@deflateRes:

; 652  :     }
; 653  :     s->status =

  00055	83 f9 02	 cmp	 ecx, 2
  00058	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH

; 654  : #ifdef GZIP
; 655  :         s->wrap == 2 ? GZIP_STATE :
; 656  : #endif
; 657  :         INIT_STATE;
; 658  :     strm->adler =

  0005d	6a 00		 push	 0
  0005f	ba 39 00 00 00	 mov	 edx, 57			; 00000039H
  00064	0f 44 c2	 cmove	 eax, edx
  00067	6a 00		 push	 0
  00069	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0006c	6a 00		 push	 0
  0006e	75 07		 jne	 SHORT $LN5@deflateRes
  00070	e8 00 00 00 00	 call	 _crc32@12
  00075	eb 05		 jmp	 SHORT $LN6@deflateRes
$LN5@deflateRes:
  00077	e8 00 00 00 00	 call	 _adler32@12
$LN6@deflateRes:
  0007c	89 47 30	 mov	 DWORD PTR [edi+48], eax

; 659  : #ifdef GZIP
; 660  :         s->wrap == 2 ? crc32(0L, Z_NULL, 0) :
; 661  : #endif
; 662  :         adler32(0L, Z_NULL, 0);
; 663  :     s->last_flush = -2;
; 664  : 
; 665  :     _tr_init(s);

  0007f	8b ce		 mov	 ecx, esi
  00081	c7 46 28 fe ff
	ff ff		 mov	 DWORD PTR [esi+40], -2	; fffffffeH
  00088	e8 00 00 00 00	 call	 __tr_init

; 666  : 
; 667  :     return Z_OK;

  0008d	5e		 pop	 esi
  0008e	33 c0		 xor	 eax, eax
  00090	5f		 pop	 edi

; 668  : }

  00091	5d		 pop	 ebp
  00092	c2 04 00	 ret	 4
_deflateResetKeep@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _lm_init
_TEXT	SEGMENT
_lm_init PROC						; COMDAT
; _s$ = ecx

; 673  : local void lm_init(deflate_state *s) {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 674  :     s->window_size = (ulg)2L*s->w_size;
; 675  : 
; 676  :     CLEAR_HASH(s);

  00003	33 c9		 xor	 ecx, ecx
  00005	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00008	8b 56 4c	 mov	 edx, DWORD PTR [esi+76]
  0000b	03 c0		 add	 eax, eax
  0000d	89 46 3c	 mov	 DWORD PTR [esi+60], eax
  00010	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00013	66 89 4c 50 fe	 mov	 WORD PTR [eax+edx*2-2], cx
  00018	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  0001b	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  00022	50		 push	 eax
  00023	51		 push	 ecx
  00024	ff 76 44	 push	 DWORD PTR [esi+68]
  00027	e8 00 00 00 00	 call	 _memset

; 677  : 
; 678  :     /* Set the default configuration parameters:
; 679  :      */
; 680  :     s->max_lazy_match   = configuration_table[s->level].max_lazy;

  0002c	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  00032	83 c4 0c	 add	 esp, 12			; 0000000cH
  00035	8d 0c 40	 lea	 ecx, DWORD PTR [eax+eax*2]
  00038	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  00040	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 681  :     s->good_match       = configuration_table[s->level].good_length;

  00046	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0004e	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 682  :     s->nice_match       = configuration_table[s->level].nice_length;

  00054	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0005c	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 683  :     s->max_chain_length = configuration_table[s->level].max_chain;

  00062	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  0006a	89 46 7c	 mov	 DWORD PTR [esi+124], eax

; 684  : 
; 685  :     s->strstart = 0;

  0006d	c7 46 6c 00 00
	00 00		 mov	 DWORD PTR [esi+108], 0

; 686  :     s->block_start = 0L;

  00074	c7 46 5c 00 00
	00 00		 mov	 DWORD PTR [esi+92], 0

; 687  :     s->lookahead = 0;

  0007b	c7 46 74 00 00
	00 00		 mov	 DWORD PTR [esi+116], 0

; 688  :     s->insert = 0;

  00082	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 689  :     s->match_length = s->prev_length = MIN_MATCH-1;

  0008c	c7 46 78 02 00
	00 00		 mov	 DWORD PTR [esi+120], 2
  00093	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 690  :     s->match_available = 0;

  0009a	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0

; 691  :     s->ins_h = 0;

  000a1	c7 46 48 00 00
	00 00		 mov	 DWORD PTR [esi+72], 0
  000a8	5e		 pop	 esi

; 692  : }

  000a9	c3		 ret	 0
_lm_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateReset@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_deflateReset@4 PROC					; COMDAT

; 695  : int ZEXPORT deflateReset(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 696  :     int ret;
; 697  : 
; 698  :     ret = deflateResetKeep(strm);

  00005	8b 7d 08	 mov	 edi, DWORD PTR _strm$[ebp]
  00008	57		 push	 edi
  00009	e8 00 00 00 00	 call	 _deflateResetKeep@4
  0000e	8b f0		 mov	 esi, eax

; 699  :     if (ret == Z_OK)

  00010	85 f6		 test	 esi, esi
  00012	75 0a		 jne	 SHORT $LN2@deflateRes

; 700  :         lm_init(strm->state);

  00014	8b 4f 1c	 mov	 ecx, DWORD PTR [edi+28]
  00017	e8 00 00 00 00	 call	 _lm_init

; 701  :     return ret;

  0001c	8b c6		 mov	 eax, esi
$LN2@deflateRes:

; 702  : }

  0001e	5f		 pop	 edi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
_deflateReset@4 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateSetHeader@8
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_head$ = 12						; size = 4
_deflateSetHeader@8 PROC				; COMDAT

; 705  : int ZEXPORT deflateSetHeader(z_streamp strm, gz_headerp head) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 706  :     if (deflateStateCheck(strm) || strm->state->wrap != 2)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	75 15		 jne	 SHORT $LN3@deflateSet
  0000f	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]
  00012	83 79 18 02	 cmp	 DWORD PTR [ecx+24], 2
  00016	75 0c		 jne	 SHORT $LN3@deflateSet

; 708  :     strm->state->gzhead = head;

  00018	8b 45 0c	 mov	 eax, DWORD PTR _head$[ebp]
  0001b	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 709  :     return Z_OK;

  0001e	33 c0		 xor	 eax, eax

; 710  : }

  00020	5d		 pop	 ebp
  00021	c2 08 00	 ret	 8
$LN3@deflateSet:

; 707  :         return Z_STREAM_ERROR;

  00024	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 710  : }

  00029	5d		 pop	 ebp
  0002a	c2 08 00	 ret	 8
_deflateSetHeader@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflatePending@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_pending$ = 12						; size = 4
_bits$ = 16						; size = 4
_deflatePending@12 PROC					; COMDAT

; 713  : int ZEXPORT deflatePending(z_streamp strm, unsigned *pending, int *bits) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]

; 714  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflatePen
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 720  : }

  00014	5d		 pop	 ebp
  00015	c2 0c 00	 ret	 12			; 0000000cH
$LN2@deflatePen:

; 715  :     if (pending != Z_NULL)

  00018	8b 55 0c	 mov	 edx, DWORD PTR _pending$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	74 08		 je	 SHORT $LN6@deflatePen

; 716  :         *pending = strm->state->pending;

  0001f	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00022	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00025	89 02		 mov	 DWORD PTR [edx], eax
$LN6@deflatePen:

; 717  :     if (bits != Z_NULL)

  00027	8b 55 10	 mov	 edx, DWORD PTR _bits$[ebp]
  0002a	85 d2		 test	 edx, edx
  0002c	74 0b		 je	 SHORT $LN4@deflatePen

; 718  :         *bits = strm->state->bi_valid;

  0002e	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  00031	8b 80 bc 16 00
	00		 mov	 eax, DWORD PTR [eax+5820]
  00037	89 02		 mov	 DWORD PTR [edx], eax
$LN4@deflatePen:

; 719  :     return Z_OK;

  00039	33 c0		 xor	 eax, eax

; 720  : }

  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
_deflatePending@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflatePrime@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_bits$ = 12						; size = 4
_value$ = 16						; size = 4
_deflatePrime@12 PROC					; COMDAT

; 723  : int ZEXPORT deflatePrime(z_streamp strm, int bits, int value) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 724  :     deflate_state *s;
; 725  :     int put;
; 726  : 
; 727  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	53		 push	 ebx
  00007	8b 5d 0c	 mov	 ebx, DWORD PTR _bits$[ebp]
  0000a	e8 00 00 00 00	 call	 _deflateStateCheck
  0000f	85 c0		 test	 eax, eax
  00011	74 0a		 je	 SHORT $LN5@deflatePri
  00013	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00018	5b		 pop	 ebx

; 749  : }

  00019	5d		 pop	 ebp
  0001a	c2 0c 00	 ret	 12			; 0000000cH
$LN5@deflatePri:
  0001d	57		 push	 edi

; 728  :     s = strm->state;
; 729  : #ifdef LIT_MEM
; 730  :     if (bits < 0 || bits > 16 ||
; 731  :         (uchf *)s->d_buf < s->pending_out + ((Buf_size + 7) >> 3))
; 732  :         return Z_BUF_ERROR;
; 733  : #else
; 734  :     if (bits < 0 || bits > 16 ||

  0001e	83 fb 10	 cmp	 ebx, 16			; 00000010H
  00021	77 6f		 ja	 SHORT $LN7@deflatePri
  00023	8b 79 1c	 mov	 edi, DWORD PTR [ecx+28]
  00026	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00029	83 c0 02	 add	 eax, 2
  0002c	39 87 98 16 00
	00		 cmp	 DWORD PTR [edi+5784], eax
  00032	72 5e		 jb	 SHORT $LN7@deflatePri
  00034	56		 push	 esi
  00035	66 66 66 0f 1f
	84 00 00 00 00
	00		 npad	 11
$LL4@deflatePri:

; 737  : #endif
; 738  :     do {
; 739  :         put = Buf_size - s->bi_valid;

  00040	8b 97 bc 16 00
	00		 mov	 edx, DWORD PTR [edi+5820]
  00046	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  0004b	2b c2		 sub	 eax, edx

; 740  :         if (put > bits)
; 741  :             put = bits;
; 742  :         s->bi_buf |= (ush)((value & ((1 << put) - 1)) << s->bi_valid);

  0004d	8b f3		 mov	 esi, ebx
  0004f	3b c3		 cmp	 eax, ebx
  00051	0f 4e f0	 cmovle	 esi, eax
  00054	b8 01 00 00 00	 mov	 eax, 1
  00059	8b ce		 mov	 ecx, esi
  0005b	66 d3 e0	 shl	 ax, cl
  0005e	8b ca		 mov	 ecx, edx
  00060	66 48		 dec	 ax
  00062	66 23 45 10	 and	 ax, WORD PTR _value$[ebp]
  00066	66 d3 e0	 shl	 ax, cl

; 743  :         s->bi_valid += put;
; 744  :         _tr_flush_bits(s);

  00069	8b cf		 mov	 ecx, edi
  0006b	66 09 87 b8 16
	00 00		 or	 WORD PTR [edi+5816], ax
  00072	8d 04 16	 lea	 eax, DWORD PTR [esi+edx]
  00075	89 87 bc 16 00
	00		 mov	 DWORD PTR [edi+5820], eax
  0007b	e8 00 00 00 00	 call	 __tr_flush_bits

; 745  :         value >>= put;

  00080	8b ce		 mov	 ecx, esi
  00082	d3 7d 10	 sar	 DWORD PTR _value$[ebp], cl

; 746  :         bits -= put;

  00085	2b de		 sub	 ebx, esi

; 747  :     } while (bits);

  00087	75 b7		 jne	 SHORT $LL4@deflatePri
  00089	5e		 pop	 esi
  0008a	5f		 pop	 edi

; 748  :     return Z_OK;

  0008b	33 c0		 xor	 eax, eax
  0008d	5b		 pop	 ebx

; 749  : }

  0008e	5d		 pop	 ebp
  0008f	c2 0c 00	 ret	 12			; 0000000cH
$LN7@deflatePri:
  00092	5f		 pop	 edi

; 735  :         s->sym_buf < s->pending_out + ((Buf_size + 7) >> 3))
; 736  :         return Z_BUF_ERROR;

  00093	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00098	5b		 pop	 ebx

; 749  : }

  00099	5d		 pop	 ebp
  0009a	c2 0c 00	 ret	 12			; 0000000cH
_deflatePrime@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateParams@12
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_level$ = 12						; size = 4
_strategy$ = 16						; size = 4
_deflateParams@12 PROC					; COMDAT

; 752  : int ZEXPORT deflateParams(z_streamp strm, int level, int strategy) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 55 0c	 mov	 edx, DWORD PTR _level$[ebp]
  00006	53		 push	 ebx

; 753  :     deflate_state *s;
; 754  :     compress_func func;
; 755  : 
; 756  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR _strm$[ebp]
  0000a	8b cb		 mov	 ecx, ebx
  0000c	56		 push	 esi
  0000d	57		 push	 edi
  0000e	e8 00 00 00 00	 call	 _deflateStateCheck
  00013	85 c0		 test	 eax, eax
  00015	0f 85 23 01 00
	00		 jne	 $LN8@deflatePar

; 757  :     s = strm->state;

  0001b	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 758  : 
; 759  : #ifdef FASTEST
; 760  :     if (level != 0) level = 1;
; 761  : #else
; 762  :     if (level == Z_DEFAULT_COMPRESSION) level = 6;
; 763  : #endif
; 764  :     if (level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED) {

  0001e	83 fa ff	 cmp	 edx, -1
  00021	bf 06 00 00 00	 mov	 edi, 6
  00026	0f 45 fa	 cmovne	 edi, edx
  00029	83 ff 09	 cmp	 edi, 9
  0002c	0f 87 0c 01 00
	00		 ja	 $LN8@deflatePar
  00032	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  00035	83 f8 04	 cmp	 eax, 4
  00038	0f 87 00 01 00
	00		 ja	 $LN8@deflatePar

; 765  :         return Z_STREAM_ERROR;
; 766  :     }
; 767  :     func = configuration_table[s->level].func;
; 768  : 
; 769  :     if ((strategy != s->strategy || func != configuration_table[level].func) &&

  0003e	3b 86 88 00 00
	00		 cmp	 eax, DWORD PTR [esi+136]
  00044	75 1c		 jne	 SHORT $LN20@deflatePar
  00046	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0004c	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  0004f	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00052	8b 04 85 08 00
	00 00		 mov	 eax, DWORD PTR _configuration_table[eax*4+8]
  00059	3b 04 8d 08 00
	00 00		 cmp	 eax, DWORD PTR _configuration_table[ecx*4+8]
  00060	74 34		 je	 SHORT $LN12@deflatePar
$LN20@deflatePar:
  00062	83 7e 28 fe	 cmp	 DWORD PTR [esi+40], -2	; fffffffeH
  00066	74 2e		 je	 SHORT $LN12@deflatePar

; 770  :         s->last_flush != -2) {
; 771  :         /* Flush the last buffer: */
; 772  :         int err = deflate(strm, Z_BLOCK);

  00068	6a 05		 push	 5
  0006a	53		 push	 ebx
  0006b	e8 00 00 00 00	 call	 _deflate@8

; 773  :         if (err == Z_STREAM_ERROR)

  00070	83 f8 fe	 cmp	 eax, -2			; fffffffeH
  00073	0f 84 c5 00 00
	00		 je	 $LN8@deflatePar

; 774  :             return err;
; 775  :         if (strm->avail_in || (s->strstart - s->block_start) + s->lookahead)

  00079	83 7b 04 00	 cmp	 DWORD PTR [ebx+4], 0
  0007d	75 0b		 jne	 SHORT $LN13@deflatePar
  0007f	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00082	2b 46 5c	 sub	 eax, DWORD PTR [esi+92]
  00085	03 46 6c	 add	 eax, DWORD PTR [esi+108]
  00088	74 0c		 je	 SHORT $LN12@deflatePar
$LN13@deflatePar:
  0008a	5f		 pop	 edi

; 794  : }

  0008b	5e		 pop	 esi
  0008c	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00091	5b		 pop	 ebx
  00092	5d		 pop	 ebp
  00093	c2 0c 00	 ret	 12			; 0000000cH
$LN12@deflatePar:

; 776  :             return Z_BUF_ERROR;
; 777  :     }
; 778  :     if (s->level != level) {

  00096	8b 86 84 00 00
	00		 mov	 eax, DWORD PTR [esi+132]
  0009c	3b c7		 cmp	 eax, edi
  0009e	0f 84 88 00 00
	00		 je	 $LN14@deflatePar

; 779  :         if (s->level == 0 && s->matches != 0) {

  000a4	85 c0		 test	 eax, eax
  000a6	75 46		 jne	 SHORT $LN15@deflatePar
  000a8	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  000ae	85 c0		 test	 eax, eax
  000b0	74 3c		 je	 SHORT $LN15@deflatePar

; 780  :             if (s->matches == 1)

  000b2	83 f8 01	 cmp	 eax, 1
  000b5	75 09		 jne	 SHORT $LN4@deflatePar

; 781  :                 slide_hash(s);

  000b7	8b ce		 mov	 ecx, esi
  000b9	e8 00 00 00 00	 call	 _slide_hash
  000be	eb 24		 jmp	 SHORT $LN3@deflatePar
$LN4@deflatePar:

; 782  :             else
; 783  :                 CLEAR_HASH(s);

  000c0	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  000c3	33 d2		 xor	 edx, edx
  000c5	8b 4e 4c	 mov	 ecx, DWORD PTR [esi+76]
  000c8	66 89 54 48 fe	 mov	 WORD PTR [eax+ecx*2-2], dx
  000cd	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  000d0	8d 04 45 fe ff
	ff ff		 lea	 eax, DWORD PTR [eax*2-2]
  000d7	50		 push	 eax
  000d8	52		 push	 edx
  000d9	ff 76 44	 push	 DWORD PTR [esi+68]
  000dc	e8 00 00 00 00	 call	 _memset
  000e1	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN3@deflatePar:

; 784  :             s->matches = 0;

  000e4	c7 86 b0 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5808], 0
$LN15@deflatePar:

; 785  :         }
; 786  :         s->level = level;
; 787  :         s->max_lazy_match   = configuration_table[level].max_lazy;

  000ee	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  000f1	89 be 84 00 00
	00		 mov	 DWORD PTR [esi+132], edi
  000f7	0f b7 04 8d 02
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+2]
  000ff	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax

; 788  :         s->good_match       = configuration_table[level].good_length;

  00105	0f b7 04 8d 00
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4]
  0010d	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax

; 789  :         s->nice_match       = configuration_table[level].nice_length;

  00113	0f b7 04 8d 04
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+4]
  0011b	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax

; 790  :         s->max_chain_length = configuration_table[level].max_chain;

  00121	0f b7 04 8d 06
	00 00 00	 movzx	 eax, WORD PTR _configuration_table[ecx*4+6]
  00129	89 46 7c	 mov	 DWORD PTR [esi+124], eax
$LN14@deflatePar:

; 791  :     }
; 792  :     s->strategy = strategy;

  0012c	8b 45 10	 mov	 eax, DWORD PTR _strategy$[ebp]
  0012f	5f		 pop	 edi
  00130	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax

; 793  :     return Z_OK;

  00136	33 c0		 xor	 eax, eax

; 794  : }

  00138	5e		 pop	 esi
  00139	5b		 pop	 ebx
  0013a	5d		 pop	 ebp
  0013b	c2 0c 00	 ret	 12			; 0000000cH
$LN8@deflatePar:
  0013e	5f		 pop	 edi
  0013f	5e		 pop	 esi
  00140	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00145	5b		 pop	 ebx
  00146	5d		 pop	 ebp
  00147	c2 0c 00	 ret	 12			; 0000000cH
_deflateParams@12 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateTune@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_good_length$ = 12					; size = 4
_max_lazy$ = 16						; size = 4
_nice_length$ = 20					; size = 4
_max_chain$ = 24					; size = 4
_deflateTune@20 PROC					; COMDAT

; 798  :                         int nice_length, int max_chain) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 799  :     deflate_state *s;
; 800  : 
; 801  :     if (deflateStateCheck(strm)) return Z_STREAM_ERROR;

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	e8 00 00 00 00	 call	 _deflateStateCheck
  0000b	85 c0		 test	 eax, eax
  0000d	74 09		 je	 SHORT $LN2@deflateTun
  0000f	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 808  : }

  00014	5d		 pop	 ebp
  00015	c2 14 00	 ret	 20			; 00000014H
$LN2@deflateTun:

; 802  :     s = strm->state;

  00018	8b 49 1c	 mov	 ecx, DWORD PTR [ecx+28]

; 803  :     s->good_match = (uInt)good_length;

  0001b	8b 45 0c	 mov	 eax, DWORD PTR _good_length$[ebp]
  0001e	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax

; 804  :     s->max_lazy_match = (uInt)max_lazy;

  00024	8b 45 10	 mov	 eax, DWORD PTR _max_lazy$[ebp]
  00027	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax

; 805  :     s->nice_match = nice_length;

  0002d	8b 45 14	 mov	 eax, DWORD PTR _nice_length$[ebp]
  00030	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax

; 806  :     s->max_chain_length = (uInt)max_chain;

  00036	8b 45 18	 mov	 eax, DWORD PTR _max_chain$[ebp]
  00039	89 41 7c	 mov	 DWORD PTR [ecx+124], eax

; 807  :     return Z_OK;

  0003c	33 c0		 xor	 eax, eax

; 808  : }

  0003e	5d		 pop	 ebp
  0003f	c2 14 00	 ret	 20			; 00000014H
_deflateTune@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateBound@8
_TEXT	SEGMENT
_fixedlen$1$ = -4					; size = 4
_strm$ = 8						; size = 4
_sourceLen$ = 12					; size = 4
_deflateBound@8 PROC					; COMDAT

; 834  : uLong ZEXPORT deflateBound(z_streamp strm, uLong sourceLen) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 835  :     deflate_state *s;
; 836  :     uLong fixedlen, storelen, wraplen;
; 837  : 
; 838  :     /* upper bound for fixed blocks with 9-bit literals and length 255
; 839  :        (memLevel == 2, which is the lowest that may not use stored blocks) --
; 840  :        ~13% overhead plus a small constant */
; 841  :     fixedlen = sourceLen + (sourceLen >> 3) + (sourceLen >> 8) +
; 842  :                (sourceLen >> 9) + 4;
; 843  : 
; 844  :     /* upper bound for stored blocks with length 127 (memLevel == 1) --
; 845  :        ~4% overhead plus a small constant */
; 846  :     storelen = sourceLen + (sourceLen >> 5) + (sourceLen >> 7) +
; 847  :                (sourceLen >> 11) + 7;
; 848  : 
; 849  :     /* if can't get parameters, return larger bound plus a zlib wrapper */
; 850  :     if (deflateStateCheck(strm))

  00004	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00007	53		 push	 ebx
  00008	8b 5d 0c	 mov	 ebx, DWORD PTR _sourceLen$[ebp]
  0000b	8b d3		 mov	 edx, ebx
  0000d	56		 push	 esi
  0000e	8b f3		 mov	 esi, ebx
  00010	c1 ea 09	 shr	 edx, 9
  00013	c1 ee 08	 shr	 esi, 8
  00016	8b c3		 mov	 eax, ebx
  00018	c1 e8 03	 shr	 eax, 3
  0001b	03 f3		 add	 esi, ebx
  0001d	57		 push	 edi
  0001e	83 c0 04	 add	 eax, 4
  00021	03 f2		 add	 esi, edx
  00023	03 f0		 add	 esi, eax
  00025	8b fb		 mov	 edi, ebx
  00027	c1 ef 07	 shr	 edi, 7
  0002a	8b d3		 mov	 edx, ebx
  0002c	8b c3		 mov	 eax, ebx
  0002e	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00031	03 fb		 add	 edi, ebx
  00033	c1 e8 05	 shr	 eax, 5
  00036	83 c0 07	 add	 eax, 7
  00039	89 75 fc	 mov	 DWORD PTR _fixedlen$1$[ebp], esi
  0003c	03 fa		 add	 edi, edx
  0003e	03 f8		 add	 edi, eax
  00040	e8 00 00 00 00	 call	 _deflateStateCheck
  00045	85 c0		 test	 eax, eax
  00047	74 11		 je	 SHORT $LN10@deflateBou

; 851  :         return (fixedlen > storelen ? fixedlen : storelen) + 6;

  00049	3b f7		 cmp	 esi, edi
  0004b	0f 47 fe	 cmova	 edi, esi
  0004e	8d 47 06	 lea	 eax, DWORD PTR [edi+6]
  00051	5f		 pop	 edi

; 896  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 897  : }

  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c2 08 00	 ret	 8
$LN10@deflateBou:

; 852  : 
; 853  :     /* compute wrapper length */
; 854  :     s = strm->state;

  0005a	8b 71 1c	 mov	 esi, DWORD PTR [ecx+28]

; 855  :     switch (s->wrap) {

  0005d	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00060	83 e8 00	 sub	 eax, 0
  00063	74 6a		 je	 SHORT $LN11@deflateBou
  00065	83 e8 01	 sub	 eax, 1
  00068	74 54		 je	 SHORT $LN12@deflateBou
  0006a	83 e8 01	 sub	 eax, 1
  0006d	74 07		 je	 SHORT $LN13@deflateBou

; 883  : #endif
; 884  :     default:                                /* for compiler happiness */
; 885  :         wraplen = 6;

  0006f	b8 06 00 00 00	 mov	 eax, 6
  00074	eb 60		 jmp	 SHORT $LN2@deflateBou
$LN13@deflateBou:

; 862  : #ifdef GZIP
; 863  :     case 2:                                 /* gzip wrapper */
; 864  :         wraplen = 18;
; 865  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  00076	8b 5e 1c	 mov	 ebx, DWORD PTR [esi+28]
  00079	b8 12 00 00 00	 mov	 eax, 18			; 00000012H
  0007e	85 db		 test	 ebx, ebx
  00080	74 51		 je	 SHORT $LN33@deflateBou

; 866  :             Bytef *str;
; 867  :             if (s->gzhead->extra != Z_NULL)

  00082	83 7b 10 00	 cmp	 DWORD PTR [ebx+16], 0
  00086	74 06		 je	 SHORT $LN15@deflateBou

; 868  :                 wraplen += 2 + s->gzhead->extra_len;

  00088	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  0008b	83 c0 14	 add	 eax, 20			; 00000014H
$LN15@deflateBou:

; 869  :             str = s->gzhead->name;

  0008e	8b 53 1c	 mov	 edx, DWORD PTR [ebx+28]

; 870  :             if (str != Z_NULL)

  00091	85 d2		 test	 edx, edx
  00093	74 0a		 je	 SHORT $LN5@deflateBou
$LL6@deflateBou:

; 871  :                 do {
; 872  :                     wraplen++;
; 873  :                 } while (*str++);

  00095	8a 0a		 mov	 cl, BYTE PTR [edx]
  00097	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  0009a	40		 inc	 eax
  0009b	84 c9		 test	 cl, cl
  0009d	75 f6		 jne	 SHORT $LL6@deflateBou
$LN5@deflateBou:

; 874  :             str = s->gzhead->comment;

  0009f	8b 53 24	 mov	 edx, DWORD PTR [ebx+36]

; 875  :             if (str != Z_NULL)

  000a2	85 d2		 test	 edx, edx
  000a4	74 0a		 je	 SHORT $LN8@deflateBou
$LL9@deflateBou:

; 876  :                 do {
; 877  :                     wraplen++;
; 878  :                 } while (*str++);

  000a6	8a 0a		 mov	 cl, BYTE PTR [edx]
  000a8	8d 52 01	 lea	 edx, DWORD PTR [edx+1]
  000ab	40		 inc	 eax
  000ac	84 c9		 test	 cl, cl
  000ae	75 f6		 jne	 SHORT $LL9@deflateBou
$LN8@deflateBou:

; 879  :             if (s->gzhead->hcrc)

  000b0	83 7b 2c 00	 cmp	 DWORD PTR [ebx+44], 0
  000b4	8b 5d 0c	 mov	 ebx, DWORD PTR _sourceLen$[ebp]
  000b7	74 1d		 je	 SHORT $LN2@deflateBou

; 880  :                 wraplen += 2;

  000b9	83 c0 02	 add	 eax, 2

; 881  :         }
; 882  :         break;

  000bc	eb 18		 jmp	 SHORT $LN2@deflateBou
$LN12@deflateBou:

; 858  :         break;
; 859  :     case 1:                                 /* zlib wrapper */
; 860  :         wraplen = 6 + (s->strstart ? 4 : 0);

  000be	33 c0		 xor	 eax, eax
  000c0	39 46 6c	 cmp	 DWORD PTR [esi+108], eax
  000c3	0f 95 c0	 setne	 al
  000c6	8d 04 85 06 00
	00 00		 lea	 eax, DWORD PTR [eax*4+6]

; 861  :         break;

  000cd	eb 07		 jmp	 SHORT $LN2@deflateBou
$LN11@deflateBou:

; 856  :     case 0:                                 /* raw deflate */
; 857  :         wraplen = 0;

  000cf	33 c0		 xor	 eax, eax

; 862  : #ifdef GZIP
; 863  :     case 2:                                 /* gzip wrapper */
; 864  :         wraplen = 18;
; 865  :         if (s->gzhead != Z_NULL) {          /* user-supplied gzip header */

  000d1	eb 03		 jmp	 SHORT $LN2@deflateBou
$LN33@deflateBou:
  000d3	8b 5d 0c	 mov	 ebx, DWORD PTR _sourceLen$[ebp]
$LN2@deflateBou:

; 886  :     }
; 887  : 
; 888  :     /* if not default parameters, return one of the conservative bounds */
; 889  :     if (s->w_bits != 15 || s->hash_bits != 8 + 7)

  000d6	8b 4e 30	 mov	 ecx, DWORD PTR [esi+48]
  000d9	83 f9 0f	 cmp	 ecx, 15			; 0000000fH
  000dc	75 28		 jne	 SHORT $LN32@deflateBou
  000de	39 4e 50	 cmp	 DWORD PTR [esi+80], ecx
  000e1	75 23		 jne	 SHORT $LN32@deflateBou

; 891  :                wraplen;
; 892  : 
; 893  :     /* default settings: return tight bound for that case -- ~0.03% overhead
; 894  :        plus a small constant */
; 895  :     return sourceLen + (sourceLen >> 12) + (sourceLen >> 14) +

  000e3	8b cb		 mov	 ecx, ebx
  000e5	8b d3		 mov	 edx, ebx
  000e7	c1 e9 0e	 shr	 ecx, 14			; 0000000eH
  000ea	03 c8		 add	 ecx, eax
  000ec	c1 ea 19	 shr	 edx, 25			; 00000019H
  000ef	8b c3		 mov	 eax, ebx
  000f1	03 ca		 add	 ecx, edx
  000f3	c1 e8 0c	 shr	 eax, 12			; 0000000cH
  000f6	83 c0 07	 add	 eax, 7
  000f9	5f		 pop	 edi
  000fa	03 c1		 add	 eax, ecx

; 896  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 897  : }

  000fc	5e		 pop	 esi
  000fd	03 c3		 add	 eax, ebx
  000ff	5b		 pop	 ebx
  00100	8b e5		 mov	 esp, ebp
  00102	5d		 pop	 ebp
  00103	c2 08 00	 ret	 8
$LN32@deflateBou:

; 890  :         return (s->w_bits <= s->hash_bits && s->level ? fixedlen : storelen) +

  00106	3b 4e 50	 cmp	 ecx, DWORD PTR [esi+80]
  00109	77 0c		 ja	 SHORT $LN23@deflateBou
  0010b	83 be 84 00 00
	00 00		 cmp	 DWORD PTR [esi+132], 0
  00112	74 03		 je	 SHORT $LN23@deflateBou
  00114	8b 7d fc	 mov	 edi, DWORD PTR _fixedlen$1$[ebp]
$LN23@deflateBou:
  00117	03 c7		 add	 eax, edi
  00119	5f		 pop	 edi

; 896  :            (sourceLen >> 25) + 13 - 6 + wraplen;
; 897  : }

  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
_deflateBound@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _putShortMSB
_TEXT	SEGMENT
_putShortMSB PROC					; COMDAT
; _s$ = ecx
; _b$ = edx

; 904  : local void putShortMSB(deflate_state *s, uInt b) {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 905  :     put_byte(s, (Byte)(b >> 8));

  00004	8b ca		 mov	 ecx, edx
  00006	c1 e9 08	 shr	 ecx, 8
  00009	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0000c	8b 77 08	 mov	 esi, DWORD PTR [edi+8]
  0000f	88 0c 06	 mov	 BYTE PTR [esi+eax], cl
  00012	ff 47 14	 inc	 DWORD PTR [edi+20]
  00015	8b 4f 14	 mov	 ecx, DWORD PTR [edi+20]

; 906  :     put_byte(s, (Byte)(b & 0xff));

  00018	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0001b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0001e	ff 47 14	 inc	 DWORD PTR [edi+20]
  00021	5f		 pop	 edi
  00022	5e		 pop	 esi

; 907  : }

  00023	c3		 ret	 0
_putShortMSB ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _flush_pending
_TEXT	SEGMENT
_flush_pending PROC					; COMDAT
; _strm$ = ecx

; 915  : local void flush_pending(z_streamp strm) {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx
  00003	56		 push	 esi
  00004	57		 push	 edi

; 916  :     unsigned len;
; 917  :     deflate_state *s = strm->state;

  00005	8b 73 1c	 mov	 esi, DWORD PTR [ebx+28]

; 918  : 
; 919  :     _tr_flush_bits(s);

  00008	8b ce		 mov	 ecx, esi
  0000a	e8 00 00 00 00	 call	 __tr_flush_bits

; 920  :     len = s->pending;
; 921  :     if (len > strm->avail_out) len = strm->avail_out;

  0000f	8b 7b 10	 mov	 edi, DWORD PTR [ebx+16]

; 922  :     if (len == 0) return;

  00012	39 7e 14	 cmp	 DWORD PTR [esi+20], edi
  00015	0f 46 7e 14	 cmovbe	 edi, DWORD PTR [esi+20]
  00019	85 ff		 test	 edi, edi
  0001b	74 26		 je	 SHORT $LN4@flush_pend

; 923  : 
; 924  :     zmemcpy(strm->next_out, s->pending_out, len);

  0001d	57		 push	 edi
  0001e	ff 76 10	 push	 DWORD PTR [esi+16]
  00021	ff 73 0c	 push	 DWORD PTR [ebx+12]
  00024	e8 00 00 00 00	 call	 _memcpy

; 925  :     strm->next_out  += len;

  00029	01 7b 0c	 add	 DWORD PTR [ebx+12], edi
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 926  :     s->pending_out  += len;

  0002f	01 7e 10	 add	 DWORD PTR [esi+16], edi

; 927  :     strm->total_out += len;

  00032	01 7b 14	 add	 DWORD PTR [ebx+20], edi

; 928  :     strm->avail_out -= len;

  00035	29 7b 10	 sub	 DWORD PTR [ebx+16], edi

; 929  :     s->pending      -= len;

  00038	29 7e 14	 sub	 DWORD PTR [esi+20], edi

; 930  :     if (s->pending == 0) {

  0003b	75 06		 jne	 SHORT $LN4@flush_pend

; 931  :         s->pending_out = s->pending_buf;

  0003d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00040	89 46 10	 mov	 DWORD PTR [esi+16], eax
$LN4@flush_pend:

; 932  :     }
; 933  : }

  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	c3		 ret	 0
_flush_pending ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflateCopy@8
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_source$ = 12						; size = 4
_deflateCopy@8 PROC					; COMDAT

; 1282 : int ZEXPORT deflateCopy(z_streamp dest, z_streamp source) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1283 : #ifdef MAXSEG_64K
; 1284 :     (void)dest;
; 1285 :     (void)source;
; 1286 :     return Z_STREAM_ERROR;
; 1287 : #else
; 1288 :     deflate_state *ds;
; 1289 :     deflate_state *ss;
; 1290 : 
; 1291 : 
; 1292 :     if (deflateStateCheck(source) || dest == Z_NULL) {

  00003	8b 4d 0c	 mov	 ecx, DWORD PTR _source$[ebp]
  00006	57		 push	 edi
  00007	e8 00 00 00 00	 call	 _deflateStateCheck
  0000c	85 c0		 test	 eax, eax
  0000e	0f 85 6d 01 00
	00		 jne	 $LN3@deflateCop
  00014	8b 7d 08	 mov	 edi, DWORD PTR _dest$[ebp]
  00017	85 ff		 test	 edi, edi
  00019	0f 84 62 01 00
	00		 je	 $LN3@deflateCop

; 1294 :     }
; 1295 : 
; 1296 :     ss = source->state;
; 1297 : 
; 1298 :     zmemcpy((voidpf)dest, (voidpf)source, sizeof(z_stream));

  0001f	0f 10 01	 movups	 xmm0, XMMWORD PTR [ecx]
  00022	53		 push	 ebx
  00023	8b 59 1c	 mov	 ebx, DWORD PTR [ecx+28]
  00026	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0
  00029	56		 push	 esi
  0002a	0f 10 41 10	 movups	 xmm0, XMMWORD PTR [ecx+16]

; 1299 : 
; 1300 :     ds = (deflate_state *) ZALLOC(dest, 1, sizeof(deflate_state));

  0002e	68 c4 16 00 00	 push	 5828			; 000016c4H
  00033	6a 01		 push	 1
  00035	0f 11 47 10	 movups	 XMMWORD PTR [edi+16], xmm0
  00039	0f 10 41 20	 movups	 xmm0, XMMWORD PTR [ecx+32]
  0003d	0f 11 47 20	 movups	 XMMWORD PTR [edi+32], xmm0
  00041	f3 0f 7e 41 30	 movq	 xmm0, QWORD PTR [ecx+48]
  00046	66 0f d6 47 30	 movq	 QWORD PTR [edi+48], xmm0
  0004b	ff 77 28	 push	 DWORD PTR [edi+40]
  0004e	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  00051	ff d0		 call	 eax
  00053	8b f0		 mov	 esi, eax
  00055	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1301 :     if (ds == Z_NULL) return Z_MEM_ERROR;

  00058	85 f6		 test	 esi, esi
  0005a	0f 84 15 01 00
	00		 je	 $LN17@deflateCop

; 1302 :     dest->state = (struct internal_state FAR *) ds;
; 1303 :     zmemcpy((voidpf)ds, (voidpf)ss, sizeof(deflate_state));

  00060	68 c4 16 00 00	 push	 5828			; 000016c4H
  00065	53		 push	 ebx
  00066	56		 push	 esi
  00067	89 77 1c	 mov	 DWORD PTR [edi+28], esi
  0006a	e8 00 00 00 00	 call	 _memcpy

; 1304 :     ds->strm = dest;
; 1305 : 
; 1306 :     ds->window = (Bytef *) ZALLOC(dest, ds->w_size, 2*sizeof(Byte));

  0006f	6a 02		 push	 2
  00071	ff 76 2c	 push	 DWORD PTR [esi+44]
  00074	89 3e		 mov	 DWORD PTR [esi], edi
  00076	ff 77 28	 push	 DWORD PTR [edi+40]
  00079	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0007c	ff d0		 call	 eax

; 1307 :     ds->prev   = (Posf *)  ZALLOC(dest, ds->w_size, sizeof(Pos));

  0007e	6a 02		 push	 2
  00080	ff 76 2c	 push	 DWORD PTR [esi+44]
  00083	89 46 38	 mov	 DWORD PTR [esi+56], eax
  00086	ff 77 28	 push	 DWORD PTR [edi+40]
  00089	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0008c	ff d0		 call	 eax

; 1308 :     ds->head   = (Posf *)  ZALLOC(dest, ds->hash_size, sizeof(Pos));

  0008e	6a 02		 push	 2
  00090	ff 76 4c	 push	 DWORD PTR [esi+76]
  00093	89 46 40	 mov	 DWORD PTR [esi+64], eax
  00096	ff 77 28	 push	 DWORD PTR [edi+40]
  00099	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  0009c	ff d0		 call	 eax

; 1309 :     ds->pending_buf = (uchf *) ZALLOC(dest, ds->lit_bufsize, LIT_BUFS);

  0009e	6a 04		 push	 4
  000a0	ff b6 9c 16 00
	00		 push	 DWORD PTR [esi+5788]
  000a6	89 46 44	 mov	 DWORD PTR [esi+68], eax
  000a9	ff 77 28	 push	 DWORD PTR [edi+40]
  000ac	8b 47 20	 mov	 eax, DWORD PTR [edi+32]
  000af	ff d0		 call	 eax

; 1310 : 
; 1311 :     if (ds->window == Z_NULL || ds->prev == Z_NULL || ds->head == Z_NULL ||

  000b1	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  000b4	83 c4 3c	 add	 esp, 60			; 0000003cH
  000b7	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000ba	85 c9		 test	 ecx, ecx
  000bc	0f 84 ad 00 00
	00		 je	 $LN6@deflateCop
  000c2	83 7e 40 00	 cmp	 DWORD PTR [esi+64], 0
  000c6	0f 84 a3 00 00
	00		 je	 $LN6@deflateCop
  000cc	83 7e 44 00	 cmp	 DWORD PTR [esi+68], 0
  000d0	0f 84 99 00 00
	00		 je	 $LN6@deflateCop
  000d6	85 c0		 test	 eax, eax
  000d8	0f 84 91 00 00
	00		 je	 $LN6@deflateCop

; 1315 :     }
; 1316 :     /* following zmemcpy do not work for 16-bit MSDOS */
; 1317 :     zmemcpy(ds->window, ss->window, ds->w_size * 2 * sizeof(Byte));

  000de	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000e1	03 c0		 add	 eax, eax
  000e3	50		 push	 eax
  000e4	ff 73 38	 push	 DWORD PTR [ebx+56]
  000e7	51		 push	 ecx
  000e8	e8 00 00 00 00	 call	 _memcpy

; 1318 :     zmemcpy((voidpf)ds->prev, (voidpf)ss->prev, ds->w_size * sizeof(Pos));

  000ed	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000f0	03 c0		 add	 eax, eax
  000f2	50		 push	 eax
  000f3	ff 73 40	 push	 DWORD PTR [ebx+64]
  000f6	ff 76 40	 push	 DWORD PTR [esi+64]
  000f9	e8 00 00 00 00	 call	 _memcpy

; 1319 :     zmemcpy((voidpf)ds->head, (voidpf)ss->head, ds->hash_size * sizeof(Pos));

  000fe	8b 46 4c	 mov	 eax, DWORD PTR [esi+76]
  00101	03 c0		 add	 eax, eax
  00103	50		 push	 eax
  00104	ff 73 44	 push	 DWORD PTR [ebx+68]
  00107	ff 76 44	 push	 DWORD PTR [esi+68]
  0010a	e8 00 00 00 00	 call	 _memcpy

; 1320 :     zmemcpy(ds->pending_buf, ss->pending_buf, ds->lit_bufsize * LIT_BUFS);

  0010f	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00115	c1 e0 02	 shl	 eax, 2
  00118	50		 push	 eax
  00119	ff 73 08	 push	 DWORD PTR [ebx+8]
  0011c	ff 76 08	 push	 DWORD PTR [esi+8]
  0011f	e8 00 00 00 00	 call	 _memcpy

; 1321 : 
; 1322 :     ds->pending_out = ds->pending_buf + (ss->pending_out - ss->pending_buf);

  00124	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00127	83 c4 30	 add	 esp, 48			; 00000030H
  0012a	2b 43 08	 sub	 eax, DWORD PTR [ebx+8]
  0012d	03 46 08	 add	 eax, DWORD PTR [esi+8]
  00130	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 1323 : #ifdef LIT_MEM
; 1324 :     ds->d_buf = (ushf *)(ds->pending_buf + (ds->lit_bufsize << 1));
; 1325 :     ds->l_buf = ds->pending_buf + (ds->lit_bufsize << 2);
; 1326 : #else
; 1327 :     ds->sym_buf = ds->pending_buf + ds->lit_bufsize;

  00133	8b 86 9c 16 00
	00		 mov	 eax, DWORD PTR [esi+5788]
  00139	03 46 08	 add	 eax, DWORD PTR [esi+8]
  0013c	89 86 98 16 00
	00		 mov	 DWORD PTR [esi+5784], eax

; 1328 : #endif
; 1329 : 
; 1330 :     ds->l_desc.dyn_tree = ds->dyn_ltree;

  00142	8d 86 94 00 00
	00		 lea	 eax, DWORD PTR [esi+148]
  00148	89 86 18 0b 00
	00		 mov	 DWORD PTR [esi+2840], eax

; 1331 :     ds->d_desc.dyn_tree = ds->dyn_dtree;

  0014e	8d 86 88 09 00
	00		 lea	 eax, DWORD PTR [esi+2440]
  00154	89 86 24 0b 00
	00		 mov	 DWORD PTR [esi+2852], eax

; 1332 :     ds->bl_desc.dyn_tree = ds->bl_tree;

  0015a	8d 86 7c 0a 00
	00		 lea	 eax, DWORD PTR [esi+2684]
  00160	89 86 30 0b 00
	00		 mov	 DWORD PTR [esi+2864], eax

; 1333 : 
; 1334 :     return Z_OK;

  00166	33 c0		 xor	 eax, eax
  00168	5e		 pop	 esi
  00169	5b		 pop	 ebx
  0016a	5f		 pop	 edi

; 1335 : #endif /* MAXSEG_64K */
; 1336 : }

  0016b	5d		 pop	 ebp
  0016c	c2 08 00	 ret	 8
$LN6@deflateCop:

; 1312 :         ds->pending_buf == Z_NULL) {
; 1313 :         deflateEnd (dest);

  0016f	57		 push	 edi
  00170	e8 00 00 00 00	 call	 _deflateEnd@4
$LN17@deflateCop:

; 1314 :         return Z_MEM_ERROR;

  00175	5e		 pop	 esi
  00176	5b		 pop	 ebx
  00177	b8 fc ff ff ff	 mov	 eax, -4			; fffffffcH
  0017c	5f		 pop	 edi

; 1335 : #endif /* MAXSEG_64K */
; 1336 : }

  0017d	5d		 pop	 ebp
  0017e	c2 08 00	 ret	 8
$LN3@deflateCop:

; 1293 :         return Z_STREAM_ERROR;

  00181	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00186	5f		 pop	 edi

; 1335 : #endif /* MAXSEG_64K */
; 1336 : }

  00187	5d		 pop	 ebp
  00188	c2 08 00	 ret	 8
_deflateCopy@8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _longest_match
_TEXT	SEGMENT
tv487 = -44						; size = 4
_prev$1$ = -40						; size = 4
_wmask$1$ = -36						; size = 4
tv496 = -32						; size = 4
_best_len$1$ = -28					; size = 4
_limit$1$ = -24						; size = 4
_s$1$ = -20						; size = 4
_scan$3$ = -16						; size = 4
_nice_match$2$ = -12					; size = 4
_chain_length$1$ = -8					; size = 4
_scan_end$1$ = -2					; size = 1
_scan_end1$1$ = -1					; size = 1
_longest_match PROC					; COMDAT
; _s$ = ecx
; _cur_match$ = edx

; 1348 : local uInt longest_match(deflate_state *s, IPos cur_match) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx
  0000b	8b da		 mov	 ebx, edx
  0000d	89 7d ec	 mov	 DWORD PTR _s$1$[ebp], edi

; 1349 :     unsigned chain_length = s->max_chain_length;/* max hash chain length */
; 1350 :     register Bytef *scan = s->window + s->strstart; /* current string */

  00010	8b 4f 38	 mov	 ecx, DWORD PTR [edi+56]
  00013	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]

; 1351 :     register Bytef *match;                      /* matched string */
; 1352 :     register int len;                           /* length of current match */
; 1353 :     int best_len = (int)s->prev_length;         /* best match length so far */

  00016	8b 57 78	 mov	 edx, DWORD PTR [edi+120]
  00019	03 c1		 add	 eax, ecx
  0001b	8b 77 7c	 mov	 esi, DWORD PTR [edi+124]
  0001e	89 4d e0	 mov	 DWORD PTR tv496[ebp], ecx

; 1354 :     int nice_match = s->nice_match;             /* stop if match long enough */
; 1355 :     IPos limit = s->strstart > (IPos)MAX_DIST(s) ?

  00021	8b 4f 2c	 mov	 ecx, DWORD PTR [edi+44]
  00024	89 45 f0	 mov	 DWORD PTR _scan$3$[ebp], eax
  00027	8b 87 90 00 00
	00		 mov	 eax, DWORD PTR [edi+144]
  0002d	89 45 f4	 mov	 DWORD PTR _nice_match$2$[ebp], eax
  00030	8d 81 fa fe ff
	ff		 lea	 eax, DWORD PTR [ecx-262]
  00036	89 55 e4	 mov	 DWORD PTR _best_len$1$[ebp], edx
  00039	39 47 6c	 cmp	 DWORD PTR [edi+108], eax
  0003c	76 0f		 jbe	 SHORT $LN18@longest_ma
  0003e	8b 47 6c	 mov	 eax, DWORD PTR [edi+108]
  00041	2b c1		 sub	 eax, ecx
  00043	05 06 01 00 00	 add	 eax, 262		; 00000106H
  00048	89 45 e8	 mov	 DWORD PTR _limit$1$[ebp], eax
  0004b	eb 07		 jmp	 SHORT $LN19@longest_ma
$LN18@longest_ma:
  0004d	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _limit$1$[ebp], 0
$LN19@longest_ma:

; 1356 :         s->strstart - (IPos)MAX_DIST(s) : NIL;
; 1357 :     /* Stop when cur_match becomes <= limit. To simplify the code,
; 1358 :      * we prevent matches with the string of window index 0.
; 1359 :      */
; 1360 :     Posf *prev = s->prev;
; 1361 :     uInt wmask = s->w_mask;
; 1362 : 
; 1363 : #ifdef UNALIGNED_OK
; 1364 :     /* Compare two bytes at a time. Note: this is not always beneficial.
; 1365 :      * Try with and without -DUNALIGNED_OK to check.
; 1366 :      */
; 1367 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH - 1;
; 1368 :     register ush scan_start = *(ushf*)scan;
; 1369 :     register ush scan_end   = *(ushf*)(scan + best_len - 1);
; 1370 : #else
; 1371 :     register Bytef *strend = s->window + s->strstart + MAX_MATCH;

  00054	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
  00057	8b 47 40	 mov	 eax, DWORD PTR [edi+64]
  0005a	89 45 d8	 mov	 DWORD PTR _prev$1$[ebp], eax
  0005d	8b 47 34	 mov	 eax, DWORD PTR [edi+52]
  00060	89 45 dc	 mov	 DWORD PTR _wmask$1$[ebp], eax
  00063	8d b9 02 01 00
	00		 lea	 edi, DWORD PTR [ecx+258]

; 1372 :     register Byte scan_end1  = scan[best_len - 1];

  00069	8a 44 0a ff	 mov	 al, BYTE PTR [edx+ecx-1]
  0006d	88 45 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], al

; 1373 :     register Byte scan_end   = scan[best_len];

  00070	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00073	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al

; 1374 : #endif
; 1375 : 
; 1376 :     /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
; 1377 :      * It is easy to get rid of this optimization if necessary.
; 1378 :      */
; 1379 :     Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");
; 1380 : 
; 1381 :     /* Do not waste too much time if we already have a good match: */
; 1382 :     if (s->prev_length >= s->good_match) {
; 1383 :         chain_length >>= 2;
; 1384 :     }
; 1385 :     /* Do not look for matches beyond the end of the input. This is necessary
; 1386 :      * to make deflate deterministic.
; 1387 :      */
; 1388 :     if ((uInt)nice_match > s->lookahead) nice_match = (int)s->lookahead;

  00076	8b c6		 mov	 eax, esi
  00078	c1 e8 02	 shr	 eax, 2
  0007b	89 45 f8	 mov	 DWORD PTR _chain_length$1$[ebp], eax
  0007e	8b 45 ec	 mov	 eax, DWORD PTR _s$1$[ebp]
  00081	3b 90 8c 00 00
	00		 cmp	 edx, DWORD PTR [eax+140]
  00087	8b 55 f8	 mov	 edx, DWORD PTR _chain_length$1$[ebp]
  0008a	8b 40 74	 mov	 eax, DWORD PTR [eax+116]
  0008d	0f 42 d6	 cmovb	 edx, esi
  00090	8b 75 e4	 mov	 esi, DWORD PTR _best_len$1$[ebp]
  00093	89 55 f8	 mov	 DWORD PTR _chain_length$1$[ebp], edx
  00096	8b 55 f4	 mov	 edx, DWORD PTR _nice_match$2$[ebp]
  00099	3b d0		 cmp	 edx, eax
  0009b	89 45 d4	 mov	 DWORD PTR tv487[ebp], eax
  0009e	0f 47 d0	 cmova	 edx, eax
  000a1	89 55 f4	 mov	 DWORD PTR _nice_match$2$[ebp], edx
$LL4@longest_ma:

; 1389 : 
; 1390 :     Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
; 1391 :            "need lookahead");
; 1392 : 
; 1393 :     do {
; 1394 :         Assert(cur_match < s->strstart, "no future");
; 1395 :         match = s->window + cur_match;

  000a4	8b 55 e0	 mov	 edx, DWORD PTR tv496[ebp]

; 1396 : 
; 1397 :         /* Skip to next match if the match length cannot increase
; 1398 :          * or if the match length is less than 2.  Note that the checks below
; 1399 :          * for insufficient lookahead only occur occasionally for performance
; 1400 :          * reasons.  Therefore uninitialized memory will be accessed, and
; 1401 :          * conditional jumps will be made that depend on those values.
; 1402 :          * However the length of the match is limited to the lookahead, so
; 1403 :          * the output of deflate is not affected by the uninitialized values.
; 1404 :          */
; 1405 : #if (defined(UNALIGNED_OK) && MAX_MATCH == 258)
; 1406 :         /* This code assumes sizeof(unsigned short) == 2. Do not use
; 1407 :          * UNALIGNED_OK if your compiler uses a different size.
; 1408 :          */
; 1409 :         if (*(ushf*)(match + best_len - 1) != scan_end ||
; 1410 :             *(ushf*)match != scan_start) continue;
; 1411 : 
; 1412 :         /* It is not necessary to compare scan[2] and match[2] since they are
; 1413 :          * always equal when the other bytes match, given that the hash keys
; 1414 :          * are equal and that HASH_BITS >= 8. Compare 2 bytes at a time at
; 1415 :          * strstart + 3, + 5, up to strstart + 257. We check for insufficient
; 1416 :          * lookahead only every 4th comparison; the 128th check will be made
; 1417 :          * at strstart + 257. If MAX_MATCH-2 is not a multiple of 8, it is
; 1418 :          * necessary to put more guard bytes at the end of the window, or
; 1419 :          * to check more often for insufficient lookahead.
; 1420 :          */
; 1421 :         Assert(scan[2] == match[2], "scan[2]?");
; 1422 :         scan++, match++;
; 1423 :         do {
; 1424 :         } while (*(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1425 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1426 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1427 :                  *(ushf*)(scan += 2) == *(ushf*)(match += 2) &&
; 1428 :                  scan < strend);
; 1429 :         /* The funny "do {}" generates better code on most compilers */
; 1430 : 
; 1431 :         /* Here, scan <= window + strstart + 257 */
; 1432 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1433 :                "wild scan");
; 1434 :         if (*scan == *match) scan++;
; 1435 : 
; 1436 :         len = (MAX_MATCH - 1) - (int)(strend - scan);
; 1437 :         scan = strend - (MAX_MATCH-1);
; 1438 : 
; 1439 : #else /* UNALIGNED_OK */
; 1440 : 
; 1441 :         if (match[best_len]     != scan_end  ||
; 1442 :             match[best_len - 1] != scan_end1 ||
; 1443 :             *match              != *scan     ||

  000a7	8a 45 fe	 mov	 al, BYTE PTR _scan_end$1$[ebp]
  000aa	03 d3		 add	 edx, ebx
  000ac	38 04 32	 cmp	 BYTE PTR [edx+esi], al
  000af	0f 85 a6 00 00
	00		 jne	 $LN2@longest_ma
  000b5	8a 45 ff	 mov	 al, BYTE PTR _scan_end1$1$[ebp]
  000b8	38 44 32 ff	 cmp	 BYTE PTR [edx+esi-1], al
  000bc	0f 85 99 00 00
	00		 jne	 $LN2@longest_ma
  000c2	8a 02		 mov	 al, BYTE PTR [edx]
  000c4	3a 01		 cmp	 al, BYTE PTR [ecx]
  000c6	0f 85 8f 00 00
	00		 jne	 $LN2@longest_ma
  000cc	8a 42 01	 mov	 al, BYTE PTR [edx+1]
  000cf	3a 41 01	 cmp	 al, BYTE PTR [ecx+1]
  000d2	0f 85 83 00 00
	00		 jne	 $LN2@longest_ma

; 1444 :             *++match            != scan[1])      continue;
; 1445 : 
; 1446 :         /* The check at best_len - 1 can be removed because it will be made
; 1447 :          * again later. (This heuristic is not always a win.)
; 1448 :          * It is not necessary to compare scan[2] and match[2] since they
; 1449 :          * are always equal when the other bytes match, given that
; 1450 :          * the hash keys are equal and that HASH_BITS >= 8.
; 1451 :          */
; 1452 :         scan += 2, match++;

  000d8	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  000db	83 c2 02	 add	 edx, 2
  000de	66 90		 npad	 2
$LL7@longest_ma:

; 1453 :         Assert(*scan == *match, "match[2]?");
; 1454 : 
; 1455 :         /* We check for insufficient lookahead only every 8th comparison;
; 1456 :          * the 256th check will be made at strstart + 258.
; 1457 :          */
; 1458 :         do {
; 1459 :         } while (*++scan == *++match && *++scan == *++match &&
; 1460 :                  *++scan == *++match && *++scan == *++match &&
; 1461 :                  *++scan == *++match && *++scan == *++match &&
; 1462 :                  *++scan == *++match && *++scan == *++match &&

  000e0	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000e3	40		 inc	 eax
  000e4	3a 4a 01	 cmp	 cl, BYTE PTR [edx+1]
  000e7	75 45		 jne	 SHORT $LN12@longest_ma
  000e9	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000ec	40		 inc	 eax
  000ed	3a 4a 02	 cmp	 cl, BYTE PTR [edx+2]
  000f0	75 3c		 jne	 SHORT $LN12@longest_ma
  000f2	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000f5	40		 inc	 eax
  000f6	3a 4a 03	 cmp	 cl, BYTE PTR [edx+3]
  000f9	75 33		 jne	 SHORT $LN12@longest_ma
  000fb	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  000fe	40		 inc	 eax
  000ff	3a 4a 04	 cmp	 cl, BYTE PTR [edx+4]
  00102	75 2a		 jne	 SHORT $LN12@longest_ma
  00104	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00107	40		 inc	 eax
  00108	3a 4a 05	 cmp	 cl, BYTE PTR [edx+5]
  0010b	75 21		 jne	 SHORT $LN12@longest_ma
  0010d	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00110	40		 inc	 eax
  00111	3a 4a 06	 cmp	 cl, BYTE PTR [edx+6]
  00114	75 18		 jne	 SHORT $LN12@longest_ma
  00116	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00119	40		 inc	 eax
  0011a	3a 4a 07	 cmp	 cl, BYTE PTR [edx+7]
  0011d	75 0f		 jne	 SHORT $LN12@longest_ma
  0011f	8a 48 01	 mov	 cl, BYTE PTR [eax+1]
  00122	40		 inc	 eax
  00123	83 c2 08	 add	 edx, 8
  00126	3a 0a		 cmp	 cl, BYTE PTR [edx]
  00128	75 04		 jne	 SHORT $LN12@longest_ma
  0012a	3b c7		 cmp	 eax, edi
  0012c	72 b2		 jb	 SHORT $LL7@longest_ma
$LN12@longest_ma:

; 1463 :                  scan < strend);
; 1464 : 
; 1465 :         Assert(scan <= s->window + (unsigned)(s->window_size - 1),
; 1466 :                "wild scan");
; 1467 : 
; 1468 :         len = MAX_MATCH - (int)(strend - scan);

  0012e	2b c7		 sub	 eax, edi
  00130	05 02 01 00 00	 add	 eax, 258		; 00000102H

; 1469 :         scan = strend - MAX_MATCH;
; 1470 : 
; 1471 : #endif /* UNALIGNED_OK */
; 1472 : 
; 1473 :         if (len > best_len) {

  00135	3b c6		 cmp	 eax, esi
  00137	7e 1f		 jle	 SHORT $LN29@longest_ma

; 1474 :             s->match_start = cur_match;
; 1475 :             best_len = len;

  00139	8b f0		 mov	 esi, eax
  0013b	8b 4d ec	 mov	 ecx, DWORD PTR _s$1$[ebp]
  0013e	89 59 70	 mov	 DWORD PTR [ecx+112], ebx

; 1476 :             if (len >= nice_match) break;

  00141	3b 45 f4	 cmp	 eax, DWORD PTR _nice_match$2$[ebp]
  00144	7d 30		 jge	 SHORT $LN3@longest_ma

; 1477 : #ifdef UNALIGNED_OK
; 1478 :             scan_end = *(ushf*)(scan + best_len - 1);
; 1479 : #else
; 1480 :             scan_end1  = scan[best_len - 1];

  00146	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
  00149	8a 54 08 ff	 mov	 dl, BYTE PTR [eax+ecx-1]

; 1481 :             scan_end   = scan[best_len];

  0014d	8a 04 08	 mov	 al, BYTE PTR [eax+ecx]
  00150	88 55 ff	 mov	 BYTE PTR _scan_end1$1$[ebp], dl
  00153	88 45 fe	 mov	 BYTE PTR _scan_end$1$[ebp], al
  00156	eb 03		 jmp	 SHORT $LN2@longest_ma
$LN29@longest_ma:

; 1469 :         scan = strend - MAX_MATCH;
; 1470 : 
; 1471 : #endif /* UNALIGNED_OK */
; 1472 : 
; 1473 :         if (len > best_len) {

  00158	8b 4d f0	 mov	 ecx, DWORD PTR _scan$3$[ebp]
$LN2@longest_ma:

; 1482 : #endif
; 1483 :         }
; 1484 :     } while ((cur_match = prev[cur_match & wmask]) > limit
; 1485 :              && --chain_length != 0);

  0015b	8b 45 dc	 mov	 eax, DWORD PTR _wmask$1$[ebp]
  0015e	8b 55 d8	 mov	 edx, DWORD PTR _prev$1$[ebp]
  00161	23 c3		 and	 eax, ebx
  00163	0f b7 1c 42	 movzx	 ebx, WORD PTR [edx+eax*2]
  00167	3b 5d e8	 cmp	 ebx, DWORD PTR _limit$1$[ebp]
  0016a	76 0a		 jbe	 SHORT $LN3@longest_ma
  0016c	83 6d f8 01	 sub	 DWORD PTR _chain_length$1$[ebp], 1
  00170	0f 85 2e ff ff
	ff		 jne	 $LL4@longest_ma
$LN3@longest_ma:

; 1486 : 
; 1487 :     if ((uInt)best_len <= s->lookahead) return (uInt)best_len;

  00176	8b 45 d4	 mov	 eax, DWORD PTR tv487[ebp]
  00179	3b f0		 cmp	 esi, eax
  0017b	5f		 pop	 edi
  0017c	0f 46 c6	 cmovbe	 eax, esi
  0017f	5e		 pop	 esi
  00180	5b		 pop	 ebx

; 1488 :     return s->lookahead;
; 1489 : }

  00181	8b e5		 mov	 esp, ebp
  00183	5d		 pop	 ebp
  00184	c3		 ret	 0
_longest_match ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflate_stored
_TEXT	SEGMENT
tv1282 = -12						; size = 4
_have$3$ = -12						; size = 4
tv1267 = -8						; size = 4
_used$1$ = -4						; size = 4
tv1289 = 8						; size = 4
tv1199 = 8						; size = 4
_len$4$ = 8						; size = 4
_last$1$ = 8						; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_stored PROC					; COMDAT

; 1627 : local block_state deflate_stored(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1628 :     /* Smallest worthy block size when not flushing or finishing. By default
; 1629 :      * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
; 1630 :      * large input and output buffers, the stored block size will be larger.
; 1631 :      */
; 1632 :     unsigned min_block = MIN(s->pending_buf_size - 5, s->w_size);
; 1633 : 
; 1634 :     /* Copy as many min_block or larger stored blocks directly to next_out as
; 1635 :      * possible. If flushing, copy the remaining available input to next_out as
; 1636 :      * stored blocks, if there is enough space.
; 1637 :      */
; 1638 :     unsigned len, left, have, last = 0;
; 1639 :     unsigned used = s->strm->avail_in;

  00006	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000e	57		 push	 edi
  0000f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00012	8b 4e 2c	 mov	 ecx, DWORD PTR [esi+44]
  00015	83 c0 fb	 add	 eax, -5			; fffffffbH
  00018	3b c1		 cmp	 eax, ecx
  0001a	0f 46 c8	 cmovbe	 ecx, eax
  0001d	8b 06		 mov	 eax, DWORD PTR [esi]
  0001f	33 ff		 xor	 edi, edi
  00021	89 4d f4	 mov	 DWORD PTR tv1282[ebp], ecx
  00024	89 7d 08	 mov	 DWORD PTR _last$1$[ebp], edi
  00027	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0002a	89 45 fc	 mov	 DWORD PTR _used$1$[ebp], eax
  0002d	0f 1f 00	 npad	 3
$LL4@deflate_st:

; 1640 :     do {
; 1641 :         /* Set len to the maximum size block that we can copy directly with the
; 1642 :          * available input data and output space. Set left to how much of that
; 1643 :          * would be copied from what's left in the window.
; 1644 :          */
; 1645 :         len = MAX_STORED;       /* maximum deflate stored block length */
; 1646 :         have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00030	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]
  00036	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH

; 1647 :         if (s->strm->avail_out < have)          /* need room for header */

  0003b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0003d	83 c0 2a	 add	 eax, 42			; 0000002aH
  00040	c1 f8 03	 sar	 eax, 3
  00043	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00046	3b c8		 cmp	 ecx, eax
  00048	72 2d		 jb	 SHORT $LN3@deflate_st

; 1648 :             break;
; 1649 :             /* maximum stored block length that will fit in avail_out: */
; 1650 :         have = s->strm->avail_out - have;
; 1651 :         left = s->strstart - s->block_start;    /* bytes left in window */

  0004a	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]
  0004d	2b c8		 sub	 ecx, eax

; 1652 :         if (len > (ulg)left + s->strm->avail_in)

  0004f	8b 06		 mov	 eax, DWORD PTR [esi]
  00051	2b 7e 5c	 sub	 edi, DWORD PTR [esi+92]
  00054	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00057	89 45 f8	 mov	 DWORD PTR tv1267[ebp], eax
  0005a	03 c7		 add	 eax, edi
  0005c	3b c3		 cmp	 eax, ebx
  0005e	0f 42 d8	 cmovb	 ebx, eax

; 1653 :             len = left + s->strm->avail_in;     /* limit len to the input */
; 1654 :         if (len > have)

  00061	3b d9		 cmp	 ebx, ecx
  00063	0f 47 d9	 cmova	 ebx, ecx

; 1655 :             len = have;                         /* limit len to the output */
; 1656 : 
; 1657 :         /* If the stored block would be less than min_block in length, or if
; 1658 :          * unable to copy all of the available input when flushing, then try
; 1659 :          * copying to the window and the pending buffer instead. Also don't
; 1660 :          * write an empty block when flushing -- deflate() does that.
; 1661 :          */
; 1662 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00066	3b 5d f4	 cmp	 ebx, DWORD PTR tv1282[ebp]
  00069	73 5e		 jae	 SHORT $LN66@deflate_st
  0006b	85 db		 test	 ebx, ebx
  0006d	75 4a		 jne	 SHORT $LN10@deflate_st
  0006f	83 fa 04	 cmp	 edx, 4
  00072	74 49		 je	 SHORT $LN62@deflate_st
$LN65@deflate_st:

; 1710 : 
; 1711 :     /* Update the sliding window with the last s->w_size bytes of the copied
; 1712 :      * data, or append all of the copied data to the existing window if less
; 1713 :      * than s->w_size bytes were copied. Also update the number of bytes to
; 1714 :      * insert in the hash tables, in the event that deflateParams() switches to
; 1715 :      * a non-zero compression level.
; 1716 :      */
; 1717 :     used -= s->strm->avail_in;      /* number of input bytes directly copied */

  00074	8b 7d 08	 mov	 edi, DWORD PTR _last$1$[ebp]
$LN3@deflate_st:
  00077	8b 06		 mov	 eax, DWORD PTR [esi]
  00079	8b 4d fc	 mov	 ecx, DWORD PTR _used$1$[ebp]
  0007c	2b 48 04	 sub	 ecx, DWORD PTR [eax+4]
  0007f	89 4d fc	 mov	 DWORD PTR _used$1$[ebp], ecx

; 1718 :     if (used) {

  00082	0f 84 8e 01 00
	00		 je	 $LN58@deflate_st

; 1719 :         /* If any input was used, then no unused input remains in the window,
; 1720 :          * therefore s->block_start == s->strstart.
; 1721 :          */
; 1722 :         if (used >= s->w_size) {    /* supplant the previous history */

  00088	8b 5e 2c	 mov	 ebx, DWORD PTR [esi+44]
  0008b	3b cb		 cmp	 ecx, ebx
  0008d	0f 82 03 01 00
	00		 jb	 $LN15@deflate_st

; 1723 :             s->matches = 2;         /* clear hash */

  00093	c7 86 b0 16 00
	00 02 00 00 00	 mov	 DWORD PTR [esi+5808], 2

; 1724 :             zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);

  0009d	8b 00		 mov	 eax, DWORD PTR [eax]
  0009f	53		 push	 ebx
  000a0	2b c3		 sub	 eax, ebx
  000a2	50		 push	 eax
  000a3	ff 76 38	 push	 DWORD PTR [esi+56]
  000a6	e8 00 00 00 00	 call	 _memcpy

; 1725 :             s->strstart = s->w_size;

  000ab	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000ae	83 c4 0c	 add	 esp, 12			; 0000000cH
  000b1	89 46 6c	 mov	 DWORD PTR [esi+108], eax

; 1726 :             s->insert = s->strstart;
; 1727 :         }

  000b4	e9 51 01 00 00	 jmp	 $LN16@deflate_st
$LN10@deflate_st:

; 1655 :             len = have;                         /* limit len to the output */
; 1656 : 
; 1657 :         /* If the stored block would be less than min_block in length, or if
; 1658 :          * unable to copy all of the available input when flushing, then try
; 1659 :          * copying to the window and the pending buffer instead. Also don't
; 1660 :          * write an empty block when flushing -- deflate() does that.
; 1661 :          */
; 1662 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  000b9	85 d2		 test	 edx, edx
  000bb	74 b7		 je	 SHORT $LN65@deflate_st
$LN62@deflate_st:
  000bd	8b 4d f8	 mov	 ecx, DWORD PTR tv1267[ebp]
  000c0	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000c3	3b d8		 cmp	 ebx, eax
  000c5	75 ad		 jne	 SHORT $LN65@deflate_st
  000c7	eb 03		 jmp	 SHORT $LN51@deflate_st
$LN66@deflate_st:
  000c9	8b 4d f8	 mov	 ecx, DWORD PTR tv1267[ebp]
$LN51@deflate_st:

; 1663 :                                 flush == Z_NO_FLUSH ||
; 1664 :                                 len != left + s->strm->avail_in))
; 1665 :             break;
; 1666 : 
; 1667 :         /* Make a dummy stored block in pending to get the header bytes,
; 1668 :          * including any pending bits. This also updates the debugging counts.
; 1669 :          */
; 1670 :         last = flush == Z_FINISH && len == left + s->strm->avail_in ? 1 : 0;

  000cc	83 fa 04	 cmp	 edx, 4
  000cf	75 0c		 jne	 SHORT $LN52@deflate_st
  000d1	8d 04 39	 lea	 eax, DWORD PTR [ecx+edi]
  000d4	3b d8		 cmp	 ebx, eax
  000d6	75 05		 jne	 SHORT $LN52@deflate_st
  000d8	8d 42 fd	 lea	 eax, DWORD PTR [edx-3]
  000db	eb 02		 jmp	 SHORT $LN98@deflate_st
$LN52@deflate_st:
  000dd	33 c0		 xor	 eax, eax
$LN98@deflate_st:

; 1671 :         _tr_stored_block(s, (char *)0, 0L, last);

  000df	50		 push	 eax
  000e0	6a 00		 push	 0
  000e2	33 d2		 xor	 edx, edx
  000e4	89 45 08	 mov	 DWORD PTR _last$1$[ebp], eax
  000e7	8b ce		 mov	 ecx, esi
  000e9	e8 00 00 00 00	 call	 __tr_stored_block

; 1672 : 
; 1673 :         /* Replace the lengths in the dummy stored block with len. */
; 1674 :         s->pending_buf[s->pending - 4] = (Bytef)len;

  000ee	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]

; 1675 :         s->pending_buf[s->pending - 3] = (Bytef)(len >> 8);

  000f1	8b d3		 mov	 edx, ebx
  000f3	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  000f6	83 c4 08	 add	 esp, 8
  000f9	c1 ea 08	 shr	 edx, 8
  000fc	88 5c 01 fc	 mov	 BYTE PTR [ecx+eax-4], bl
  00100	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00103	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00106	88 54 01 fd	 mov	 BYTE PTR [ecx+eax-3], dl

; 1676 :         s->pending_buf[s->pending - 2] = (Bytef)~len;

  0010a	8a d3		 mov	 dl, bl
  0010c	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0010f	f6 d2		 not	 dl
  00111	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00114	88 54 01 fe	 mov	 BYTE PTR [ecx+eax-2], dl

; 1677 :         s->pending_buf[s->pending - 1] = (Bytef)(~len >> 8);

  00118	8b d3		 mov	 edx, ebx
  0011a	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  0011d	f7 d2		 not	 edx
  0011f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00122	c1 ea 08	 shr	 edx, 8
  00125	88 54 01 ff	 mov	 BYTE PTR [ecx+eax-1], dl

; 1678 : 
; 1679 :         /* Write the stored block header bytes. */
; 1680 :         flush_pending(s->strm);

  00129	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0012b	e8 00 00 00 00	 call	 _flush_pending

; 1681 : 
; 1682 : #ifdef ZLIB_DEBUG
; 1683 :         /* Update debugging counts for the data about to be copied. */
; 1684 :         s->compressed_len += len << 3;
; 1685 :         s->bits_sent += len << 3;
; 1686 : #endif
; 1687 : 
; 1688 :         /* Copy uncompressed bytes from the window to next_out. */
; 1689 :         if (left) {

  00130	85 ff		 test	 edi, edi
  00132	74 2e		 je	 SHORT $LN57@deflate_st

; 1690 :             if (left > len)
; 1691 :                 left = len;
; 1692 :             zmemcpy(s->strm->next_out, s->window + s->block_start, left);

  00134	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00137	3b fb		 cmp	 edi, ebx
  00139	0f 47 fb	 cmova	 edi, ebx
  0013c	03 46 38	 add	 eax, DWORD PTR [esi+56]
  0013f	57		 push	 edi
  00140	50		 push	 eax
  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	ff 70 0c	 push	 DWORD PTR [eax+12]
  00146	e8 00 00 00 00	 call	 _memcpy

; 1693 :             s->strm->next_out += left;

  0014b	8b 06		 mov	 eax, DWORD PTR [esi]
  0014d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00150	01 78 0c	 add	 DWORD PTR [eax+12], edi

; 1694 :             s->strm->avail_out -= left;

  00153	8b 06		 mov	 eax, DWORD PTR [esi]
  00155	29 78 10	 sub	 DWORD PTR [eax+16], edi

; 1695 :             s->strm->total_out += left;

  00158	8b 06		 mov	 eax, DWORD PTR [esi]
  0015a	01 78 14	 add	 DWORD PTR [eax+20], edi

; 1696 :             s->block_start += left;

  0015d	01 7e 5c	 add	 DWORD PTR [esi+92], edi

; 1697 :             len -= left;

  00160	2b df		 sub	 ebx, edi
$LN57@deflate_st:

; 1698 :         }
; 1699 : 
; 1700 :         /* Copy uncompressed bytes directly from next_in to next_out, updating
; 1701 :          * the check value.
; 1702 :          */
; 1703 :         if (len) {

  00162	85 db		 test	 ebx, ebx
  00164	74 1d		 je	 SHORT $LN2@deflate_st

; 1704 :             read_buf(s->strm, s->strm->next_out, len);

  00166	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00168	53		 push	 ebx
  00169	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0016c	e8 00 00 00 00	 call	 _read_buf

; 1705 :             s->strm->next_out += len;

  00171	8b 06		 mov	 eax, DWORD PTR [esi]
  00173	83 c4 04	 add	 esp, 4
  00176	01 58 0c	 add	 DWORD PTR [eax+12], ebx

; 1706 :             s->strm->avail_out -= len;

  00179	8b 06		 mov	 eax, DWORD PTR [esi]
  0017b	29 58 10	 sub	 DWORD PTR [eax+16], ebx

; 1707 :             s->strm->total_out += len;

  0017e	8b 06		 mov	 eax, DWORD PTR [esi]
  00180	01 58 14	 add	 DWORD PTR [eax+20], ebx
$LN2@deflate_st:

; 1708 :         }
; 1709 :     } while (last == 0);

  00183	8b 7d 08	 mov	 edi, DWORD PTR _last$1$[ebp]
  00186	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  00189	85 ff		 test	 edi, edi
  0018b	0f 84 9f fe ff
	ff		 je	 $LL4@deflate_st

; 1655 :             len = have;                         /* limit len to the output */
; 1656 : 
; 1657 :         /* If the stored block would be less than min_block in length, or if
; 1658 :          * unable to copy all of the available input when flushing, then try
; 1659 :          * copying to the window and the pending buffer instead. Also don't
; 1660 :          * write an empty block when flushing -- deflate() does that.
; 1661 :          */
; 1662 :         if (len < min_block && ((len == 0 && flush != Z_FINISH) ||

  00191	e9 e1 fe ff ff	 jmp	 $LN3@deflate_st
$LN15@deflate_st:

; 1728 :         else {
; 1729 :             if (s->window_size - s->strstart <= used) {

  00196	8b 46 3c	 mov	 eax, DWORD PTR [esi+60]
  00199	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  0019c	2b c2		 sub	 eax, edx
  0019e	3b c1		 cmp	 eax, ecx
  001a0	77 39		 ja	 SHORT $LN19@deflate_st

; 1730 :                 /* Slide the window down. */
; 1731 :                 s->strstart -= s->w_size;
; 1732 :                 zmemcpy(s->window, s->window + s->w_size, s->strstart);

  001a2	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  001a5	2b d3		 sub	 edx, ebx
  001a7	52		 push	 edx
  001a8	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  001ab	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  001ae	50		 push	 eax
  001af	51		 push	 ecx
  001b0	e8 00 00 00 00	 call	 _memcpy

; 1733 :                 if (s->matches < 2)

  001b5	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  001bb	83 c4 0c	 add	 esp, 12			; 0000000cH
  001be	83 f8 02	 cmp	 eax, 2
  001c1	73 07		 jae	 SHORT $LN18@deflate_st

; 1734 :                     s->matches++;   /* add a pending slide_hash() */

  001c3	40		 inc	 eax
  001c4	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN18@deflate_st:

; 1735 :                 if (s->insert > s->strstart)

  001ca	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  001cd	39 96 b4 16 00
	00		 cmp	 DWORD PTR [esi+5812], edx
  001d3	76 06		 jbe	 SHORT $LN19@deflate_st

; 1736 :                     s->insert = s->strstart;

  001d5	89 96 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], edx
$LN19@deflate_st:

; 1737 :             }
; 1738 :             zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);

  001db	8b 06		 mov	 eax, DWORD PTR [esi]
  001dd	8b 5d fc	 mov	 ebx, DWORD PTR _used$1$[ebp]
  001e0	53		 push	 ebx
  001e1	8b 00		 mov	 eax, DWORD PTR [eax]
  001e3	2b c3		 sub	 eax, ebx
  001e5	50		 push	 eax
  001e6	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001e9	03 c2		 add	 eax, edx
  001eb	50		 push	 eax
  001ec	e8 00 00 00 00	 call	 _memcpy

; 1739 :             s->strstart += used;
; 1740 :             s->insert += MIN(used, s->w_size - s->insert);

  001f1	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  001f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  001fa	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  001fd	01 5e 6c	 add	 DWORD PTR [esi+108], ebx
  00200	2b c1		 sub	 eax, ecx
  00202	3b d8		 cmp	 ebx, eax
  00204	0f 47 d8	 cmova	 ebx, eax
  00207	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
$LN16@deflate_st:

; 1741 :         }
; 1742 :         s->block_start = s->strstart;

  0020a	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
  00210	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00213	89 46 5c	 mov	 DWORD PTR [esi+92], eax
$LN58@deflate_st:

; 1743 :     }
; 1744 :     if (s->high_water < s->strstart)

  00216	8b 56 6c	 mov	 edx, DWORD PTR [esi+108]
  00219	39 96 c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], edx
  0021f	73 06		 jae	 SHORT $LN20@deflate_st

; 1745 :         s->high_water = s->strstart;

  00221	89 96 c0 16 00
	00		 mov	 DWORD PTR [esi+5824], edx
$LN20@deflate_st:

; 1746 : 
; 1747 :     /* If the last block was written to next_out, then done. */
; 1748 :     if (last)

  00227	85 ff		 test	 edi, edi
  00229	74 0c		 je	 SHORT $LN21@deflate_st

; 1802 : }

  0022b	5f		 pop	 edi
  0022c	5e		 pop	 esi
  0022d	b8 03 00 00 00	 mov	 eax, 3
  00232	5b		 pop	 ebx
  00233	8b e5		 mov	 esp, ebp
  00235	5d		 pop	 ebp
  00236	c3		 ret	 0
$LN21@deflate_st:

; 1749 :         return finish_done;
; 1750 : 
; 1751 :     /* If flushing and all input has been consumed, then done. */
; 1752 :     if (flush != Z_NO_FLUSH && flush != Z_FINISH &&
; 1753 :         s->strm->avail_in == 0 && (long)s->strstart == s->block_start)

  00237	8b 45 0c	 mov	 eax, DWORD PTR _flush$[ebp]
  0023a	85 c0		 test	 eax, eax
  0023c	74 1e		 je	 SHORT $LN22@deflate_st
  0023e	83 f8 04	 cmp	 eax, 4
  00241	74 19		 je	 SHORT $LN22@deflate_st
  00243	8b 06		 mov	 eax, DWORD PTR [esi]
  00245	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00249	75 11		 jne	 SHORT $LN22@deflate_st
  0024b	3b 56 5c	 cmp	 edx, DWORD PTR [esi+92]
  0024e	75 0c		 jne	 SHORT $LN22@deflate_st

; 1802 : }

  00250	5f		 pop	 edi
  00251	5e		 pop	 esi
  00252	b8 01 00 00 00	 mov	 eax, 1
  00257	5b		 pop	 ebx
  00258	8b e5		 mov	 esp, ebp
  0025a	5d		 pop	 ebp
  0025b	c3		 ret	 0
$LN22@deflate_st:

; 1754 :         return block_done;
; 1755 : 
; 1756 :     /* Fill the window with any remaining input. */
; 1757 :     have = s->window_size - s->strstart;
; 1758 :     if (s->strm->avail_in > have && s->block_start >= (long)s->w_size) {

  0025c	8b 06		 mov	 eax, DWORD PTR [esi]
  0025e	8b da		 mov	 ebx, edx
  00260	8b 4e 3c	 mov	 ecx, DWORD PTR [esi+60]
  00263	2b ca		 sub	 ecx, edx
  00265	89 4d f4	 mov	 DWORD PTR _have$3$[ebp], ecx
  00268	39 48 04	 cmp	 DWORD PTR [eax+4], ecx
  0026b	76 54		 jbe	 SHORT $LN25@deflate_st
  0026d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00270	89 45 08	 mov	 DWORD PTR tv1199[ebp], eax
  00273	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00276	39 45 08	 cmp	 DWORD PTR tv1199[ebp], eax
  00279	7c 46		 jl	 SHORT $LN25@deflate_st

; 1759 :         /* Slide the window down. */
; 1760 :         s->block_start -= s->w_size;

  0027b	8b 4d 08	 mov	 ecx, DWORD PTR tv1199[ebp]

; 1761 :         s->strstart -= s->w_size;

  0027e	2b d0		 sub	 edx, eax
  00280	2b c8		 sub	 ecx, eax
  00282	89 56 6c	 mov	 DWORD PTR [esi+108], edx
  00285	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx

; 1762 :         zmemcpy(s->window, s->window + s->w_size, s->strstart);

  00288	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  0028b	03 c1		 add	 eax, ecx
  0028d	52		 push	 edx
  0028e	50		 push	 eax
  0028f	51		 push	 ecx
  00290	e8 00 00 00 00	 call	 _memcpy

; 1763 :         if (s->matches < 2)

  00295	8b 86 b0 16 00
	00		 mov	 eax, DWORD PTR [esi+5808]
  0029b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0029e	83 f8 02	 cmp	 eax, 2
  002a1	73 07		 jae	 SHORT $LN24@deflate_st

; 1764 :             s->matches++;           /* add a pending slide_hash() */

  002a3	40		 inc	 eax
  002a4	89 86 b0 16 00
	00		 mov	 DWORD PTR [esi+5808], eax
$LN24@deflate_st:

; 1765 :         have += s->w_size;          /* more space now */

  002aa	8b 4d f4	 mov	 ecx, DWORD PTR _have$3$[ebp]
  002ad	03 4e 2c	 add	 ecx, DWORD PTR [esi+44]

; 1766 :         if (s->insert > s->strstart)

  002b0	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  002b3	39 9e b4 16 00
	00		 cmp	 DWORD PTR [esi+5812], ebx
  002b9	76 06		 jbe	 SHORT $LN25@deflate_st

; 1767 :             s->insert = s->strstart;

  002bb	89 9e b4 16 00
	00		 mov	 DWORD PTR [esi+5812], ebx
$LN25@deflate_st:

; 1768 :     }
; 1769 :     if (have > s->strm->avail_in)

  002c1	8b 06		 mov	 eax, DWORD PTR [esi]
  002c3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 1770 :         have = s->strm->avail_in;
; 1771 :     if (have) {

  002c6	3b c8		 cmp	 ecx, eax
  002c8	0f 46 c1	 cmovbe	 eax, ecx
  002cb	89 45 08	 mov	 DWORD PTR tv1289[ebp], eax
  002ce	85 c0		 test	 eax, eax
  002d0	74 34		 je	 SHORT $LN59@deflate_st

; 1772 :         read_buf(s->strm, s->window + s->strstart, have);

  002d2	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002d5	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002d7	03 d3		 add	 edx, ebx
  002d9	50		 push	 eax
  002da	e8 00 00 00 00	 call	 _read_buf

; 1773 :         s->strstart += have;
; 1774 :         s->insert += MIN(have, s->w_size - s->insert);

  002df	8b 8e b4 16 00
	00		 mov	 ecx, DWORD PTR [esi+5812]
  002e5	83 c4 04	 add	 esp, 4
  002e8	8b 5e 6c	 mov	 ebx, DWORD PTR [esi+108]
  002eb	8b 55 08	 mov	 edx, DWORD PTR tv1289[ebp]
  002ee	03 da		 add	 ebx, edx
  002f0	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  002f3	2b c1		 sub	 eax, ecx
  002f5	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  002f8	3b d0		 cmp	 edx, eax
  002fa	0f 47 d0	 cmova	 edx, eax
  002fd	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00300	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
$LN59@deflate_st:

; 1775 :     }
; 1776 :     if (s->high_water < s->strstart)

  00306	39 9e c0 16 00
	00		 cmp	 DWORD PTR [esi+5824], ebx
  0030c	73 06		 jae	 SHORT $LN28@deflate_st

; 1777 :         s->high_water = s->strstart;

  0030e	89 9e c0 16 00
	00		 mov	 DWORD PTR [esi+5824], ebx
$LN28@deflate_st:

; 1778 : 
; 1779 :     /* There was not enough avail_out to write a complete worthy or flushed
; 1780 :      * stored block to next_out. Write a stored block to pending instead, if we
; 1781 :      * have enough input for a worthy block, or if flushing and there is enough
; 1782 :      * room for the remaining input as a stored block in the pending buffer.
; 1783 :      */
; 1784 :     have = (s->bi_valid + 42) >> 3;         /* number of header bytes */

  00314	8b 86 bc 16 00
	00		 mov	 eax, DWORD PTR [esi+5820]

; 1785 :         /* maximum stored block length that will fit in pending: */
; 1786 :     have = MIN(s->pending_buf_size - have, MAX_STORED);

  0031a	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0031d	83 c0 2a	 add	 eax, 42			; 0000002aH

; 1787 :     min_block = MIN(have, s->w_size);
; 1788 :     left = s->strstart - s->block_start;
; 1789 :     if (left >= min_block ||

  00320	8b 4d 0c	 mov	 ecx, DWORD PTR _flush$[ebp]
  00323	c1 f8 03	 sar	 eax, 3
  00326	2b d0		 sub	 edx, eax
  00328	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  0032d	3b d0		 cmp	 edx, eax
  0032f	0f 47 d0	 cmova	 edx, eax
  00332	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  00335	2b 5e 5c	 sub	 ebx, DWORD PTR [esi+92]
  00338	3b d0		 cmp	 edx, eax
  0033a	0f 46 c2	 cmovbe	 eax, edx
  0033d	3b d8		 cmp	 ebx, eax
  0033f	73 1b		 jae	 SHORT $LN55@deflate_st
  00341	85 db		 test	 ebx, ebx
  00343	75 07		 jne	 SHORT $LN31@deflate_st
  00345	83 f9 04	 cmp	 ecx, 4
  00348	75 56		 jne	 SHORT $LN29@deflate_st
  0034a	eb 04		 jmp	 SHORT $LN61@deflate_st
$LN31@deflate_st:
  0034c	85 c9		 test	 ecx, ecx
  0034e	74 50		 je	 SHORT $LN29@deflate_st
$LN61@deflate_st:
  00350	8b 06		 mov	 eax, DWORD PTR [esi]
  00352	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00356	75 48		 jne	 SHORT $LN29@deflate_st
  00358	3b da		 cmp	 ebx, edx
  0035a	77 44		 ja	 SHORT $LN29@deflate_st
$LN55@deflate_st:

; 1790 :         ((left || flush == Z_FINISH) && flush != Z_NO_FLUSH &&
; 1791 :          s->strm->avail_in == 0 && left <= have)) {
; 1792 :         len = MIN(left, have);

  0035c	3b da		 cmp	 ebx, edx
  0035e	8b c3		 mov	 eax, ebx
  00360	0f 47 c2	 cmova	 eax, edx
  00363	89 45 08	 mov	 DWORD PTR _len$4$[ebp], eax

; 1793 :         last = flush == Z_FINISH && s->strm->avail_in == 0 &&

  00366	83 f9 04	 cmp	 ecx, 4
  00369	75 14		 jne	 SHORT $LN45@deflate_st
  0036b	8b 06		 mov	 eax, DWORD PTR [esi]
  0036d	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00371	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00374	75 09		 jne	 SHORT $LN45@deflate_st
  00376	3b c3		 cmp	 eax, ebx
  00378	75 05		 jne	 SHORT $LN45@deflate_st
  0037a	8d 79 fd	 lea	 edi, DWORD PTR [ecx-3]
  0037d	eb 02		 jmp	 SHORT $LN46@deflate_st
$LN45@deflate_st:
  0037f	33 ff		 xor	 edi, edi
$LN46@deflate_st:

; 1794 :                len == left ? 1 : 0;
; 1795 :         _tr_stored_block(s, (charf *)s->window + s->block_start, len, last);

  00381	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00384	8b ce		 mov	 ecx, esi
  00386	03 56 5c	 add	 edx, DWORD PTR [esi+92]
  00389	57		 push	 edi
  0038a	50		 push	 eax
  0038b	e8 00 00 00 00	 call	 __tr_stored_block

; 1796 :         s->block_start += len;

  00390	8b 45 08	 mov	 eax, DWORD PTR _len$4$[ebp]
  00393	83 c4 08	 add	 esp, 8

; 1797 :         flush_pending(s->strm);

  00396	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00398	01 46 5c	 add	 DWORD PTR [esi+92], eax
  0039b	e8 00 00 00 00	 call	 _flush_pending
$LN29@deflate_st:

; 1798 :     }
; 1799 : 
; 1800 :     /* We've done all we can with the available input and output. */
; 1801 :     return last ? finish_started : need_more;

  003a0	f7 df		 neg	 edi
  003a2	1b ff		 sbb	 edi, edi
  003a4	83 e7 02	 and	 edi, 2
  003a7	8b c7		 mov	 eax, edi
  003a9	5f		 pop	 edi

; 1802 : }

  003aa	5e		 pop	 esi
  003ab	5b		 pop	 ebx
  003ac	8b e5		 mov	 esp, ebp
  003ae	5d		 pop	 ebp
  003af	c3		 ret	 0
_deflate_stored ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflate_fast
_TEXT	SEGMENT
tv1333 = -4						; size = 4
_bflush$1$ = -4						; size = 4
_hash_head$1$ = -4					; size = 4
$T1 = 8							; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_fast PROC					; COMDAT

; 1811 : local block_state deflate_fast(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  00009	57		 push	 edi
  0000a	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  0000d	8d 5e 38	 lea	 ebx, DWORD PTR [esi+56]
$LL2@deflate_fa:

; 1812 :     IPos hash_head;       /* head of the hash chain */
; 1813 :     int bflush;           /* set if current block must be flushed */
; 1814 : 
; 1815 :     for (;;) {
; 1816 :         /* Make sure that we always have enough lookahead, except
; 1817 :          * at the end of the input file. We need MAX_MATCH bytes
; 1818 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1819 :          * string following the next match.
; 1820 :          */
; 1821 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi
  00016	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0001b	73 2d		 jae	 SHORT $LN10@deflate_fa

; 1822 :             fill_window(s);

  0001d	8b ce		 mov	 ecx, esi
  0001f	e8 00 00 00 00	 call	 _fill_window

; 1823 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00024	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00027	8b 55 0c	 mov	 edx, DWORD PTR _flush$[ebp]
  0002a	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0002f	73 08		 jae	 SHORT $LN9@deflate_fa
  00031	85 d2		 test	 edx, edx
  00033	0f 84 30 03 00
	00		 je	 $LN39@deflate_fa
$LN9@deflate_fa:

; 1824 :                 return need_more;
; 1825 :             }
; 1826 :             if (s->lookahead == 0) break; /* flush the current block */

  00039	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  0003c	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi
  0003f	8d 5e 38	 lea	 ebx, DWORD PTR [esi+56]
  00042	85 c0		 test	 eax, eax
  00044	0f 84 7e 02 00
	00		 je	 $LN38@deflate_fa
$LN10@deflate_fa:

; 1827 :         }
; 1828 : 
; 1829 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1830 :          * dictionary, and set hash_head to the head of the hash chain:
; 1831 :          */
; 1832 :         hash_head = NIL;
; 1833 :         if (s->lookahead >= MIN_MATCH) {

  0004a	83 f8 03	 cmp	 eax, 3
  0004d	72 69		 jb	 SHORT $LN12@deflate_fa

; 1834 :             INSERT_STRING(s, s->strstart, hash_head);

  0004f	8b 3f		 mov	 edi, DWORD PTR [edi]
  00051	8b 03		 mov	 eax, DWORD PTR [ebx]
  00053	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  00056	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00059	d3 e2		 shl	 edx, cl
  0005b	0f b6 44 07 02	 movzx	 eax, BYTE PTR [edi+eax+2]
  00060	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00063	33 d0		 xor	 edx, eax
  00065	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00068	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0006b	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  0006e	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00071	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  00075	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  00079	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
  0007c	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  0007f	8b 17		 mov	 edx, DWORD PTR [edi]
  00081	8b ca		 mov	 ecx, edx
  00083	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  00086	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  0008a	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  0008d	89 45 fc	 mov	 DWORD PTR _hash_head$1$[ebp], eax
  00090	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00093	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx

; 1835 :         }
; 1836 : 
; 1837 :         /* Find the longest match, discarding those <= prev_length.
; 1838 :          * At this point we have always match_length < MIN_MATCH
; 1839 :          */
; 1840 :         if (hash_head != NIL && s->strstart - hash_head <= MAX_DIST(s)) {

  00097	8b 55 fc	 mov	 edx, DWORD PTR _hash_head$1$[ebp]
  0009a	85 d2		 test	 edx, edx
  0009c	74 1a		 je	 SHORT $LN12@deflate_fa
  0009e	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000a0	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000a3	2b ca		 sub	 ecx, edx
  000a5	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000aa	3b c8		 cmp	 ecx, eax
  000ac	77 0a		 ja	 SHORT $LN12@deflate_fa

; 1841 :             /* To simplify the code, we prevent matches with the string
; 1842 :              * of window index 0 (in particular we have to avoid a match
; 1843 :              * of the string with itself at the start of the input file).
; 1844 :              */
; 1845 :             s->match_length = longest_match (s, hash_head);

  000ae	8b ce		 mov	 ecx, esi
  000b0	e8 00 00 00 00	 call	 _longest_match
  000b5	89 46 60	 mov	 DWORD PTR [esi+96], eax
$LN12@deflate_fa:

; 1846 :             /* longest_match() sets match_start */
; 1847 :         }
; 1848 :         if (s->match_length >= MIN_MATCH) {

  000b8	8b 46 60	 mov	 eax, DWORD PTR [esi+96]
  000bb	83 f8 03	 cmp	 eax, 3
  000be	0f 82 54 01 00
	00		 jb	 $LN13@deflate_fa

; 1849 :             check_match(s, s->strstart, s->match_start, s->match_length);
; 1850 : 
; 1851 :             _tr_tally_dist(s, s->strstart - s->match_start,

  000c4	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  000ca	2c 03		 sub	 al, 3
  000cc	89 45 fc	 mov	 DWORD PTR tv1333[ebp], eax
  000cf	66 8b 07	 mov	 ax, WORD PTR [edi]
  000d2	66 2b 46 70	 sub	 ax, WORD PTR [esi+112]
  000d6	0f b7 d8	 movzx	 ebx, ax
  000d9	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  000df	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  000e2	8b cb		 mov	 ecx, ebx
  000e4	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  000ea	81 c3 ff ff 00
	00		 add	 ebx, 65535		; 0000ffffH
  000f0	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000f6	42		 inc	 edx
  000f7	89 96 a0 16 00
	00		 mov	 DWORD PTR [esi+5792], edx
  000fd	c1 e9 08	 shr	 ecx, 8
  00100	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00103	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00109	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0010f	41		 inc	 ecx
  00110	8b 55 fc	 mov	 edx, DWORD PTR tv1333[ebp]
  00113	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00119	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0011c	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00121	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00127	0f b6 c2	 movzx	 eax, dl
  0012a	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00131	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00139	0f b7 c3	 movzx	 eax, bx
  0013c	66 3b d9	 cmp	 bx, cx
  0013f	73 08		 jae	 SHORT $LN24@deflate_fa
  00141	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  00147	eb 09		 jmp	 SHORT $LN25@deflate_fa
$LN24@deflate_fa:
  00149	c1 e8 07	 shr	 eax, 7
  0014c	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN25@deflate_fa:
  00152	0f b6 c0	 movzx	 eax, al
  00155	33 c9		 xor	 ecx, ecx
  00157	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  0015f	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00165	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 1852 :                            s->match_length - MIN_MATCH, bflush);
; 1853 : 
; 1854 :             s->lookahead -= s->match_length;

  0016b	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0016e	0f 94 c1	 sete	 cl
  00171	89 4d fc	 mov	 DWORD PTR _bflush$1$[ebp], ecx
  00174	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00177	2b c1		 sub	 eax, ecx
  00179	89 46 74	 mov	 DWORD PTR [esi+116], eax

; 1855 : 
; 1856 :             /* Insert new strings in the hash table only if the match length
; 1857 :              * is not too large. This saves time but degrades compression.
; 1858 :              */
; 1859 : #ifndef FASTEST
; 1860 :             if (s->match_length <= s->max_insert_length &&

  0017c	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  00182	77 61		 ja	 SHORT $LN45@deflate_fa
  00184	83 f8 03	 cmp	 eax, 3
  00187	72 5c		 jb	 SHORT $LN45@deflate_fa

; 1861 :                 s->lookahead >= MIN_MATCH) {
; 1862 :                 s->match_length--; /* string at strstart already in table */

  00189	8d 41 ff	 lea	 eax, DWORD PTR [ecx-1]
  0018c	89 46 60	 mov	 DWORD PTR [esi+96], eax
  0018f	90		 npad	 1
$LL7@deflate_fa:

; 1863 :                 do {
; 1864 :                     s->strstart++;

  00190	ff 46 6c	 inc	 DWORD PTR [esi+108]
  00193	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1865 :                     INSERT_STRING(s, s->strstart, hash_head);

  00196	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00199	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0019c	0f b6 54 07 02	 movzx	 edx, BYTE PTR [edi+eax+2]
  001a1	8b 46 48	 mov	 eax, DWORD PTR [esi+72]
  001a4	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  001a7	d3 e0		 shl	 eax, cl
  001a9	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  001ac	33 d0		 xor	 edx, eax
  001ae	23 56 54	 and	 edx, DWORD PTR [esi+84]
  001b1	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  001b4	89 56 48	 mov	 DWORD PTR [esi+72], edx
  001b7	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  001bb	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  001bf	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  001c2	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  001c5	0f b7 46 6c	 movzx	 eax, WORD PTR [esi+108]
  001c9	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax

; 1866 :                     /* strstart never exceeds WSIZE-MAX_MATCH, so there are
; 1867 :                      * always MIN_MATCH bytes ahead.
; 1868 :                      */
; 1869 :                 } while (--s->match_length != 0);

  001cd	83 46 60 ff	 add	 DWORD PTR [esi+96], -1
  001d1	75 bd		 jne	 SHORT $LL7@deflate_fa

; 1870 :                 s->strstart++;

  001d3	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1875 :                 s->match_length = 0;
; 1876 :                 s->ins_h = s->window[s->strstart];
; 1877 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart + 1]);
; 1878 : #if MIN_MATCH != 3
; 1879 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1880 : #endif
; 1881 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1882 :                  * matter since it will be recomputed at next deflate call.
; 1883 :                  */
; 1884 :             }
; 1885 :         } else {

  001d6	8d 5e 38	 lea	 ebx, DWORD PTR [esi+56]
  001d9	8b 4d fc	 mov	 ecx, DWORD PTR _bflush$1$[ebp]
  001dc	47		 inc	 edi
  001dd	89 7e 6c	 mov	 DWORD PTR [esi+108], edi
  001e0	e9 a0 00 00 00	 jmp	 $LN14@deflate_fa
$LN45@deflate_fa:

; 1871 :             } else
; 1872 : #endif
; 1873 :             {
; 1874 :                 s->strstart += s->match_length;

  001e5	8b 7e 6c	 mov	 edi, DWORD PTR [esi+108]

; 1875 :                 s->match_length = 0;
; 1876 :                 s->ins_h = s->window[s->strstart];
; 1877 :                 UPDATE_HASH(s, s->ins_h, s->window[s->strstart + 1]);
; 1878 : #if MIN_MATCH != 3
; 1879 :                 Call UPDATE_HASH() MIN_MATCH-3 more times
; 1880 : #endif
; 1881 :                 /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
; 1882 :                  * matter since it will be recomputed at next deflate call.
; 1883 :                  */
; 1884 :             }
; 1885 :         } else {

  001e8	8d 5e 38	 lea	 ebx, DWORD PTR [esi+56]
  001eb	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001ee	03 f9		 add	 edi, ecx
  001f0	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  001f3	89 7e 6c	 mov	 DWORD PTR [esi+108], edi
  001f6	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  001fd	0f b6 14 38	 movzx	 edx, BYTE PTR [eax+edi]
  00201	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00204	0f b6 44 38 01	 movzx	 eax, BYTE PTR [eax+edi+1]
  00209	d3 e2		 shl	 edx, cl
  0020b	8b 4d fc	 mov	 ecx, DWORD PTR _bflush$1$[ebp]
  0020e	33 d0		 xor	 edx, eax
  00210	23 56 54	 and	 edx, DWORD PTR [esi+84]
  00213	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00216	eb 6d		 jmp	 SHORT $LN14@deflate_fa
$LN13@deflate_fa:

; 1886 :             /* No match, output a literal byte */
; 1887 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 1888 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

  00218	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0021a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0021c	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0021f	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00225	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  0022b	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0022f	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00235	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0023b	41		 inc	 ecx
  0023c	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00242	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00246	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0024c	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00252	41		 inc	 ecx
  00253	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00259	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0025c	33 c9		 xor	 ecx, ecx
  0025e	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00264	0f b6 c2	 movzx	 eax, dl
  00267	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  0026f	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00275	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]
  0027b	0f 94 c1	 sete	 cl

; 1889 :             s->lookahead--;

  0027e	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 1890 :             s->strstart++;

  00281	ff 07		 inc	 DWORD PTR [edi]
  00283	8b 3f		 mov	 edi, DWORD PTR [edi]
$LN14@deflate_fa:

; 1891 :         }
; 1892 :         if (bflush) FLUSH_BLOCK(s, 0);

  00285	85 c9		 test	 ecx, ecx
  00287	74 37		 je	 SHORT $LN18@deflate_fa
  00289	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0028c	85 c0		 test	 eax, eax
  0028e	78 06		 js	 SHORT $LN26@deflate_fa
  00290	8b 13		 mov	 edx, DWORD PTR [ebx]
  00292	03 d0		 add	 edx, eax
  00294	eb 02		 jmp	 SHORT $LN27@deflate_fa
$LN26@deflate_fa:
  00296	33 d2		 xor	 edx, edx
$LN27@deflate_fa:
  00298	2b f8		 sub	 edi, eax
  0029a	8b ce		 mov	 ecx, esi
  0029c	6a 00		 push	 0
  0029e	57		 push	 edi
  0029f	e8 00 00 00 00	 call	 __tr_flush_block
  002a4	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002a7	83 c4 08	 add	 esp, 8
  002aa	8b 0e		 mov	 ecx, DWORD PTR [esi]
  002ac	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  002af	e8 00 00 00 00	 call	 _flush_pending
  002b4	8b 06		 mov	 eax, DWORD PTR [esi]
  002b6	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  002ba	0f 84 a9 00 00
	00		 je	 $LN39@deflate_fa
$LN18@deflate_fa:

; 1893 :     }

  002c0	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
  002c3	e9 48 fd ff ff	 jmp	 $LL2@deflate_fa
$LN38@deflate_fa:

; 1894 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  002c8	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  002cb	b8 02 00 00 00	 mov	 eax, 2
  002d0	3b c8		 cmp	 ecx, eax
  002d2	0f 42 c1	 cmovb	 eax, ecx
  002d5	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax

; 1895 :     if (flush == Z_FINISH) {

  002db	83 fa 04	 cmp	 edx, 4
  002de	75 40		 jne	 SHORT $LN19@deflate_fa

; 1896 :         FLUSH_BLOCK(s, 1);

  002e0	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  002e3	85 c0		 test	 eax, eax
  002e5	78 07		 js	 SHORT $LN30@deflate_fa
  002e7	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  002ea	03 d0		 add	 edx, eax
  002ec	eb 02		 jmp	 SHORT $LN31@deflate_fa
$LN30@deflate_fa:
  002ee	33 d2		 xor	 edx, edx
$LN31@deflate_fa:
  002f0	2b c8		 sub	 ecx, eax
  002f2	6a 01		 push	 1
  002f4	51		 push	 ecx
  002f5	8b ce		 mov	 ecx, esi
  002f7	e8 00 00 00 00	 call	 __tr_flush_block
  002fc	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  002ff	83 c4 08	 add	 esp, 8
  00302	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00304	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00307	e8 00 00 00 00	 call	 _flush_pending
  0030c	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0030e	33 c0		 xor	 eax, eax
  00310	5f		 pop	 edi

; 1901 :     return block_done;
; 1902 : }

  00311	5e		 pop	 esi
  00312	5b		 pop	 ebx
  00313	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00316	0f 95 c0	 setne	 al
  00319	83 c0 02	 add	 eax, 2
  0031c	8b e5		 mov	 esp, ebp
  0031e	5d		 pop	 ebp
  0031f	c3		 ret	 0
$LN19@deflate_fa:

; 1897 :         return finish_done;
; 1898 :     }
; 1899 :     if (s->sym_next)

  00320	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  00327	74 34		 je	 SHORT $LN22@deflate_fa

; 1900 :         FLUSH_BLOCK(s, 0);

  00329	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0032c	85 c0		 test	 eax, eax
  0032e	78 07		 js	 SHORT $LN32@deflate_fa
  00330	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00333	03 d0		 add	 edx, eax
  00335	eb 02		 jmp	 SHORT $LN33@deflate_fa
$LN32@deflate_fa:
  00337	33 d2		 xor	 edx, edx
$LN33@deflate_fa:
  00339	2b c8		 sub	 ecx, eax
  0033b	6a 00		 push	 0
  0033d	51		 push	 ecx
  0033e	8b ce		 mov	 ecx, esi
  00340	e8 00 00 00 00	 call	 __tr_flush_block
  00345	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00348	83 c4 08	 add	 esp, 8
  0034b	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0034d	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00350	e8 00 00 00 00	 call	 _flush_pending
  00355	8b 06		 mov	 eax, DWORD PTR [esi]
  00357	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0035b	74 0c		 je	 SHORT $LN39@deflate_fa
$LN22@deflate_fa:
  0035d	5f		 pop	 edi

; 1901 :     return block_done;
; 1902 : }

  0035e	5e		 pop	 esi
  0035f	b8 01 00 00 00	 mov	 eax, 1
  00364	5b		 pop	 ebx
  00365	8b e5		 mov	 esp, ebp
  00367	5d		 pop	 ebp
  00368	c3		 ret	 0
$LN39@deflate_fa:
  00369	5f		 pop	 edi
  0036a	5e		 pop	 esi
  0036b	33 c0		 xor	 eax, eax
  0036d	5b		 pop	 ebx
  0036e	8b e5		 mov	 esp, ebp
  00370	5d		 pop	 ebp
  00371	c3		 ret	 0
_deflate_fast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflate_slow
_TEXT	SEGMENT
tv1338 = -12						; size = 4
_max_insert$1$ = -8					; size = 4
tv1337 = -4						; size = 4
tv1302 = -4						; size = 4
$T1 = 8							; size = 4
_s$ = 8							; size = 4
_flush$ = 12						; size = 4
_deflate_slow PROC					; COMDAT

; 1910 : local block_state deflate_slow(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	8b 75 08	 mov	 esi, DWORD PTR _s$[ebp]
  0000b	57		 push	 edi
  0000c	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  0000f	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi
  00012	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
$LL2@deflate_sl:

; 1911 :     IPos hash_head;          /* head of hash chain */
; 1912 :     int bflush;              /* set if current block must be flushed */
; 1913 : 
; 1914 :     /* Process the input block. */
; 1915 :     for (;;) {
; 1916 :         /* Make sure that we always have enough lookahead, except
; 1917 :          * at the end of the input file. We need MAX_MATCH bytes
; 1918 :          * for the next match, plus MIN_MATCH bytes to insert the
; 1919 :          * string following the next match.
; 1920 :          */
; 1921 :         if (s->lookahead < MIN_LOOKAHEAD) {

  00015	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00018	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0001d	73 2c		 jae	 SHORT $LN10@deflate_sl

; 1922 :             fill_window(s);

  0001f	8b ce		 mov	 ecx, esi
  00021	e8 00 00 00 00	 call	 _fill_window

; 1923 :             if (s->lookahead < MIN_LOOKAHEAD && flush == Z_NO_FLUSH) {

  00026	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00029	3d 06 01 00 00	 cmp	 eax, 262		; 00000106H
  0002e	73 0d		 jae	 SHORT $LN9@deflate_sl
  00030	83 7d 0c 00	 cmp	 DWORD PTR _flush$[ebp], 0
  00034	0f 84 59 02 00
	00		 je	 $LN48@deflate_sl
  0003a	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
$LN9@deflate_sl:

; 1924 :                 return need_more;
; 1925 :             }
; 1926 :             if (s->lookahead == 0) break; /* flush the current block */

  0003d	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  00040	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi
  00043	85 c0		 test	 eax, eax
  00045	0f 84 1f 03 00
	00		 je	 $LN46@deflate_sl
$LN10@deflate_sl:

; 1927 :         }
; 1928 : 
; 1929 :         /* Insert the string window[strstart .. strstart + 2] in the
; 1930 :          * dictionary, and set hash_head to the head of the hash chain:
; 1931 :          */
; 1932 :         hash_head = NIL;

  0004b	33 db		 xor	 ebx, ebx

; 1933 :         if (s->lookahead >= MIN_MATCH) {

  0004d	83 f8 03	 cmp	 eax, 3
  00050	72 46		 jb	 SHORT $LN11@deflate_sl

; 1934 :             INSERT_STRING(s, s->strstart, hash_head);

  00052	8b 3f		 mov	 edi, DWORD PTR [edi]
  00054	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00057	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0005a	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  0005d	d3 e2		 shl	 edx, cl
  0005f	0f b6 44 38 02	 movzx	 eax, BYTE PTR [eax+edi+2]
  00064	23 7e 34	 and	 edi, DWORD PTR [esi+52]
  00067	33 d0		 xor	 edx, eax
  00069	23 56 54	 and	 edx, DWORD PTR [esi+84]
  0006c	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0006f	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00072	89 56 48	 mov	 DWORD PTR [esi+72], edx
  00075	66 8b 04 50	 mov	 ax, WORD PTR [eax+edx*2]
  00079	66 89 04 79	 mov	 WORD PTR [ecx+edi*2], ax
  0007d	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
  00080	8b 46 40	 mov	 eax, DWORD PTR [esi+64]
  00083	8b 17		 mov	 edx, DWORD PTR [edi]
  00085	8b ca		 mov	 ecx, edx
  00087	23 4e 34	 and	 ecx, DWORD PTR [esi+52]
  0008a	0f b7 1c 48	 movzx	 ebx, WORD PTR [eax+ecx*2]
  0008e	8b 4e 48	 mov	 ecx, DWORD PTR [esi+72]
  00091	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  00094	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
$LN11@deflate_sl:

; 1935 :         }
; 1936 : 
; 1937 :         /* Find the longest match, discarding those <= prev_length.
; 1938 :          */
; 1939 :         s->prev_length = s->match_length, s->prev_match = s->match_start;

  00098	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]

; 1940 :         s->match_length = MIN_MATCH-1;

  0009b	ba 02 00 00 00	 mov	 edx, 2
  000a0	8b 46 70	 mov	 eax, DWORD PTR [esi+112]
  000a3	89 4e 78	 mov	 DWORD PTR [esi+120], ecx
  000a6	89 46 64	 mov	 DWORD PTR [esi+100], eax
  000a9	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2

; 1941 : 
; 1942 :         if (hash_head != NIL && s->prev_length < s->max_lazy_match &&

  000b0	85 db		 test	 ebx, ebx
  000b2	74 52		 je	 SHORT $LN13@deflate_sl
  000b4	3b 8e 80 00 00
	00		 cmp	 ecx, DWORD PTR [esi+128]
  000ba	73 4a		 jae	 SHORT $LN13@deflate_sl
  000bc	8b 0f		 mov	 ecx, DWORD PTR [edi]
  000be	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]
  000c1	2b cb		 sub	 ecx, ebx
  000c3	2d 06 01 00 00	 sub	 eax, 262		; 00000106H
  000c8	3b c8		 cmp	 ecx, eax
  000ca	77 3a		 ja	 SHORT $LN13@deflate_sl

; 1943 :             s->strstart - hash_head <= MAX_DIST(s)) {
; 1944 :             /* To simplify the code, we prevent matches with the string
; 1945 :              * of window index 0 (in particular we have to avoid a match
; 1946 :              * of the string with itself at the start of the input file).
; 1947 :              */
; 1948 :             s->match_length = longest_match (s, hash_head);

  000cc	8b d3		 mov	 edx, ebx
  000ce	8b ce		 mov	 ecx, esi
  000d0	e8 00 00 00 00	 call	 _longest_match
  000d5	89 46 60	 mov	 DWORD PTR [esi+96], eax
  000d8	8b d0		 mov	 edx, eax

; 1949 :             /* longest_match() sets match_start */
; 1950 : 
; 1951 :             if (s->match_length <= 5 && (s->strategy == Z_FILTERED

  000da	83 f8 05	 cmp	 eax, 5
  000dd	77 27		 ja	 SHORT $LN13@deflate_sl
  000df	83 be 88 00 00
	00 01		 cmp	 DWORD PTR [esi+136], 1
  000e6	74 12		 je	 SHORT $LN14@deflate_sl
  000e8	83 f8 03	 cmp	 eax, 3
  000eb	75 19		 jne	 SHORT $LN13@deflate_sl
  000ed	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000f0	2b 46 70	 sub	 eax, DWORD PTR [esi+112]
  000f3	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  000f8	76 0c		 jbe	 SHORT $LN13@deflate_sl
$LN14@deflate_sl:

; 1952 : #if TOO_FAR <= 32767
; 1953 :                 || (s->match_length == MIN_MATCH &&
; 1954 :                     s->strstart - s->match_start > TOO_FAR)
; 1955 : #endif
; 1956 :                 )) {
; 1957 : 
; 1958 :                 /* If prev_match is also MIN_MATCH, match_start is garbage
; 1959 :                  * but we will ignore the current match anyway.
; 1960 :                  */
; 1961 :                 s->match_length = MIN_MATCH-1;

  000fa	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  00101	ba 02 00 00 00	 mov	 edx, 2
$LN13@deflate_sl:

; 1962 :             }
; 1963 :         }
; 1964 :         /* If there was a match at the previous step and the current
; 1965 :          * match is not better, output the previous match:
; 1966 :          */
; 1967 :         if (s->prev_length >= MIN_MATCH && s->match_length <= s->prev_length) {

  00106	8b 5e 78	 mov	 ebx, DWORD PTR [esi+120]
  00109	83 fb 03	 cmp	 ebx, 3
  0010c	0f 82 8a 01 00
	00		 jb	 $LN54@deflate_sl
  00112	3b d3		 cmp	 edx, ebx
  00114	0f 87 82 01 00
	00		 ja	 $LN54@deflate_sl

; 1968 :             uInt max_insert = s->strstart + s->lookahead - MIN_MATCH;

  0011a	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  0011d	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  00120	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00122	83 c0 fd	 add	 eax, -3			; fffffffdH
  00125	03 c1		 add	 eax, ecx
  00127	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi

; 1969 :             /* Do not insert strings in hash table beyond this. */
; 1970 : 
; 1971 :             check_match(s, s->strstart - 1, s->prev_match, s->prev_length);
; 1972 : 
; 1973 :             _tr_tally_dist(s, s->strstart - 1 - s->prev_match,

  0012a	66 2b 4e 64	 sub	 cx, WORD PTR [esi+100]
  0012e	80 eb 03	 sub	 bl, 3
  00131	66 49		 dec	 cx
  00133	89 45 f8	 mov	 DWORD PTR _max_insert$1$[ebp], eax
  00136	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0013c	89 5d fc	 mov	 DWORD PTR tv1302[ebp], ebx
  0013f	0f b7 d9	 movzx	 ebx, cx
  00142	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00148	88 1c 01	 mov	 BYTE PTR [ecx+eax], bl
  0014b	8b cb		 mov	 ecx, ebx
  0014d	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00153	81 c3 ff ff 00
	00		 add	 ebx, 65535		; 0000ffffH
  00159	8b 96 a0 16 00
	00		 mov	 edx, DWORD PTR [esi+5792]
  0015f	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00165	c1 e9 08	 shr	 ecx, 8
  00168	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0016b	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00171	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00177	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0017d	8b 55 fc	 mov	 edx, DWORD PTR tv1302[ebp]
  00180	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00183	b9 00 01 00 00	 mov	 ecx, 256		; 00000100H
  00188	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0018e	0f b6 c2	 movzx	 eax, dl
  00191	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00198	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  001a0	0f b7 c3	 movzx	 eax, bx
  001a3	66 3b d9	 cmp	 bx, cx
  001a6	73 08		 jae	 SHORT $LN30@deflate_sl
  001a8	8a 80 00 00 00
	00		 mov	 al, BYTE PTR __dist_code[eax]
  001ae	eb 09		 jmp	 SHORT $LN31@deflate_sl
$LN30@deflate_sl:
  001b0	c1 e8 07	 shr	 eax, 7
  001b3	8a 80 00 01 00
	00		 mov	 al, BYTE PTR __dist_code[eax+256]
$LN31@deflate_sl:
  001b9	0f b6 c0	 movzx	 eax, al
  001bc	66 ff 84 86 88
	09 00 00	 inc	 WORD PTR [esi+eax*4+2440]
  001c4	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]

; 1974 :                            s->prev_length - MIN_MATCH, bflush);
; 1975 : 
; 1976 :             /* Insert in hash table all strings up to the end of the match.
; 1977 :              * strstart - 1 and strstart are already inserted. If there is not
; 1978 :              * enough lookahead, the last two strings are not inserted in
; 1979 :              * the hash table.
; 1980 :              */
; 1981 :             s->lookahead -= s->prev_length - 1;

  001ca	8b 4e 78	 mov	 ecx, DWORD PTR [esi+120]
  001cd	89 45 f4	 mov	 DWORD PTR tv1338[ebp], eax
  001d0	8b 86 a4 16 00
	00		 mov	 eax, DWORD PTR [esi+5796]
  001d6	89 45 fc	 mov	 DWORD PTR tv1337[ebp], eax
  001d9	b8 01 00 00 00	 mov	 eax, 1
  001de	2b c1		 sub	 eax, ecx
  001e0	01 46 74	 add	 DWORD PTR [esi+116], eax

; 1982 :             s->prev_length -= 2;

  001e3	8d 41 fe	 lea	 eax, DWORD PTR [ecx-2]
  001e6	89 46 78	 mov	 DWORD PTR [esi+120], eax
  001e9	0f 1f 80 00 00
	00 00		 npad	 7
$LL7@deflate_sl:

; 1983 :             do {
; 1984 :                 if (++s->strstart <= max_insert) {

  001f0	8b 1f		 mov	 ebx, DWORD PTR [edi]
  001f2	43		 inc	 ebx
  001f3	89 1f		 mov	 DWORD PTR [edi], ebx
  001f5	3b 5d f8	 cmp	 ebx, DWORD PTR _max_insert$1$[ebp]
  001f8	77 3d		 ja	 SHORT $LN5@deflate_sl

; 1985 :                     INSERT_STRING(s, s->strstart, hash_head);

  001fa	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  001fd	8b 7e 48	 mov	 edi, DWORD PTR [esi+72]
  00200	8b 4e 58	 mov	 ecx, DWORD PTR [esi+88]
  00203	8b 56 34	 mov	 edx, DWORD PTR [esi+52]
  00206	0f b6 44 03 02	 movzx	 eax, BYTE PTR [ebx+eax+2]
  0020b	d3 e7		 shl	 edi, cl
  0020d	8b 4e 40	 mov	 ecx, DWORD PTR [esi+64]
  00210	33 f8		 xor	 edi, eax
  00212	23 7e 54	 and	 edi, DWORD PTR [esi+84]
  00215	23 d3		 and	 edx, ebx
  00217	8b 46 44	 mov	 eax, DWORD PTR [esi+68]
  0021a	89 7e 48	 mov	 DWORD PTR [esi+72], edi
  0021d	0f b7 04 78	 movzx	 eax, WORD PTR [eax+edi*2]
  00221	8b 7d 08	 mov	 edi, DWORD PTR $T1[ebp]
  00224	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00228	8b 56 48	 mov	 edx, DWORD PTR [esi+72]
  0022b	8b 4e 44	 mov	 ecx, DWORD PTR [esi+68]
  0022e	0f b7 07	 movzx	 eax, WORD PTR [edi]
  00231	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  00235	8b 1f		 mov	 ebx, DWORD PTR [edi]
$LN5@deflate_sl:

; 1986 :                 }
; 1987 :             } while (--s->prev_length != 0);

  00237	83 46 78 ff	 add	 DWORD PTR [esi+120], -1
  0023b	75 b3		 jne	 SHORT $LL7@deflate_sl

; 1988 :             s->match_available = 0;
; 1989 :             s->match_length = MIN_MATCH-1;
; 1990 :             s->strstart++;
; 1991 : 
; 1992 :             if (bflush) FLUSH_BLOCK(s, 0);

  0023d	8b 45 fc	 mov	 eax, DWORD PTR tv1337[ebp]
  00240	43		 inc	 ebx
  00241	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
  00248	c7 46 60 02 00
	00 00		 mov	 DWORD PTR [esi+96], 2
  0024f	89 5e 6c	 mov	 DWORD PTR [esi+108], ebx
  00252	39 45 f4	 cmp	 DWORD PTR tv1338[ebp], eax
  00255	0f 85 08 01 00
	00		 jne	 $LN21@deflate_sl
  0025b	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  0025e	85 c0		 test	 eax, eax
  00260	78 07		 js	 SHORT $LN32@deflate_sl
  00262	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00265	03 d0		 add	 edx, eax
  00267	eb 02		 jmp	 SHORT $LN33@deflate_sl
$LN32@deflate_sl:
  00269	33 d2		 xor	 edx, edx
$LN33@deflate_sl:
  0026b	2b d8		 sub	 ebx, eax
  0026d	8b ce		 mov	 ecx, esi
  0026f	6a 00		 push	 0
  00271	53		 push	 ebx
  00272	e8 00 00 00 00	 call	 __tr_flush_block
  00277	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0027a	83 c4 08	 add	 esp, 8
  0027d	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0027f	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00282	e8 00 00 00 00	 call	 _flush_pending
  00287	8b 06		 mov	 eax, DWORD PTR [esi]
  00289	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0028d	0f 85 d0 00 00
	00		 jne	 $LN21@deflate_sl
$LN48@deflate_sl:
  00293	5f		 pop	 edi

; 2029 :     return block_done;
; 2030 : }

  00294	5e		 pop	 esi
  00295	33 c0		 xor	 eax, eax
  00297	5b		 pop	 ebx
  00298	8b e5		 mov	 esp, ebp
  0029a	5d		 pop	 ebp
  0029b	c3		 ret	 0
$LN54@deflate_sl:

; 1993 : 
; 1994 :         } else if (s->match_available) {

  0029c	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  002a0	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  002a3	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi
  002a6	0f 84 a8 00 00
	00		 je	 $LN20@deflate_sl

; 1995 :             /* If there was no match at the previous position, output a
; 1996 :              * single literal. If there was a match but the current match
; 1997 :              * is longer, truncate the previous match to a single literal.
; 1998 :              */
; 1999 :             Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 2000 :             _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

  002ac	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  002af	8b 07		 mov	 eax, DWORD PTR [edi]
  002b1	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  002b5	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  002bb	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  002c1	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  002c5	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002cb	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  002d1	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  002d7	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  002db	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002e1	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  002e7	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  002ed	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  002f0	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  002f6	0f b6 c2	 movzx	 eax, dl
  002f9	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  00301	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00307	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 2001 :             if (bflush) {

  0030d	75 2d		 jne	 SHORT $LN22@deflate_sl

; 2002 :                 FLUSH_BLOCK_ONLY(s, 0);

  0030f	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00312	85 c9		 test	 ecx, ecx
  00314	78 07		 js	 SHORT $LN34@deflate_sl
  00316	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00319	03 d1		 add	 edx, ecx
  0031b	eb 02		 jmp	 SHORT $LN35@deflate_sl
$LN34@deflate_sl:
  0031d	33 d2		 xor	 edx, edx
$LN35@deflate_sl:
  0031f	8b 07		 mov	 eax, DWORD PTR [edi]
  00321	2b c1		 sub	 eax, ecx
  00323	8b ce		 mov	 ecx, esi
  00325	6a 00		 push	 0
  00327	50		 push	 eax
  00328	e8 00 00 00 00	 call	 __tr_flush_block
  0032d	8b 07		 mov	 eax, DWORD PTR [edi]
  0032f	83 c4 08	 add	 esp, 8
  00332	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00334	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00337	e8 00 00 00 00	 call	 _flush_pending
$LN22@deflate_sl:

; 2003 :             }
; 2004 :             s->strstart++;
; 2005 :             s->lookahead--;
; 2006 :             if (s->strm->avail_out == 0) return need_more;

  0033c	8b 06		 mov	 eax, DWORD PTR [esi]
  0033e	ff 07		 inc	 DWORD PTR [edi]
  00340	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00343	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00347	0f 84 46 ff ff
	ff		 je	 $LN48@deflate_sl

; 2014 :         }
; 2015 :     }

  0034d	8b df		 mov	 ebx, edi
  0034f	e9 c1 fc ff ff	 jmp	 $LL2@deflate_sl
$LN20@deflate_sl:

; 2007 :         } else {
; 2008 :             /* There is no previous match to compare with, wait for
; 2009 :              * the next step to decide.
; 2010 :              */
; 2011 :             s->match_available = 1;
; 2012 :             s->strstart++;

  00354	ff 07		 inc	 DWORD PTR [edi]

; 2013 :             s->lookahead--;

  00356	ff 4e 74	 dec	 DWORD PTR [esi+116]
  00359	c7 46 68 01 00
	00 00		 mov	 DWORD PTR [esi+104], 1
  00360	89 7d 08	 mov	 DWORD PTR $T1[ebp], edi
$LN21@deflate_sl:

; 2014 :         }
; 2015 :     }

  00363	8b df		 mov	 ebx, edi
  00365	e9 ab fc ff ff	 jmp	 $LL2@deflate_sl
$LN46@deflate_sl:

; 2016 :     Assert (flush != Z_NO_FLUSH, "no flush?");
; 2017 :     if (s->match_available) {

  0036a	83 7e 68 00	 cmp	 DWORD PTR [esi+104], 0
  0036e	74 5c		 je	 SHORT $LN56@deflate_sl

; 2018 :         Tracevv((stderr,"%c", s->window[s->strstart - 1]));
; 2019 :         _tr_tally_lit(s, s->window[s->strstart - 1], bflush);

  00370	8b 4e 38	 mov	 ecx, DWORD PTR [esi+56]
  00373	8b 03		 mov	 eax, DWORD PTR [ebx]
  00375	8a 54 01 ff	 mov	 dl, BYTE PTR [ecx+eax-1]
  00379	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0037f	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00385	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00389	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0038f	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00395	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0039b	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0039f	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  003a5	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  003ab	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  003b1	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  003b4	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  003ba	0f b6 c2	 movzx	 eax, dl
  003bd	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2020 :         s->match_available = 0;

  003c5	c7 46 68 00 00
	00 00		 mov	 DWORD PTR [esi+104], 0
$LN56@deflate_sl:

; 2021 :     }
; 2022 :     s->insert = s->strstart < MIN_MATCH-1 ? s->strstart : MIN_MATCH-1;

  003cc	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  003ce	b8 02 00 00 00	 mov	 eax, 2
  003d3	3b c8		 cmp	 ecx, eax
  003d5	0f 42 c1	 cmovb	 eax, ecx

; 2023 :     if (flush == Z_FINISH) {

  003d8	83 7d 0c 04	 cmp	 DWORD PTR _flush$[ebp], 4
  003dc	89 86 b4 16 00
	00		 mov	 DWORD PTR [esi+5812], eax
  003e2	75 40		 jne	 SHORT $LN25@deflate_sl

; 2024 :         FLUSH_BLOCK(s, 1);

  003e4	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  003e7	85 c0		 test	 eax, eax
  003e9	78 07		 js	 SHORT $LN38@deflate_sl
  003eb	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  003ee	03 d0		 add	 edx, eax
  003f0	eb 02		 jmp	 SHORT $LN39@deflate_sl
$LN38@deflate_sl:
  003f2	33 d2		 xor	 edx, edx
$LN39@deflate_sl:
  003f4	2b c8		 sub	 ecx, eax
  003f6	6a 01		 push	 1
  003f8	51		 push	 ecx
  003f9	8b ce		 mov	 ecx, esi
  003fb	e8 00 00 00 00	 call	 __tr_flush_block
  00400	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00403	83 c4 08	 add	 esp, 8
  00406	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00408	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0040b	e8 00 00 00 00	 call	 _flush_pending
  00410	8b 06		 mov	 eax, DWORD PTR [esi]
  00412	33 c9		 xor	 ecx, ecx
  00414	5f		 pop	 edi

; 2029 :     return block_done;
; 2030 : }

  00415	5e		 pop	 esi
  00416	5b		 pop	 ebx
  00417	39 48 10	 cmp	 DWORD PTR [eax+16], ecx
  0041a	0f 95 c1	 setne	 cl
  0041d	8d 41 02	 lea	 eax, DWORD PTR [ecx+2]
  00420	8b e5		 mov	 esp, ebp
  00422	5d		 pop	 ebp
  00423	c3		 ret	 0
$LN25@deflate_sl:

; 2025 :         return finish_done;
; 2026 :     }
; 2027 :     if (s->sym_next)

  00424	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0042b	74 38		 je	 SHORT $LN28@deflate_sl

; 2028 :         FLUSH_BLOCK(s, 0);

  0042d	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00430	85 c0		 test	 eax, eax
  00432	78 07		 js	 SHORT $LN40@deflate_sl
  00434	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00437	03 d0		 add	 edx, eax
  00439	eb 02		 jmp	 SHORT $LN41@deflate_sl
$LN40@deflate_sl:
  0043b	33 d2		 xor	 edx, edx
$LN41@deflate_sl:
  0043d	2b c8		 sub	 ecx, eax
  0043f	6a 00		 push	 0
  00441	51		 push	 ecx
  00442	8b ce		 mov	 ecx, esi
  00444	e8 00 00 00 00	 call	 __tr_flush_block
  00449	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0044c	83 c4 08	 add	 esp, 8
  0044f	89 4e 5c	 mov	 DWORD PTR [esi+92], ecx
  00452	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00454	e8 00 00 00 00	 call	 _flush_pending
  00459	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0045b	83 79 10 00	 cmp	 DWORD PTR [ecx+16], 0
  0045f	0f 84 2e fe ff
	ff		 je	 $LN48@deflate_sl
$LN28@deflate_sl:
  00465	5f		 pop	 edi

; 2029 :     return block_done;
; 2030 : }

  00466	5e		 pop	 esi
  00467	b8 01 00 00 00	 mov	 eax, 1
  0046c	5b		 pop	 ebx
  0046d	8b e5		 mov	 esp, ebp
  0046f	5d		 pop	 ebp
  00470	c3		 ret	 0
_deflate_slow ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflate_rle
_TEXT	SEGMENT
_flush$1$ = -4						; size = 4
_deflate_rle PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2038 : local block_state deflate_rle(deflate_state *s, int flush) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	89 55 fc	 mov	 DWORD PTR _flush$1$[ebp], edx
  0000b	57		 push	 edi
  0000c	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  0000f	90		 npad	 1
$LL2@deflate_rl:

; 2039 :     int bflush;             /* set if current block must be flushed */
; 2040 :     uInt prev;              /* byte at distance one to match */
; 2041 :     Bytef *scan, *strend;   /* scan goes up to strend for length of run */
; 2042 : 
; 2043 :     for (;;) {
; 2044 :         /* Make sure that we always have enough lookahead, except
; 2045 :          * at the end of the input file. We need MAX_MATCH bytes
; 2046 :          * for the longest run, plus one for the unrolled loop.
; 2047 :          */
; 2048 :         if (s->lookahead <= MAX_MATCH) {

  00010	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00013	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  00018	77 29		 ja	 SHORT $LN10@deflate_rl

; 2049 :             fill_window(s);

  0001a	8b ce		 mov	 ecx, esi
  0001c	e8 00 00 00 00	 call	 _fill_window

; 2050 :             if (s->lookahead <= MAX_MATCH && flush == Z_NO_FLUSH) {

  00021	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  00024	8b df		 mov	 ebx, edi
  00026	8b 4d fc	 mov	 ecx, DWORD PTR _flush$1$[ebp]
  00029	3d 02 01 00 00	 cmp	 eax, 258		; 00000102H
  0002e	77 0b		 ja	 SHORT $LN9@deflate_rl
  00030	85 c9		 test	 ecx, ecx
  00032	0f 84 c2 01 00
	00		 je	 $LN37@deflate_rl
  00038	8d 5e 6c	 lea	 ebx, DWORD PTR [esi+108]
$LN9@deflate_rl:

; 2051 :                 return need_more;
; 2052 :             }
; 2053 :             if (s->lookahead == 0) break; /* flush the current block */

  0003b	85 c0		 test	 eax, eax
  0003d	0f 84 c0 01 00
	00		 je	 $LN36@deflate_rl
$LN10@deflate_rl:

; 2054 :         }
; 2055 : 
; 2056 :         /* See how many times the previous byte repeats */
; 2057 :         s->match_length = 0;

  00043	33 d2		 xor	 edx, edx
  00045	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0

; 2058 :         if (s->lookahead >= MIN_MATCH && s->strstart > 0) {

  0004c	83 f8 03	 cmp	 eax, 3
  0004f	72 69		 jb	 SHORT $LN14@deflate_rl
  00051	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00053	85 c9		 test	 ecx, ecx
  00055	74 63		 je	 SHORT $LN14@deflate_rl

; 2059 :             scan = s->window + s->strstart - 1;

  00057	8b 7e 38	 mov	 edi, DWORD PTR [esi+56]
  0005a	03 f9		 add	 edi, ecx

; 2060 :             prev = *scan;
; 2061 :             if (prev == *++scan && prev == *++scan && prev == *++scan) {

  0005c	8b c7		 mov	 eax, edi
  0005e	8a 4f ff	 mov	 cl, BYTE PTR [edi-1]
  00061	3a 08		 cmp	 cl, BYTE PTR [eax]
  00063	75 55		 jne	 SHORT $LN14@deflate_rl
  00065	3a 48 01	 cmp	 cl, BYTE PTR [eax+1]
  00068	75 50		 jne	 SHORT $LN14@deflate_rl
  0006a	83 c0 02	 add	 eax, 2
  0006d	3a 08		 cmp	 cl, BYTE PTR [eax]
  0006f	75 49		 jne	 SHORT $LN14@deflate_rl

; 2062 :                 strend = s->window + s->strstart + MAX_MATCH;

  00071	8d 97 02 01 00
	00		 lea	 edx, DWORD PTR [edi+258]
$LL7@deflate_rl:

; 2063 :                 do {
; 2064 :                 } while (prev == *++scan && prev == *++scan &&
; 2065 :                          prev == *++scan && prev == *++scan &&
; 2066 :                          prev == *++scan && prev == *++scan &&
; 2067 :                          prev == *++scan && prev == *++scan &&

  00077	40		 inc	 eax
  00078	3a 08		 cmp	 cl, BYTE PTR [eax]
  0007a	75 27		 jne	 SHORT $LN13@deflate_rl
  0007c	40		 inc	 eax
  0007d	3a 08		 cmp	 cl, BYTE PTR [eax]
  0007f	75 22		 jne	 SHORT $LN13@deflate_rl
  00081	40		 inc	 eax
  00082	3a 08		 cmp	 cl, BYTE PTR [eax]
  00084	75 1d		 jne	 SHORT $LN13@deflate_rl
  00086	40		 inc	 eax
  00087	3a 08		 cmp	 cl, BYTE PTR [eax]
  00089	75 18		 jne	 SHORT $LN13@deflate_rl
  0008b	40		 inc	 eax
  0008c	3a 08		 cmp	 cl, BYTE PTR [eax]
  0008e	75 13		 jne	 SHORT $LN13@deflate_rl
  00090	40		 inc	 eax
  00091	3a 08		 cmp	 cl, BYTE PTR [eax]
  00093	75 0e		 jne	 SHORT $LN13@deflate_rl
  00095	40		 inc	 eax
  00096	3a 08		 cmp	 cl, BYTE PTR [eax]
  00098	75 09		 jne	 SHORT $LN13@deflate_rl
  0009a	40		 inc	 eax
  0009b	3a 08		 cmp	 cl, BYTE PTR [eax]
  0009d	75 04		 jne	 SHORT $LN13@deflate_rl
  0009f	3b c2		 cmp	 eax, edx
  000a1	72 d4		 jb	 SHORT $LL7@deflate_rl
$LN13@deflate_rl:

; 2068 :                          scan < strend);
; 2069 :                 s->match_length = MAX_MATCH - (uInt)(strend - scan);

  000a3	2b c2		 sub	 eax, edx
  000a5	8d 90 02 01 00
	00		 lea	 edx, DWORD PTR [eax+258]

; 2070 :                 if (s->match_length > s->lookahead)

  000ab	8b 46 74	 mov	 eax, DWORD PTR [esi+116]
  000ae	89 56 60	 mov	 DWORD PTR [esi+96], edx
  000b1	3b d0		 cmp	 edx, eax
  000b3	76 05		 jbe	 SHORT $LN14@deflate_rl

; 2071 :                     s->match_length = s->lookahead;

  000b5	89 46 60	 mov	 DWORD PTR [esi+96], eax
  000b8	8b d0		 mov	 edx, eax
$LN14@deflate_rl:

; 2072 :             }
; 2073 :             Assert(scan <= s->window + (uInt)(s->window_size - 1),
; 2074 :                    "wild scan");
; 2075 :         }
; 2076 : 
; 2077 :         /* Emit match if have run of MIN_MATCH or longer, else emit literal */
; 2078 :         if (s->match_length >= MIN_MATCH) {

  000ba	8d 7e 6c	 lea	 edi, DWORD PTR [esi+108]
  000bd	83 fa 03	 cmp	 edx, 3
  000c0	0f 82 83 00 00
	00		 jb	 $LN15@deflate_rl

; 2079 :             check_match(s, s->strstart, s->strstart - 1, s->match_length);
; 2080 : 
; 2081 :             _tr_tally_dist(s, 1, s->match_length - MIN_MATCH, bflush);

  000c6	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000cc	80 ea 03	 sub	 dl, 3
  000cf	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000d5	c6 04 01 01	 mov	 BYTE PTR [ecx+eax], 1
  000d9	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000df	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000e5	41		 inc	 ecx
  000e6	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  000ec	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  000f0	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  000f6	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  000fc	41		 inc	 ecx
  000fd	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00103	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00106	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0010c	0f b6 c2	 movzx	 eax, dl
  0010f	33 d2		 xor	 edx, edx
  00111	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR __length_code[eax]
  00118	66 ff 84 86 98
	04 00 00	 inc	 WORD PTR [esi+eax*4+1176]
  00120	66 ff 86 88 09
	00 00		 inc	 WORD PTR [esi+2440]
  00127	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  0012d	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 2082 : 
; 2083 :             s->lookahead -= s->match_length;

  00133	8b 4e 60	 mov	 ecx, DWORD PTR [esi+96]
  00136	0f 94 c2	 sete	 dl

; 2084 :             s->strstart += s->match_length;
; 2085 :             s->match_length = 0;

  00139	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  00140	29 4e 74	 sub	 DWORD PTR [esi+116], ecx
  00143	03 0f		 add	 ecx, DWORD PTR [edi]
  00145	89 0f		 mov	 DWORD PTR [edi], ecx

; 2086 :         } else {

  00147	eb 6e		 jmp	 SHORT $LN16@deflate_rl
$LN15@deflate_rl:

; 2087 :             /* No match, output a literal byte */
; 2088 :             Tracevv((stderr,"%c", s->window[s->strstart]));
; 2089 :             _tr_tally_lit(s, s->window[s->strstart], bflush);

  00149	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0014b	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  0014e	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  00151	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00157	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0015d	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00161	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00167	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0016d	41		 inc	 ecx
  0016e	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  00174	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00178	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0017e	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00184	41		 inc	 ecx
  00185	89 8e a0 16 00
	00		 mov	 DWORD PTR [esi+5792], ecx
  0018b	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  0018e	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00194	0f b6 c2	 movzx	 eax, dl
  00197	33 d2		 xor	 edx, edx
  00199	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]
  001a1	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  001a7	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]
  001ad	0f 94 c2	 sete	 dl

; 2090 :             s->lookahead--;

  001b0	ff 4e 74	 dec	 DWORD PTR [esi+116]

; 2091 :             s->strstart++;

  001b3	ff 07		 inc	 DWORD PTR [edi]
  001b5	8b 0f		 mov	 ecx, DWORD PTR [edi]
$LN16@deflate_rl:

; 2092 :         }
; 2093 :         if (bflush) FLUSH_BLOCK(s, 0);

  001b7	8b df		 mov	 ebx, edi
  001b9	85 d2		 test	 edx, edx
  001bb	0f 84 4f fe ff
	ff		 je	 $LL2@deflate_rl
  001c1	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  001c4	85 c0		 test	 eax, eax
  001c6	78 07		 js	 SHORT $LN26@deflate_rl
  001c8	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  001cb	03 d0		 add	 edx, eax
  001cd	eb 02		 jmp	 SHORT $LN27@deflate_rl
$LN26@deflate_rl:
  001cf	33 d2		 xor	 edx, edx
$LN27@deflate_rl:
  001d1	2b c8		 sub	 ecx, eax
  001d3	6a 00		 push	 0
  001d5	51		 push	 ecx
  001d6	8b ce		 mov	 ecx, esi
  001d8	e8 00 00 00 00	 call	 __tr_flush_block
  001dd	8b 03		 mov	 eax, DWORD PTR [ebx]
  001df	83 c4 08	 add	 esp, 8
  001e2	8b 0e		 mov	 ecx, DWORD PTR [esi]
  001e4	8b fb		 mov	 edi, ebx
  001e6	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  001e9	e8 00 00 00 00	 call	 _flush_pending
  001ee	8b 06		 mov	 eax, DWORD PTR [esi]
  001f0	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  001f4	0f 85 16 fe ff
	ff		 jne	 $LL2@deflate_rl
$LN37@deflate_rl:
  001fa	5f		 pop	 edi

; 2102 :     return block_done;
; 2103 : }

  001fb	5e		 pop	 esi
  001fc	33 c0		 xor	 eax, eax
  001fe	5b		 pop	 ebx
  001ff	8b e5		 mov	 esp, ebp
  00201	5d		 pop	 ebp
  00202	c3		 ret	 0
$LN36@deflate_rl:

; 2094 :     }
; 2095 :     s->insert = 0;

  00203	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2096 :     if (flush == Z_FINISH) {

  0020d	83 f9 04	 cmp	 ecx, 4
  00210	75 41		 jne	 SHORT $LN19@deflate_rl

; 2097 :         FLUSH_BLOCK(s, 1);

  00212	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00215	85 c9		 test	 ecx, ecx
  00217	78 07		 js	 SHORT $LN28@deflate_rl
  00219	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0021c	03 d1		 add	 edx, ecx
  0021e	eb 02		 jmp	 SHORT $LN29@deflate_rl
$LN28@deflate_rl:
  00220	33 d2		 xor	 edx, edx
$LN29@deflate_rl:
  00222	8b 03		 mov	 eax, DWORD PTR [ebx]
  00224	2b c1		 sub	 eax, ecx
  00226	8b ce		 mov	 ecx, esi
  00228	6a 01		 push	 1
  0022a	50		 push	 eax
  0022b	e8 00 00 00 00	 call	 __tr_flush_block
  00230	8b 03		 mov	 eax, DWORD PTR [ebx]
  00232	83 c4 08	 add	 esp, 8
  00235	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00237	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0023a	e8 00 00 00 00	 call	 _flush_pending
  0023f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00241	33 c0		 xor	 eax, eax
  00243	5f		 pop	 edi

; 2102 :     return block_done;
; 2103 : }

  00244	5e		 pop	 esi
  00245	5b		 pop	 ebx
  00246	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  00249	0f 95 c0	 setne	 al
  0024c	83 c0 02	 add	 eax, 2
  0024f	8b e5		 mov	 esp, ebp
  00251	5d		 pop	 ebp
  00252	c3		 ret	 0
$LN19@deflate_rl:

; 2098 :         return finish_done;
; 2099 :     }
; 2100 :     if (s->sym_next)

  00253	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0025a	74 39		 je	 SHORT $LN22@deflate_rl

; 2101 :         FLUSH_BLOCK(s, 0);

  0025c	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  0025f	85 c9		 test	 ecx, ecx
  00261	78 07		 js	 SHORT $LN30@deflate_rl
  00263	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00266	03 d1		 add	 edx, ecx
  00268	eb 02		 jmp	 SHORT $LN31@deflate_rl
$LN30@deflate_rl:
  0026a	33 d2		 xor	 edx, edx
$LN31@deflate_rl:
  0026c	8b 03		 mov	 eax, DWORD PTR [ebx]
  0026e	2b c1		 sub	 eax, ecx
  00270	8b ce		 mov	 ecx, esi
  00272	6a 00		 push	 0
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 __tr_flush_block
  0027a	8b 03		 mov	 eax, DWORD PTR [ebx]
  0027c	83 c4 08	 add	 esp, 8
  0027f	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00281	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00284	e8 00 00 00 00	 call	 _flush_pending
  00289	8b 06		 mov	 eax, DWORD PTR [esi]
  0028b	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  0028f	0f 84 65 ff ff
	ff		 je	 $LN37@deflate_rl
$LN22@deflate_rl:
  00295	5f		 pop	 edi

; 2102 :     return block_done;
; 2103 : }

  00296	5e		 pop	 esi
  00297	b8 01 00 00 00	 mov	 eax, 1
  0029c	5b		 pop	 ebx
  0029d	8b e5		 mov	 esp, ebp
  0029f	5d		 pop	 ebp
  002a0	c3		 ret	 0
_deflate_rle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\deflate.c
;	COMDAT _deflate_huff
_TEXT	SEGMENT
_deflate_huff PROC					; COMDAT
; _s$ = ecx
; _flush$ = edx

; 2109 : local block_state deflate_huff(deflate_state *s, int flush) {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b fa		 mov	 edi, edx
  00004	8b f1		 mov	 esi, ecx
$LL2@deflate_hu:

; 2110 :     int bflush;             /* set if current block must be flushed */
; 2111 : 
; 2112 :     for (;;) {
; 2113 :         /* Make sure that we have a literal to write. */
; 2114 :         if (s->lookahead == 0) {

  00006	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  0000a	75 11		 jne	 SHORT $LN6@deflate_hu

; 2115 :             fill_window(s);

  0000c	8b ce		 mov	 ecx, esi
  0000e	e8 00 00 00 00	 call	 _fill_window

; 2116 :             if (s->lookahead == 0) {

  00013	83 7e 74 00	 cmp	 DWORD PTR [esi+116], 0
  00017	0f 84 b5 00 00
	00		 je	 $LN23@deflate_hu
$LN6@deflate_hu:

; 2118 :                     return need_more;
; 2119 :                 break;      /* flush the current block */
; 2120 :             }
; 2121 :         }
; 2122 : 
; 2123 :         /* Output a literal byte */
; 2124 :         s->match_length = 0;
; 2125 :         Tracevv((stderr,"%c", s->window[s->strstart]));
; 2126 :         _tr_tally_lit(s, s->window[s->strstart], bflush);

  0001d	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  00020	8b 46 38	 mov	 eax, DWORD PTR [esi+56]
  00023	c7 46 60 00 00
	00 00		 mov	 DWORD PTR [esi+96], 0
  0002a	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  0002d	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00033	8b 8e 98 16 00
	00		 mov	 ecx, DWORD PTR [esi+5784]
  00039	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  0003d	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00043	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  00049	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  0004f	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0
  00053	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  00059	8b 8e a0 16 00
	00		 mov	 ecx, DWORD PTR [esi+5792]
  0005f	8b 86 98 16 00
	00		 mov	 eax, DWORD PTR [esi+5784]
  00065	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00068	ff 86 a0 16 00
	00		 inc	 DWORD PTR [esi+5792]
  0006e	0f b6 c2	 movzx	 eax, dl
  00071	66 ff 84 86 94
	00 00 00	 inc	 WORD PTR [esi+eax*4+148]

; 2127 :         s->lookahead--;
; 2128 :         s->strstart++;

  00079	8b 4e 6c	 mov	 ecx, DWORD PTR [esi+108]
  0007c	ff 4e 74	 dec	 DWORD PTR [esi+116]
  0007f	41		 inc	 ecx
  00080	8b 86 a0 16 00
	00		 mov	 eax, DWORD PTR [esi+5792]
  00086	89 4e 6c	 mov	 DWORD PTR [esi+108], ecx
  00089	3b 86 a4 16 00
	00		 cmp	 eax, DWORD PTR [esi+5796]

; 2129 :         if (bflush) FLUSH_BLOCK(s, 0);

  0008f	0f 85 71 ff ff
	ff		 jne	 $LL2@deflate_hu
  00095	8b 46 5c	 mov	 eax, DWORD PTR [esi+92]
  00098	85 c0		 test	 eax, eax
  0009a	78 07		 js	 SHORT $LN15@deflate_hu
  0009c	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  0009f	03 d0		 add	 edx, eax
  000a1	eb 02		 jmp	 SHORT $LN16@deflate_hu
$LN15@deflate_hu:
  000a3	33 d2		 xor	 edx, edx
$LN16@deflate_hu:
  000a5	2b c8		 sub	 ecx, eax
  000a7	6a 00		 push	 0
  000a9	51		 push	 ecx
  000aa	8b ce		 mov	 ecx, esi
  000ac	e8 00 00 00 00	 call	 __tr_flush_block
  000b1	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000b4	83 c4 08	 add	 esp, 8
  000b7	8b 0e		 mov	 ecx, DWORD PTR [esi]
  000b9	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  000bc	e8 00 00 00 00	 call	 _flush_pending
  000c1	8b 06		 mov	 eax, DWORD PTR [esi]
  000c3	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  000c7	0f 85 39 ff ff
	ff		 jne	 $LL2@deflate_hu
$LN24@deflate_hu:
  000cd	5f		 pop	 edi
  000ce	33 c0		 xor	 eax, eax

; 2139 : }

  000d0	5e		 pop	 esi
  000d1	c3		 ret	 0
$LN23@deflate_hu:

; 2117 :                 if (flush == Z_NO_FLUSH)

  000d2	85 ff		 test	 edi, edi
  000d4	74 f7		 je	 SHORT $LN24@deflate_hu

; 2130 :     }
; 2131 :     s->insert = 0;

  000d6	c7 86 b4 16 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+5812], 0

; 2132 :     if (flush == Z_FINISH) {

  000e0	83 ff 04	 cmp	 edi, 4
  000e3	75 3f		 jne	 SHORT $LN10@deflate_hu

; 2133 :         FLUSH_BLOCK(s, 1);

  000e5	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  000e8	85 c9		 test	 ecx, ecx
  000ea	78 07		 js	 SHORT $LN17@deflate_hu
  000ec	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  000ef	03 d1		 add	 edx, ecx
  000f1	eb 02		 jmp	 SHORT $LN18@deflate_hu
$LN17@deflate_hu:
  000f3	33 d2		 xor	 edx, edx
$LN18@deflate_hu:
  000f5	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  000f8	2b c1		 sub	 eax, ecx
  000fa	8b ce		 mov	 ecx, esi
  000fc	6a 01		 push	 1
  000fe	50		 push	 eax
  000ff	e8 00 00 00 00	 call	 __tr_flush_block
  00104	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00107	83 c4 08	 add	 esp, 8
  0010a	8b 0e		 mov	 ecx, DWORD PTR [esi]
  0010c	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  0010f	e8 00 00 00 00	 call	 _flush_pending
  00114	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00116	33 c0		 xor	 eax, eax
  00118	5f		 pop	 edi

; 2139 : }

  00119	5e		 pop	 esi
  0011a	39 41 10	 cmp	 DWORD PTR [ecx+16], eax
  0011d	0f 95 c0	 setne	 al
  00120	83 c0 02	 add	 eax, 2
  00123	c3		 ret	 0
$LN10@deflate_hu:

; 2134 :         return finish_done;
; 2135 :     }
; 2136 :     if (s->sym_next)

  00124	83 be a0 16 00
	00 00		 cmp	 DWORD PTR [esi+5792], 0
  0012b	74 3b		 je	 SHORT $LN13@deflate_hu

; 2137 :         FLUSH_BLOCK(s, 0);

  0012d	8b 4e 5c	 mov	 ecx, DWORD PTR [esi+92]
  00130	85 c9		 test	 ecx, ecx
  00132	78 07		 js	 SHORT $LN19@deflate_hu
  00134	8b 56 38	 mov	 edx, DWORD PTR [esi+56]
  00137	03 d1		 add	 edx, ecx
  00139	eb 02		 jmp	 SHORT $LN20@deflate_hu
$LN19@deflate_hu:
  0013b	33 d2		 xor	 edx, edx
$LN20@deflate_hu:
  0013d	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  00140	2b c1		 sub	 eax, ecx
  00142	8b ce		 mov	 ecx, esi
  00144	6a 00		 push	 0
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 __tr_flush_block
  0014c	8b 46 6c	 mov	 eax, DWORD PTR [esi+108]
  0014f	83 c4 08	 add	 esp, 8
  00152	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00154	89 46 5c	 mov	 DWORD PTR [esi+92], eax
  00157	e8 00 00 00 00	 call	 _flush_pending
  0015c	8b 06		 mov	 eax, DWORD PTR [esi]
  0015e	83 78 10 00	 cmp	 DWORD PTR [eax+16], 0
  00162	0f 84 65 ff ff
	ff		 je	 $LN24@deflate_hu
$LN13@deflate_hu:
  00168	5f		 pop	 edi

; 2138 :     return block_done;

  00169	b8 01 00 00 00	 mov	 eax, 1

; 2139 : }

  0016e	5e		 pop	 esi
  0016f	c3		 ret	 0
_deflate_huff ENDP
_TEXT	ENDS
END
