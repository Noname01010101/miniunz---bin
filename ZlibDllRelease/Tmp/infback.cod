; Listing generated by Microsoft (R) Optimizing Compiler Version 19.39.33321.0 

	TITLE	c:\users\pichau\documents\boldergarte\softwares\libraries\downloads\zlib\zlib-develop\zlib-develop\contrib\vstudio\vc17\x86\zlibdllrelease\tmp\infback.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@PJCBIDD@invalid?5block?5type@		; `string'
PUBLIC	??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ ; `string'
PUBLIC	??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ ; `string'
PUBLIC	??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@	; `string'
PUBLIC	??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ ; `string'
PUBLIC	??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ ; `string'
PUBLIC	??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ ; `string'
PUBLIC	??_C@_0BG@GMDFCBGP@invalid?5distances?5set@	; `string'
PUBLIC	??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ ; `string'
PUBLIC	??_C@_0BG@LBKINIKP@invalid?5distance?5code@	; `string'
PUBLIC	??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ ; `string'
;	COMDAT ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@
CONST	SEGMENT
??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@ DB 'invalid distanc'
	DB	'e too far back', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LBKINIKP@invalid?5distance?5code@
CONST	SEGMENT
??_C@_0BG@LBKINIKP@invalid?5distance?5code@ DB 'invalid distance code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@
CONST	SEGMENT
??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@ DB 'invalid literal/le'
	DB	'ngth code', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@
CONST	SEGMENT
??_C@_0BG@GMDFCBGP@invalid?5distances?5set@ DB 'invalid distances set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@
CONST	SEGMENT
??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@ DB 'invalid literal/le'
	DB	'ngths set', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@
CONST	SEGMENT
??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@ DB 'invalid c'
	DB	'ode -- missing end-of-block', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
CONST	SEGMENT
??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@ DB 'invalid bit length r'
	DB	'epeat', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@
CONST	SEGMENT
??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@ DB 'invalid code lengths '
	DB	'set', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@
CONST	SEGMENT
??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@ DB 'too many len'
	DB	'gth or distance symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@
CONST	SEGMENT
??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@ DB 'invalid stored bl'
	DB	'ock lengths', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PJCBIDD@invalid?5block?5type@
CONST	SEGMENT
??_C@_0BD@PJCBIDD@invalid?5block?5type@ DB 'invalid block type', 00H ; `string'
?lenfix@?1??fixedtables@@9@9 DB 060H			; `fixedtables'::`2'::lenfix
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c0H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a0H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e0H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	090H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d0H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b0H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f0H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c8H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a8H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e8H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	098H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d8H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b8H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f8H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c4H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a4H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e4H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	094H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d4H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b4H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f4H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0ccH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0acH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0ecH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09cH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0dcH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bcH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fcH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c2H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a2H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e2H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	092H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d2H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b2H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f2H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0caH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0aaH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0eaH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09aH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0daH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0baH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0faH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c6H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a6H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e6H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	096H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d6H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b6H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f6H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0ceH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0aeH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0eeH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09eH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0deH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0beH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0feH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	050H
	DB	00H
	DB	08H
	DW	010H
	DB	014H
	DB	08H
	DW	073H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	070H
	DB	00H
	DB	08H
	DW	030H
	DB	00H
	DB	09H
	DW	0c1H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	060H
	DB	00H
	DB	08H
	DW	020H
	DB	00H
	DB	09H
	DW	0a1H
	DB	00H
	DB	08H
	DW	00H
	DB	00H
	DB	08H
	DW	080H
	DB	00H
	DB	08H
	DW	040H
	DB	00H
	DB	09H
	DW	0e1H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	058H
	DB	00H
	DB	08H
	DW	018H
	DB	00H
	DB	09H
	DW	091H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	078H
	DB	00H
	DB	08H
	DW	038H
	DB	00H
	DB	09H
	DW	0d1H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	068H
	DB	00H
	DB	08H
	DW	028H
	DB	00H
	DB	09H
	DW	0b1H
	DB	00H
	DB	08H
	DW	08H
	DB	00H
	DB	08H
	DW	088H
	DB	00H
	DB	08H
	DW	048H
	DB	00H
	DB	09H
	DW	0f1H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	054H
	DB	00H
	DB	08H
	DW	014H
	DB	015H
	DB	08H
	DW	0e3H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	074H
	DB	00H
	DB	08H
	DW	034H
	DB	00H
	DB	09H
	DW	0c9H
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	064H
	DB	00H
	DB	08H
	DW	024H
	DB	00H
	DB	09H
	DW	0a9H
	DB	00H
	DB	08H
	DW	04H
	DB	00H
	DB	08H
	DW	084H
	DB	00H
	DB	08H
	DW	044H
	DB	00H
	DB	09H
	DW	0e9H
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05cH
	DB	00H
	DB	08H
	DW	01cH
	DB	00H
	DB	09H
	DW	099H
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07cH
	DB	00H
	DB	08H
	DW	03cH
	DB	00H
	DB	09H
	DW	0d9H
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06cH
	DB	00H
	DB	08H
	DW	02cH
	DB	00H
	DB	09H
	DW	0b9H
	DB	00H
	DB	08H
	DW	0cH
	DB	00H
	DB	08H
	DW	08cH
	DB	00H
	DB	08H
	DW	04cH
	DB	00H
	DB	09H
	DW	0f9H
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	052H
	DB	00H
	DB	08H
	DW	012H
	DB	015H
	DB	08H
	DW	0a3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	072H
	DB	00H
	DB	08H
	DW	032H
	DB	00H
	DB	09H
	DW	0c5H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	062H
	DB	00H
	DB	08H
	DW	022H
	DB	00H
	DB	09H
	DW	0a5H
	DB	00H
	DB	08H
	DW	02H
	DB	00H
	DB	08H
	DW	082H
	DB	00H
	DB	08H
	DW	042H
	DB	00H
	DB	09H
	DW	0e5H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05aH
	DB	00H
	DB	08H
	DW	01aH
	DB	00H
	DB	09H
	DW	095H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07aH
	DB	00H
	DB	08H
	DW	03aH
	DB	00H
	DB	09H
	DW	0d5H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06aH
	DB	00H
	DB	08H
	DW	02aH
	DB	00H
	DB	09H
	DW	0b5H
	DB	00H
	DB	08H
	DW	0aH
	DB	00H
	DB	08H
	DW	08aH
	DB	00H
	DB	08H
	DW	04aH
	DB	00H
	DB	09H
	DW	0f5H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	056H
	DB	00H
	DB	08H
	DW	016H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	076H
	DB	00H
	DB	08H
	DW	036H
	DB	00H
	DB	09H
	DW	0cdH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	066H
	DB	00H
	DB	08H
	DW	026H
	DB	00H
	DB	09H
	DW	0adH
	DB	00H
	DB	08H
	DW	06H
	DB	00H
	DB	08H
	DW	086H
	DB	00H
	DB	08H
	DW	046H
	DB	00H
	DB	09H
	DW	0edH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05eH
	DB	00H
	DB	08H
	DW	01eH
	DB	00H
	DB	09H
	DW	09dH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07eH
	DB	00H
	DB	08H
	DW	03eH
	DB	00H
	DB	09H
	DW	0ddH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06eH
	DB	00H
	DB	08H
	DW	02eH
	DB	00H
	DB	09H
	DW	0bdH
	DB	00H
	DB	08H
	DW	0eH
	DB	00H
	DB	08H
	DW	08eH
	DB	00H
	DB	08H
	DW	04eH
	DB	00H
	DB	09H
	DW	0fdH
	DB	060H
	DB	07H
	DW	00H
	DB	00H
	DB	08H
	DW	051H
	DB	00H
	DB	08H
	DW	011H
	DB	015H
	DB	08H
	DW	083H
	DB	012H
	DB	07H
	DW	01fH
	DB	00H
	DB	08H
	DW	071H
	DB	00H
	DB	08H
	DW	031H
	DB	00H
	DB	09H
	DW	0c3H
	DB	010H
	DB	07H
	DW	0aH
	DB	00H
	DB	08H
	DW	061H
	DB	00H
	DB	08H
	DW	021H
	DB	00H
	DB	09H
	DW	0a3H
	DB	00H
	DB	08H
	DW	01H
	DB	00H
	DB	08H
	DW	081H
	DB	00H
	DB	08H
	DW	041H
	DB	00H
	DB	09H
	DW	0e3H
	DB	010H
	DB	07H
	DW	06H
	DB	00H
	DB	08H
	DW	059H
	DB	00H
	DB	08H
	DW	019H
	DB	00H
	DB	09H
	DW	093H
	DB	013H
	DB	07H
	DW	03bH
	DB	00H
	DB	08H
	DW	079H
	DB	00H
	DB	08H
	DW	039H
	DB	00H
	DB	09H
	DW	0d3H
	DB	011H
	DB	07H
	DW	011H
	DB	00H
	DB	08H
	DW	069H
	DB	00H
	DB	08H
	DW	029H
	DB	00H
	DB	09H
	DW	0b3H
	DB	00H
	DB	08H
	DW	09H
	DB	00H
	DB	08H
	DW	089H
	DB	00H
	DB	08H
	DW	049H
	DB	00H
	DB	09H
	DW	0f3H
	DB	010H
	DB	07H
	DW	04H
	DB	00H
	DB	08H
	DW	055H
	DB	00H
	DB	08H
	DW	015H
	DB	010H
	DB	08H
	DW	0102H
	DB	013H
	DB	07H
	DW	02bH
	DB	00H
	DB	08H
	DW	075H
	DB	00H
	DB	08H
	DW	035H
	DB	00H
	DB	09H
	DW	0cbH
	DB	011H
	DB	07H
	DW	0dH
	DB	00H
	DB	08H
	DW	065H
	DB	00H
	DB	08H
	DW	025H
	DB	00H
	DB	09H
	DW	0abH
	DB	00H
	DB	08H
	DW	05H
	DB	00H
	DB	08H
	DW	085H
	DB	00H
	DB	08H
	DW	045H
	DB	00H
	DB	09H
	DW	0ebH
	DB	010H
	DB	07H
	DW	08H
	DB	00H
	DB	08H
	DW	05dH
	DB	00H
	DB	08H
	DW	01dH
	DB	00H
	DB	09H
	DW	09bH
	DB	014H
	DB	07H
	DW	053H
	DB	00H
	DB	08H
	DW	07dH
	DB	00H
	DB	08H
	DW	03dH
	DB	00H
	DB	09H
	DW	0dbH
	DB	012H
	DB	07H
	DW	017H
	DB	00H
	DB	08H
	DW	06dH
	DB	00H
	DB	08H
	DW	02dH
	DB	00H
	DB	09H
	DW	0bbH
	DB	00H
	DB	08H
	DW	0dH
	DB	00H
	DB	08H
	DW	08dH
	DB	00H
	DB	08H
	DW	04dH
	DB	00H
	DB	09H
	DW	0fbH
	DB	010H
	DB	07H
	DW	03H
	DB	00H
	DB	08H
	DW	053H
	DB	00H
	DB	08H
	DW	013H
	DB	015H
	DB	08H
	DW	0c3H
	DB	013H
	DB	07H
	DW	023H
	DB	00H
	DB	08H
	DW	073H
	DB	00H
	DB	08H
	DW	033H
	DB	00H
	DB	09H
	DW	0c7H
	DB	011H
	DB	07H
	DW	0bH
	DB	00H
	DB	08H
	DW	063H
	DB	00H
	DB	08H
	DW	023H
	DB	00H
	DB	09H
	DW	0a7H
	DB	00H
	DB	08H
	DW	03H
	DB	00H
	DB	08H
	DW	083H
	DB	00H
	DB	08H
	DW	043H
	DB	00H
	DB	09H
	DW	0e7H
	DB	010H
	DB	07H
	DW	07H
	DB	00H
	DB	08H
	DW	05bH
	DB	00H
	DB	08H
	DW	01bH
	DB	00H
	DB	09H
	DW	097H
	DB	014H
	DB	07H
	DW	043H
	DB	00H
	DB	08H
	DW	07bH
	DB	00H
	DB	08H
	DW	03bH
	DB	00H
	DB	09H
	DW	0d7H
	DB	012H
	DB	07H
	DW	013H
	DB	00H
	DB	08H
	DW	06bH
	DB	00H
	DB	08H
	DW	02bH
	DB	00H
	DB	09H
	DW	0b7H
	DB	00H
	DB	08H
	DW	0bH
	DB	00H
	DB	08H
	DW	08bH
	DB	00H
	DB	08H
	DW	04bH
	DB	00H
	DB	09H
	DW	0f7H
	DB	010H
	DB	07H
	DW	05H
	DB	00H
	DB	08H
	DW	057H
	DB	00H
	DB	08H
	DW	017H
	DB	040H
	DB	08H
	DW	00H
	DB	013H
	DB	07H
	DW	033H
	DB	00H
	DB	08H
	DW	077H
	DB	00H
	DB	08H
	DW	037H
	DB	00H
	DB	09H
	DW	0cfH
	DB	011H
	DB	07H
	DW	0fH
	DB	00H
	DB	08H
	DW	067H
	DB	00H
	DB	08H
	DW	027H
	DB	00H
	DB	09H
	DW	0afH
	DB	00H
	DB	08H
	DW	07H
	DB	00H
	DB	08H
	DW	087H
	DB	00H
	DB	08H
	DW	047H
	DB	00H
	DB	09H
	DW	0efH
	DB	010H
	DB	07H
	DW	09H
	DB	00H
	DB	08H
	DW	05fH
	DB	00H
	DB	08H
	DW	01fH
	DB	00H
	DB	09H
	DW	09fH
	DB	014H
	DB	07H
	DW	063H
	DB	00H
	DB	08H
	DW	07fH
	DB	00H
	DB	08H
	DW	03fH
	DB	00H
	DB	09H
	DW	0dfH
	DB	012H
	DB	07H
	DW	01bH
	DB	00H
	DB	08H
	DW	06fH
	DB	00H
	DB	08H
	DW	02fH
	DB	00H
	DB	09H
	DW	0bfH
	DB	00H
	DB	08H
	DW	0fH
	DB	00H
	DB	08H
	DW	08fH
	DB	00H
	DB	08H
	DW	04fH
	DB	00H
	DB	09H
	DW	0ffH
?distfix@?1??fixedtables@@9@9 DB 010H			; `fixedtables'::`2'::distfix
	DB	05H
	DW	01H
	DB	017H
	DB	05H
	DW	0101H
	DB	013H
	DB	05H
	DW	011H
	DB	01bH
	DB	05H
	DW	01001H
	DB	011H
	DB	05H
	DW	05H
	DB	019H
	DB	05H
	DW	0401H
	DB	015H
	DB	05H
	DW	041H
	DB	01dH
	DB	05H
	DW	04001H
	DB	010H
	DB	05H
	DW	03H
	DB	018H
	DB	05H
	DW	0201H
	DB	014H
	DB	05H
	DW	021H
	DB	01cH
	DB	05H
	DW	02001H
	DB	012H
	DB	05H
	DW	09H
	DB	01aH
	DB	05H
	DW	0801H
	DB	016H
	DB	05H
	DW	081H
	DB	040H
	DB	05H
	DW	00H
	DB	010H
	DB	05H
	DW	02H
	DB	017H
	DB	05H
	DW	0181H
	DB	013H
	DB	05H
	DW	019H
	DB	01bH
	DB	05H
	DW	01801H
	DB	011H
	DB	05H
	DW	07H
	DB	019H
	DB	05H
	DW	0601H
	DB	015H
	DB	05H
	DW	061H
	DB	01dH
	DB	05H
	DW	06001H
	DB	010H
	DB	05H
	DW	04H
	DB	018H
	DB	05H
	DW	0301H
	DB	014H
	DB	05H
	DW	031H
	DB	01cH
	DB	05H
	DW	03001H
	DB	012H
	DB	05H
	DW	0dH
	DB	01aH
	DB	05H
	DW	0c01H
	DB	016H
	DB	05H
	DW	0c1H
	DB	040H
	DB	05H
	DW	00H
?order@?1??inflateBack@@9@9 DW 010H			; `inflateBack'::`2'::order
	DW	011H
	DW	012H
	DW	00H
	DW	08H
	DW	07H
	DW	09H
	DW	06H
	DW	0aH
	DW	05H
	DW	0bH
	DW	04H
	DW	0cH
	DW	03H
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0fH
PUBLIC	_inflateBackEnd@4
PUBLIC	_inflateBack@20
PUBLIC	_inflateBackInit_@20
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\infback.c
;	COMDAT _inflateBackInit_@20
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_windowBits$ = 12					; size = 4
_window$ = 16						; size = 4
_version$ = 20						; size = 4
_stream_size$ = 24					; size = 4
_inflateBackInit_@20 PROC				; COMDAT

; 27   :                              int stream_size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 28   :     struct inflate_state FAR *state;
; 29   : 
; 30   :     if (version == Z_NULL || version[0] != ZLIB_VERSION[0] ||

  00003	8b 45 14	 mov	 eax, DWORD PTR _version$[ebp]
  00006	56		 push	 esi
  00007	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  0000a	85 c0		 test	 eax, eax
  0000c	0f 84 ce 00 00
	00		 je	 $LN3@inflateBac
  00012	80 38 31	 cmp	 BYTE PTR [eax], 49	; 00000031H
  00015	0f 85 c5 00 00
	00		 jne	 $LN3@inflateBac
  0001b	83 7d 18 38	 cmp	 DWORD PTR _stream_size$[ebp], 56 ; 00000038H
  0001f	0f 85 bb 00 00
	00		 jne	 $LN3@inflateBac

; 33   :     if (strm == Z_NULL || window == Z_NULL ||
; 34   :         windowBits < 8 || windowBits > 15)

  00025	53		 push	 ebx
  00026	57		 push	 edi
  00027	85 f6		 test	 esi, esi
  00029	0f 84 a5 00 00
	00		 je	 $LN5@inflateBac
  0002f	8b 5d 10	 mov	 ebx, DWORD PTR _window$[ebp]
  00032	85 db		 test	 ebx, ebx
  00034	0f 84 9a 00 00
	00		 je	 $LN5@inflateBac
  0003a	8b 7d 0c	 mov	 edi, DWORD PTR _windowBits$[ebp]
  0003d	8d 47 f8	 lea	 eax, DWORD PTR [edi-8]
  00040	83 f8 07	 cmp	 eax, 7
  00043	0f 87 8b 00 00
	00		 ja	 $LN5@inflateBac

; 36   :     strm->msg = Z_NULL;                 /* in case we return an error */
; 37   :     if (strm->zalloc == (alloc_func)0) {

  00049	8b 46 20	 mov	 eax, DWORD PTR [esi+32]
  0004c	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00053	85 c0		 test	 eax, eax
  00055	75 13		 jne	 SHORT $LN10@inflateBac

; 38   : #ifdef Z_SOLO
; 39   :         return Z_STREAM_ERROR;
; 40   : #else
; 41   :         strm->zalloc = zcalloc;
; 42   :         strm->opaque = (voidpf)0;

  00057	89 46 28	 mov	 DWORD PTR [esi+40], eax
  0005a	33 c9		 xor	 ecx, ecx
  0005c	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], OFFSET _zcalloc
  00063	b8 00 00 00 00	 mov	 eax, OFFSET _zcalloc
  00068	eb 03		 jmp	 SHORT $LN6@inflateBac
$LN10@inflateBac:
  0006a	8b 4e 28	 mov	 ecx, DWORD PTR [esi+40]
$LN6@inflateBac:

; 43   : #endif
; 44   :     }
; 45   :     if (strm->zfree == (free_func)0)

  0006d	83 7e 24 00	 cmp	 DWORD PTR [esi+36], 0
  00071	75 07		 jne	 SHORT $LN7@inflateBac

; 46   : #ifdef Z_SOLO
; 47   :         return Z_STREAM_ERROR;
; 48   : #else
; 49   :     strm->zfree = zcfree;

  00073	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], OFFSET _zcfree
$LN7@inflateBac:

; 50   : #endif
; 51   :     state = (struct inflate_state FAR *)ZALLOC(strm, 1,

  0007a	68 d0 1b 00 00	 push	 7120			; 00001bd0H
  0007f	6a 01		 push	 1
  00081	51		 push	 ecx
  00082	ff d0		 call	 eax
  00084	8b d0		 mov	 edx, eax
  00086	83 c4 0c	 add	 esp, 12			; 0000000cH

; 52   :                                                sizeof(struct inflate_state));
; 53   :     if (state == Z_NULL) return Z_MEM_ERROR;

  00089	85 d2		 test	 edx, edx
  0008b	75 0a		 jne	 SHORT $LN8@inflateBac
  0008d	5f		 pop	 edi
  0008e	5b		 pop	 ebx
  0008f	8d 42 fc	 lea	 eax, DWORD PTR [edx-4]
  00092	5e		 pop	 esi

; 64   : }

  00093	5d		 pop	 ebp
  00094	c2 14 00	 ret	 20			; 00000014H
$LN8@inflateBac:

; 54   :     Tracev((stderr, "inflate: allocated\n"));
; 55   :     strm->state = (struct internal_state FAR *)state;

  00097	89 56 1c	 mov	 DWORD PTR [esi+28], edx

; 56   :     state->dmax = 32768U;
; 57   :     state->wbits = (uInt)windowBits;
; 58   :     state->wsize = 1U << windowBits;

  0009a	8b cf		 mov	 ecx, edi
  0009c	89 7a 28	 mov	 DWORD PTR [edx+40], edi
  0009f	b8 01 00 00 00	 mov	 eax, 1
  000a4	5f		 pop	 edi
  000a5	d3 e0		 shl	 eax, cl

; 59   :     state->window = window;

  000a7	89 5a 38	 mov	 DWORD PTR [edx+56], ebx
  000aa	5b		 pop	 ebx
  000ab	89 42 2c	 mov	 DWORD PTR [edx+44], eax

; 60   :     state->wnext = 0;
; 61   :     state->whave = 0;
; 62   :     state->sane = 1;
; 63   :     return Z_OK;

  000ae	33 c0		 xor	 eax, eax
  000b0	c7 42 18 00 80
	00 00		 mov	 DWORD PTR [edx+24], 32768 ; 00008000H
  000b7	c7 42 34 00 00
	00 00		 mov	 DWORD PTR [edx+52], 0
  000be	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0
  000c5	c7 82 c4 1b 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+7108], 1
  000cf	5e		 pop	 esi

; 64   : }

  000d0	5d		 pop	 ebp
  000d1	c2 14 00	 ret	 20			; 00000014H
$LN5@inflateBac:
  000d4	5f		 pop	 edi
  000d5	5b		 pop	 ebx

; 35   :         return Z_STREAM_ERROR;

  000d6	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  000db	5e		 pop	 esi

; 64   : }

  000dc	5d		 pop	 ebp
  000dd	c2 14 00	 ret	 20			; 00000014H
$LN3@inflateBac:

; 31   :         stream_size != (int)(sizeof(z_stream)))
; 32   :         return Z_VERSION_ERROR;

  000e0	b8 fa ff ff ff	 mov	 eax, -6			; fffffffaH
  000e5	5e		 pop	 esi

; 64   : }

  000e6	5d		 pop	 ebp
  000e7	c2 14 00	 ret	 20			; 00000014H
_inflateBackInit_@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\infback.c
;	COMDAT _fixedtables
_TEXT	SEGMENT
_fixedtables PROC					; COMDAT
; _state$ = ecx

; 77   : #ifdef BUILDFIXED
; 78   :     static int virgin = 1;
; 79   :     static code *lenfix, *distfix;
; 80   :     static code fixed[544];
; 81   : 
; 82   :     /* build fixed huffman tables if first call (may not be thread safe) */
; 83   :     if (virgin) {
; 84   :         unsigned sym, bits;
; 85   :         static code *next;
; 86   : 
; 87   :         /* literal/length table */
; 88   :         sym = 0;
; 89   :         while (sym < 144) state->lens[sym++] = 8;
; 90   :         while (sym < 256) state->lens[sym++] = 9;
; 91   :         while (sym < 280) state->lens[sym++] = 7;
; 92   :         while (sym < 288) state->lens[sym++] = 8;
; 93   :         next = fixed;
; 94   :         lenfix = next;
; 95   :         bits = 9;
; 96   :         inflate_table(LENS, state->lens, 288, &(next), &(bits), state->work);
; 97   : 
; 98   :         /* distance table */
; 99   :         sym = 0;
; 100  :         while (sym < 32) state->lens[sym++] = 5;
; 101  :         distfix = next;
; 102  :         bits = 5;
; 103  :         inflate_table(DISTS, state->lens, 32, &(next), &(bits), state->work);
; 104  : 
; 105  :         /* do this just once */
; 106  :         virgin = 0;
; 107  :     }
; 108  : #else /* !BUILDFIXED */
; 109  : #   include "inffixed.h"
; 110  : #endif /* BUILDFIXED */
; 111  :     state->lencode = lenfix;

  00000	c7 41 50 00 00
	00 00		 mov	 DWORD PTR [ecx+80], OFFSET ?lenfix@?1??fixedtables@@9@9

; 112  :     state->lenbits = 9;

  00007	c7 41 58 09 00
	00 00		 mov	 DWORD PTR [ecx+88], 9

; 113  :     state->distcode = distfix;

  0000e	c7 41 54 00 00
	00 00		 mov	 DWORD PTR [ecx+84], OFFSET ?distfix@?1??fixedtables@@9@9

; 114  :     state->distbits = 5;

  00015	c7 41 5c 05 00
	00 00		 mov	 DWORD PTR [ecx+92], 5

; 115  : }

  0001c	c3		 ret	 0
_fixedtables ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\infback.c
;	COMDAT _inflateBack@20
_TEXT	SEGMENT
$T1 = -40						; size = 4
_from$1$ = -40						; size = 4
$T2 = -36						; size = 4
$T3 = -36						; size = 4
$T4 = -36						; size = 4
_copy$5$ = -36						; size = 4
tv3378 = -36						; size = 4
tv3346 = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -32						; size = 4
tv3377 = -32						; size = 4
tv3287 = -32						; size = 4
tv3247 = -32						; size = 4
tv3246 = -32						; size = 4
tv3235 = -32						; size = 4
tv3234 = -32						; size = 4
_copy$4$ = -28						; size = 4
_copy$3$ = -28						; size = 4
tv3237 = -28						; size = 4
_last$ = -28						; size = 4
_put$1$ = -24						; size = 4
_left$1$ = -20						; size = 4
_here$1$ = -16						; size = 4
_bits$1$ = -16						; size = 4
_hold$1$ = -12						; size = 4
_state$1$ = -8						; size = 4
_next$ = -4						; size = 4
_strm$ = 8						; size = 4
_in$ = 12						; size = 4
_in_desc$ = 16						; size = 4
_out$ = 20						; size = 4
_out_desc$ = 24						; size = 4
_inflateBack@20 PROC					; COMDAT

; 243  :                         out_func out, void FAR *out_desc) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 244  :     struct inflate_state FAR *state;
; 245  :     z_const unsigned char FAR *next;    /* next input */
; 246  :     unsigned char FAR *put;     /* next output */
; 247  :     unsigned have, left;        /* available input and output */
; 248  :     unsigned long hold;         /* bit buffer */
; 249  :     unsigned bits;              /* bits in bit buffer */
; 250  :     unsigned copy;              /* number of stored or match bytes to copy */
; 251  :     unsigned char FAR *from;    /* where to copy match bytes from */
; 252  :     code here;                  /* current decoding table entry */
; 253  :     code last;                  /* parent table entry */
; 254  :     unsigned len;               /* length to copy for repeats, bits to drop */
; 255  :     int ret;                    /* return code */
; 256  :     static const unsigned short order[19] = /* permutation of code lengths */
; 257  :         {16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15};
; 258  : 
; 259  :     /* Check that the strm exists and that the state was initialized */
; 260  :     if (strm == Z_NULL || strm->state == Z_NULL)

  00003	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  00006	83 ec 28	 sub	 esp, 40			; 00000028H
  00009	85 c9		 test	 ecx, ecx
  0000b	0f 84 ad 0d 00
	00		 je	 $LN254@inflateBac
  00011	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00014	89 55 f8	 mov	 DWORD PTR _state$1$[ebp], edx
  00017	85 d2		 test	 edx, edx
  00019	0f 84 9f 0d 00
	00		 je	 $LN254@inflateBac

; 262  :     state = (struct inflate_state FAR *)strm->state;
; 263  : 
; 264  :     /* Reset the state */
; 265  :     strm->msg = Z_NULL;

  0001f	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], 0

; 266  :     state->mode = TYPE;

  00026	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 267  :     state->last = 0;

  0002d	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0

; 268  :     state->whave = 0;

  00034	c7 42 30 00 00
	00 00		 mov	 DWORD PTR [edx+48], 0

; 269  :     next = strm->next_in;

  0003b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003d	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00040	56		 push	 esi
  00041	57		 push	 edi
  00042	85 c0		 test	 eax, eax

; 270  :     have = next != Z_NULL ? strm->avail_in : 0;

  00044	74 05		 je	 SHORT $LN343@inflateBac
  00046	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00049	eb 02		 jmp	 SHORT $LN344@inflateBac
$LN343@inflateBac:
  0004b	33 f6		 xor	 esi, esi
$LN344@inflateBac:

; 271  :     hold = 0;
; 272  :     bits = 0;
; 273  :     put = state->window;

  0004d	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00050	33 ff		 xor	 edi, edi

; 274  :     left = state->wsize;

  00052	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00055	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax

; 275  : 
; 276  :     /* Inflate until end of block marked as last */
; 277  :     for (;;)
; 278  :         switch (state->mode) {

  00058	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0005b	53		 push	 ebx
  0005c	33 db		 xor	 ebx, ebx
  0005e	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00061	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00066	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00069	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  0006c	83 f8 12	 cmp	 eax, 18			; 00000012H
  0006f	0f 87 cf 0c 00
	00		 ja	 $LN339@inflateBac
$LN597@inflateBac:
  00075	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  00078	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $LN482@inflateBac[eax]
  0007f	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN483@inflateBac[eax*4]
$LN255@inflateBac:

; 279  :         case TYPE:
; 280  :             /* determine and dispatch block type */
; 281  :             if (state->last) {

  00086	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0008a	74 1b		 je	 SHORT $LN12@inflateBac

; 282  :                 BYTEBITS();

  0008c	8b cb		 mov	 ecx, ebx

; 283  :                 state->mode = DONE;

  0008e	c7 42 04 50 3f
	00 00		 mov	 DWORD PTR [edx+4], 16208 ; 00003f50H
  00095	83 e1 07	 and	 ecx, 7
  00098	d3 ef		 shr	 edi, cl
  0009a	2b d9		 sub	 ebx, ecx
  0009c	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  0009f	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 284  :                 break;

  000a2	e9 8c 0c 00 00	 jmp	 $LN489@inflateBac
$LN12@inflateBac:

; 285  :             }
; 286  :             NEEDBITS(3);

  000a7	83 fb 03	 cmp	 ebx, 3
  000aa	73 3b		 jae	 SHORT $LN10@inflateBac
  000ac	0f 1f 40 00	 npad	 4
$LL13@inflateBac:
  000b0	85 f6		 test	 esi, esi
  000b2	75 15		 jne	 SHORT $LN18@inflateBac
  000b4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  000b7	50		 push	 eax
  000b8	51		 push	 ecx
  000b9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  000bc	8b f0		 mov	 esi, eax
  000be	83 c4 08	 add	 esp, 8
  000c1	85 f6		 test	 esi, esi
  000c3	0f 84 be 0c 00
	00		 je	 $LN369@inflateBac
$LN18@inflateBac:
  000c9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  000cc	8b cb		 mov	 ecx, ebx
  000ce	83 c3 08	 add	 ebx, 8
  000d1	4e		 dec	 esi
  000d2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  000d5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  000d8	d3 e0		 shl	 eax, cl
  000da	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  000dd	03 f8		 add	 edi, eax
  000df	83 fb 03	 cmp	 ebx, 3
  000e2	72 cc		 jb	 SHORT $LL13@inflateBac
  000e4	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN10@inflateBac:

; 287  :             state->last = BITS(1);

  000e7	8b c7		 mov	 eax, edi

; 288  :             DROPBITS(1);

  000e9	d1 ef		 shr	 edi, 1
  000eb	83 e0 01	 and	 eax, 1
  000ee	89 42 08	 mov	 DWORD PTR [edx+8], eax

; 289  :             switch (BITS(2)) {

  000f1	8b c7		 mov	 eax, edi
  000f3	83 e0 03	 and	 eax, 3
  000f6	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $LN484@inflateBac[eax*4]
$LN259@inflateBac:

; 309  :             }
; 310  :             DROPBITS(2);

  000fd	c1 ef 02	 shr	 edi, 2
  00100	83 eb 03	 sub	 ebx, 3
  00103	c7 42 04 41 3f
	00 00		 mov	 DWORD PTR [edx+4], 16193 ; 00003f41H
  0010a	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  0010d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 311  :             break;

  00110	e9 1e 0c 00 00	 jmp	 $LN489@inflateBac
$LN260@inflateBac:

; 290  :             case 0:                             /* stored block */
; 291  :                 Tracev((stderr, "inflate:     stored block%s\n",
; 292  :                         state->last ? " (last)" : ""));
; 293  :                 state->mode = STORED;
; 294  :                 break;
; 295  :             case 1:                             /* fixed block */
; 296  :                 fixedtables(state);

  00115	8b ca		 mov	 ecx, edx
  00117	e8 00 00 00 00	 call	 _fixedtables

; 309  :             }
; 310  :             DROPBITS(2);

  0011c	c1 ef 02	 shr	 edi, 2
  0011f	83 eb 03	 sub	 ebx, 3
  00122	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
  00129	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  0012c	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 311  :             break;

  0012f	e9 ff 0b 00 00	 jmp	 $LN489@inflateBac
$LN261@inflateBac:

; 309  :             }
; 310  :             DROPBITS(2);

  00134	c1 ef 02	 shr	 edi, 2
  00137	83 eb 03	 sub	 ebx, 3
  0013a	c7 42 04 44 3f
	00 00		 mov	 DWORD PTR [edx+4], 16196 ; 00003f44H
  00141	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00144	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 311  :             break;

  00147	e9 e7 0b 00 00	 jmp	 $LN489@inflateBac
$LN262@inflateBac:

; 297  :                 Tracev((stderr, "inflate:     fixed codes block%s\n",
; 298  :                         state->last ? " (last)" : ""));
; 299  :                 state->mode = LEN;              /* decode codes */
; 300  :                 break;
; 301  :             case 2:                             /* dynamic block */
; 302  :                 Tracev((stderr, "inflate:     dynamic codes block%s\n",
; 303  :                         state->last ? " (last)" : ""));
; 304  :                 state->mode = TABLE;
; 305  :                 break;
; 306  :             case 3:
; 307  :                 strm->msg = (char *)"invalid block type";

  0014c	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0014f	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BD@PJCBIDD@invalid?5block?5type@

; 308  :                 state->mode = BAD;

  00156	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
$LN28@inflateBac:

; 309  :             }
; 310  :             DROPBITS(2);

  0015d	c1 ef 02	 shr	 edi, 2
  00160	83 eb 03	 sub	 ebx, 3
  00163	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00166	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 311  :             break;

  00169	e9 c5 0b 00 00	 jmp	 $LN489@inflateBac
$LN31@inflateBac:

; 312  : 
; 313  :         case STORED:
; 314  :             /* get and verify stored block length */
; 315  :             BYTEBITS();                         /* go to byte boundary */

  0016e	8b cb		 mov	 ecx, ebx
  00170	83 e1 07	 and	 ecx, 7
  00173	2b d9		 sub	 ebx, ecx
  00175	d3 ef		 shr	 edi, cl
  00177	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  0017a	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 316  :             NEEDBITS(32);

  0017d	83 fb 20	 cmp	 ebx, 32			; 00000020H
  00180	73 3c		 jae	 SHORT $LN32@inflateBac
$LL35@inflateBac:
  00182	85 f6		 test	 esi, esi
  00184	75 17		 jne	 SHORT $LN40@inflateBac
  00186	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00189	50		 push	 eax
  0018a	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0018d	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00190	8b f0		 mov	 esi, eax
  00192	83 c4 08	 add	 esp, 8
  00195	85 f6		 test	 esi, esi
  00197	0f 84 ea 0b 00
	00		 je	 $LN369@inflateBac
$LN40@inflateBac:
  0019d	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  001a0	8b cb		 mov	 ecx, ebx
  001a2	83 c3 08	 add	 ebx, 8
  001a5	4e		 dec	 esi
  001a6	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  001a9	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  001ac	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  001af	d3 e0		 shl	 eax, cl
  001b1	03 f8		 add	 edi, eax
  001b3	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  001b6	83 fb 20	 cmp	 ebx, 32			; 00000020H
  001b9	72 c7		 jb	 SHORT $LL35@inflateBac
  001bb	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN32@inflateBac:

; 317  :             if ((hold & 0xffff) != ((hold >> 16) ^ 0xffff)) {

  001be	8b c7		 mov	 eax, edi
  001c0	0f b7 cf	 movzx	 ecx, di
  001c3	f7 d0		 not	 eax
  001c5	89 4d e4	 mov	 DWORD PTR _copy$3$[ebp], ecx
  001c8	c1 e8 10	 shr	 eax, 16			; 00000010H
  001cb	3b c8		 cmp	 ecx, eax
  001cd	74 16		 je	 SHORT $LN266@inflateBac

; 318  :                 strm->msg = (char *)"invalid stored block lengths";

  001cf	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  001d2	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BN@LGAADGOK@invalid?5stored?5block?5lengths@

; 319  :                 state->mode = BAD;

  001d9	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 320  :                 break;

  001e0	e9 4e 0b 00 00	 jmp	 $LN489@inflateBac
$LN266@inflateBac:

; 321  :             }
; 322  :             state->length = (unsigned)hold & 0xffff;
; 323  :             Tracev((stderr, "inflate:       stored length %u\n",
; 324  :                     state->length));
; 325  :             INITBITS();

  001e5	33 ff		 xor	 edi, edi
  001e7	89 4a 44	 mov	 DWORD PTR [edx+68], ecx
  001ea	33 db		 xor	 ebx, ebx
  001ec	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  001ef	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 326  : 
; 327  :             /* copy stored block from input to output */
; 328  :             while (state->length != 0) {

  001f2	85 c9		 test	 ecx, ecx
  001f4	0f 84 94 00 00
	00		 je	 $LN47@inflateBac
  001fa	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  001fd	0f 1f 00	 npad	 3
$LL46@inflateBac:

; 329  :                 copy = state->length;
; 330  :                 PULL();

  00200	85 f6		 test	 esi, esi
  00202	75 1d		 jne	 SHORT $LN48@inflateBac
  00204	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00207	50		 push	 eax
  00208	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0020b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0020e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00211	8b f0		 mov	 esi, eax
  00213	83 c4 08	 add	 esp, 8
  00216	85 f6		 test	 esi, esi
  00218	0f 84 7a 0b 00
	00		 je	 $LN371@inflateBac
  0021e	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
$LN48@inflateBac:

; 331  :                 ROOM();

  00221	85 c0		 test	 eax, eax
  00223	75 22		 jne	 SHORT $LN51@inflateBac
  00225	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00228	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  0022b	51		 push	 ecx
  0022c	50		 push	 eax
  0022d	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00230	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00233	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00236	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00239	ff 55 14	 call	 DWORD PTR _out$[ebp]
  0023c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0023f	85 c0		 test	 eax, eax
  00241	0f 85 47 0b 00
	00		 jne	 $LN372@inflateBac
$LN51@inflateBac:

; 332  :                 if (copy > have) copy = have;

  00247	8b 45 e4	 mov	 eax, DWORD PTR _copy$3$[ebp]
  0024a	3b c6		 cmp	 eax, esi
  0024c	0f 47 c6	 cmova	 eax, esi

; 333  :                 if (copy > left) copy = left;

  0024f	3b 45 ec	 cmp	 eax, DWORD PTR _left$1$[ebp]
  00252	0f 47 45 ec	 cmova	 eax, DWORD PTR _left$1$[ebp]

; 334  :                 zmemcpy(put, next, copy);

  00256	50		 push	 eax
  00257	ff 75 fc	 push	 DWORD PTR _next$[ebp]
  0025a	89 45 e4	 mov	 DWORD PTR _copy$3$[ebp], eax
  0025d	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  00260	50		 push	 eax
  00261	e8 00 00 00 00	 call	 _memcpy

; 335  :                 have -= copy;

  00266	8b 4d e4	 mov	 ecx, DWORD PTR _copy$3$[ebp]
  00269	83 c4 0c	 add	 esp, 12			; 0000000cH

; 336  :                 next += copy;
; 337  :                 left -= copy;
; 338  :                 put += copy;
; 339  :                 state->length -= copy;

  0026c	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  0026f	2b f1		 sub	 esi, ecx
  00271	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00274	01 4d fc	 add	 DWORD PTR _next$[ebp], ecx
  00277	2b c1		 sub	 eax, ecx
  00279	01 4d e8	 add	 DWORD PTR _put$1$[ebp], ecx
  0027c	29 4a 44	 sub	 DWORD PTR [edx+68], ecx
  0027f	8b 4a 44	 mov	 ecx, DWORD PTR [edx+68]
  00282	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  00285	89 4d e4	 mov	 DWORD PTR _copy$3$[ebp], ecx
  00288	0f 85 72 ff ff
	ff		 jne	 $LL46@inflateBac
$LN47@inflateBac:

; 340  :             }
; 341  :             Tracev((stderr, "inflate:       stored end\n"));
; 342  :             state->mode = TYPE;

  0028e	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 343  :             break;

  00295	e9 99 0a 00 00	 jmp	 $LN489@inflateBac
$LN56@inflateBac:

; 344  : 
; 345  :         case TABLE:
; 346  :             /* get dynamic table entries descriptor */
; 347  :             NEEDBITS(14);

  0029a	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  0029d	73 38		 jae	 SHORT $LN54@inflateBac
  0029f	90		 npad	 1
$LL57@inflateBac:
  002a0	85 f6		 test	 esi, esi
  002a2	75 15		 jne	 SHORT $LN62@inflateBac
  002a4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  002a7	50		 push	 eax
  002a8	51		 push	 ecx
  002a9	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  002ac	8b f0		 mov	 esi, eax
  002ae	83 c4 08	 add	 esp, 8
  002b1	85 f6		 test	 esi, esi
  002b3	0f 84 ce 0a 00
	00		 je	 $LN369@inflateBac
$LN62@inflateBac:
  002b9	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  002bc	8b cb		 mov	 ecx, ebx
  002be	83 c3 08	 add	 ebx, 8
  002c1	4e		 dec	 esi
  002c2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  002c5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  002c8	d3 e0		 shl	 eax, cl
  002ca	8b 4d 10	 mov	 ecx, DWORD PTR _in_desc$[ebp]
  002cd	03 f8		 add	 edi, eax
  002cf	83 fb 0e	 cmp	 ebx, 14			; 0000000eH
  002d2	72 cc		 jb	 SHORT $LL57@inflateBac
  002d4	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN54@inflateBac:

; 348  :             state->nlen = BITS(5) + 257;

  002d7	8b cf		 mov	 ecx, edi

; 349  :             DROPBITS(5);
; 350  :             state->ndist = BITS(5) + 1;
; 351  :             DROPBITS(5);
; 352  :             state->ncode = BITS(4) + 4;
; 353  :             DROPBITS(4);

  002d9	83 eb 0e	 sub	 ebx, 14			; 0000000eH
  002dc	c1 ef 05	 shr	 edi, 5
  002df	83 e1 1f	 and	 ecx, 31			; 0000001fH
  002e2	8b c7		 mov	 eax, edi
  002e4	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  002e7	83 e0 1f	 and	 eax, 31			; 0000001fH
  002ea	c1 ef 05	 shr	 edi, 5
  002ed	40		 inc	 eax
  002ee	81 c1 01 01 00
	00		 add	 ecx, 257		; 00000101H
  002f4	89 45 dc	 mov	 DWORD PTR tv3378[ebp], eax
  002f7	89 42 68	 mov	 DWORD PTR [edx+104], eax
  002fa	8b c7		 mov	 eax, edi
  002fc	83 e0 0f	 and	 eax, 15			; 0000000fH
  002ff	c1 ef 04	 shr	 edi, 4
  00302	83 c0 04	 add	 eax, 4
  00305	89 4a 64	 mov	 DWORD PTR [edx+100], ecx
  00308	89 45 e0	 mov	 DWORD PTR tv3377[ebp], eax
  0030b	89 42 60	 mov	 DWORD PTR [edx+96], eax
  0030e	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi

; 354  : #ifndef PKZIP_BUG_WORKAROUND
; 355  :             if (state->nlen > 286 || state->ndist > 30) {

  00311	81 f9 1e 01 00
	00		 cmp	 ecx, 286		; 0000011eH
  00317	0f 87 03 05 00
	00		 ja	 $LN277@inflateBac
  0031d	83 7d dc 1e	 cmp	 DWORD PTR tv3378[ebp], 30 ; 0000001eH
  00321	0f 87 f9 04 00
	00		 ja	 $LN277@inflateBac

; 359  :             }
; 360  : #endif
; 361  :             Tracev((stderr, "inflate:       table sizes ok\n"));
; 362  : 
; 363  :             /* get code length code lengths (not a typo) */
; 364  :             state->have = 0;

  00327	33 c0		 xor	 eax, eax
  00329	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0

; 365  :             while (state->have < state->ncode) {

  00330	39 45 e0	 cmp	 DWORD PTR tv3377[ebp], eax
  00333	76 6f		 jbe	 SHORT $LN352@inflateBac
$LL74@inflateBac:

; 366  :                 NEEDBITS(3);

  00335	83 fb 03	 cmp	 ebx, 3
  00338	73 3d		 jae	 SHORT $LN76@inflateBac
  0033a	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
  0033d	0f 1f 00	 npad	 3
$LL79@inflateBac:
  00340	85 f6		 test	 esi, esi
  00342	75 1a		 jne	 SHORT $LN84@inflateBac
  00344	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00347	50		 push	 eax
  00348	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0034b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0034e	8b f0		 mov	 esi, eax
  00350	83 c4 08	 add	 esp, 8
  00353	85 f6		 test	 esi, esi
  00355	0f 84 2c 0a 00
	00		 je	 $LN369@inflateBac
  0035b	8b 55 fc	 mov	 edx, DWORD PTR _next$[ebp]
$LN84@inflateBac:
  0035e	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00361	8b cb		 mov	 ecx, ebx
  00363	d3 e0		 shl	 eax, cl
  00365	42		 inc	 edx
  00366	83 c3 08	 add	 ebx, 8
  00369	89 55 fc	 mov	 DWORD PTR _next$[ebp], edx
  0036c	4e		 dec	 esi
  0036d	03 f8		 add	 edi, eax
  0036f	83 fb 03	 cmp	 ebx, 3
  00372	72 cc		 jb	 SHORT $LL79@inflateBac
  00374	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
$LN76@inflateBac:

; 367  :                 state->lens[order[state->have++]] = (unsigned short)BITS(3);

  00377	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0037a	8b cf		 mov	 ecx, edi
  0037c	83 e1 07	 and	 ecx, 7

; 368  :                 DROPBITS(3);

  0037f	c1 ef 03	 shr	 edi, 3
  00382	83 eb 03	 sub	 ebx, 3
  00385	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00388	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0038b	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  00393	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  00398	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  0039b	40		 inc	 eax
  0039c	89 42 6c	 mov	 DWORD PTR [edx+108], eax
  0039f	3b 42 60	 cmp	 eax, DWORD PTR [edx+96]
  003a2	72 91		 jb	 SHORT $LL74@inflateBac
$LN352@inflateBac:

; 369  :             }
; 370  :             while (state->have < 19)

  003a4	83 f8 13	 cmp	 eax, 19			; 00000013H
  003a7	73 22		 jae	 SHORT $LN91@inflateBac
  003a9	0f 1f 80 00 00
	00 00		 npad	 7
$LL90@inflateBac:

; 371  :                 state->lens[order[state->have++]] = 0;

  003b0	0f b7 04 45 00
	00 00 00	 movzx	 eax, WORD PTR ?order@?1??inflateBack@@9@9[eax*2]
  003b8	33 c9		 xor	 ecx, ecx
  003ba	66 89 4c 42 74	 mov	 WORD PTR [edx+eax*2+116], cx
  003bf	8b 42 6c	 mov	 eax, DWORD PTR [edx+108]
  003c2	40		 inc	 eax
  003c3	89 42 6c	 mov	 DWORD PTR [edx+108], eax
  003c6	83 f8 13	 cmp	 eax, 19			; 00000013H
  003c9	72 e5		 jb	 SHORT $LL90@inflateBac
$LN91@inflateBac:

; 372  :             state->next = state->codes;

  003cb	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 373  :             state->lencode = (code const FAR *)(state->next);
; 374  :             state->lenbits = 7;

  003d1	c7 42 58 07 00
	00 00		 mov	 DWORD PTR [edx+88], 7
  003d8	8d 4a 70	 lea	 ecx, DWORD PTR [edx+112]
  003db	89 42 50	 mov	 DWORD PTR [edx+80], eax
  003de	89 01		 mov	 DWORD PTR [ecx], eax
  003e0	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003e3	89 45 dc	 mov	 DWORD PTR tv3346[ebp], eax

; 375  :             ret = inflate_table(CODES, state->lens, 19, &(state->next),

  003e6	8d 82 f4 02 00
	00		 lea	 eax, DWORD PTR [edx+756]
  003ec	50		 push	 eax
  003ed	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  003f0	83 c2 74	 add	 edx, 116		; 00000074H
  003f3	50		 push	 eax
  003f4	51		 push	 ecx
  003f5	6a 13		 push	 19			; 00000013H
  003f7	33 c9		 xor	 ecx, ecx
  003f9	e8 00 00 00 00	 call	 _inflate_table

; 376  :                                 &(state->lenbits), state->work);
; 377  :             if (ret) {

  003fe	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00401	83 c4 10	 add	 esp, 16			; 00000010H
  00404	85 c0		 test	 eax, eax
  00406	74 16		 je	 SHORT $LN280@inflateBac

; 378  :                 strm->msg = (char *)"invalid code lengths set";

  00408	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0040b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BJ@HDEPPGOH@invalid?5code?5lengths?5set@

; 379  :                 state->mode = BAD;

  00412	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 380  :                 break;

  00419	e9 15 09 00 00	 jmp	 $LN489@inflateBac
$LN280@inflateBac:

; 381  :             }
; 382  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 383  : 
; 384  :             /* get length and distance code code lengths */
; 385  :             state->have = 0;
; 386  :             while (state->have < state->nlen + state->ndist) {

  0041e	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  00421	c7 42 6c 00 00
	00 00		 mov	 DWORD PTR [edx+108], 0
  00428	03 42 64	 add	 eax, DWORD PTR [edx+100]
  0042b	0f 84 8b 02 00
	00		 je	 $LN495@inflateBac
$LL92@inflateBac:

; 387  :                 for (;;) {
; 388  :                     here = state->lencode[BITS(state->lenbits)];

  00431	8b 45 dc	 mov	 eax, DWORD PTR tv3346[ebp]
  00434	ba 01 00 00 00	 mov	 edx, 1
  00439	8b 08		 mov	 ecx, DWORD PTR [eax]
  0043b	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  0043e	d3 e2		 shl	 edx, cl
  00440	4a		 dec	 edx
  00441	23 d7		 and	 edx, edi

; 389  :                     if ((unsigned)(here.bits) <= bits) break;

  00443	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00446	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00449	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  0044c	8b c8		 mov	 ecx, eax
  0044e	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00451	8b d0		 mov	 edx, eax
  00453	c1 ea 08	 shr	 edx, 8
  00456	89 4d e0	 mov	 DWORD PTR $T6[ebp], ecx
  00459	0f b6 ca	 movzx	 ecx, dl
  0045c	89 45 f0	 mov	 DWORD PTR _here$1$[ebp], eax
  0045f	3b cb		 cmp	 ecx, ebx
  00461	76 68		 jbe	 SHORT $LN487@inflateBac
$LL94@inflateBac:

; 390  :                     PULLBYTE();

  00463	85 f6		 test	 esi, esi
  00465	75 1a		 jne	 SHORT $LN100@inflateBac
  00467	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0046a	50		 push	 eax
  0046b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0046e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00471	8b f0		 mov	 esi, eax
  00473	83 c4 08	 add	 esp, 8
  00476	85 f6		 test	 esi, esi
  00478	0f 84 09 09 00
	00		 je	 $LN369@inflateBac
  0047e	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN100@inflateBac:
  00481	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00484	8b cb		 mov	 ecx, ebx
  00486	d3 e0		 shl	 eax, cl
  00488	47		 inc	 edi
  00489	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  0048c	ba 01 00 00 00	 mov	 edx, 1
  00491	8b 45 dc	 mov	 eax, DWORD PTR tv3346[ebp]
  00494	83 c3 08	 add	 ebx, 8
  00497	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  0049a	4e		 dec	 esi
  0049b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0049d	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  004a0	d3 e2		 shl	 edx, cl
  004a2	4a		 dec	 edx
  004a3	23 55 f4	 and	 edx, DWORD PTR _hold$1$[ebp]
  004a6	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  004a9	8b 04 90	 mov	 eax, DWORD PTR [eax+edx*4]
  004ac	8b c8		 mov	 ecx, eax
  004ae	c1 e9 10	 shr	 ecx, 16			; 00000010H
  004b1	8b d0		 mov	 edx, eax
  004b3	c1 ea 08	 shr	 edx, 8
  004b6	89 4d e0	 mov	 DWORD PTR tv3234[ebp], ecx
  004b9	0f b6 ca	 movzx	 ecx, dl
  004bc	89 45 f0	 mov	 DWORD PTR _here$1$[ebp], eax
  004bf	3b cb		 cmp	 ecx, ebx
  004c1	77 a0		 ja	 SHORT $LL94@inflateBac

; 389  :                     if ((unsigned)(here.bits) <= bits) break;

  004c3	8b 4d e0	 mov	 ecx, DWORD PTR tv3234[ebp]
  004c6	0f b7 c9	 movzx	 ecx, cx
  004c9	eb 03		 jmp	 SHORT $LN375@inflateBac
$LN487@inflateBac:
  004cb	8b 4d e0	 mov	 ecx, DWORD PTR $T6[ebp]
$LN375@inflateBac:

; 391  :                 }
; 392  :                 if (here.val < 16) {

  004ce	0f b7 c1	 movzx	 eax, cx
  004d1	89 45 e4	 mov	 DWORD PTR tv3237[ebp], eax
  004d4	0f b7 c1	 movzx	 eax, cx
  004d7	89 45 e0	 mov	 DWORD PTR tv3235[ebp], eax
  004da	8b 45 f0	 mov	 eax, DWORD PTR _here$1$[ebp]
  004dd	66 83 f9 10	 cmp	 cx, 16			; 00000010H
  004e1	73 30		 jae	 SHORT $LN284@inflateBac

; 393  :                     DROPBITS(here.bits);

  004e3	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  004e6	8a ca		 mov	 cl, dl

; 394  :                     state->lens[state->have++] = here.val;

  004e8	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  004eb	d3 ef		 shr	 edi, cl
  004ed	8b c8		 mov	 ecx, eax
  004ef	c1 e9 08	 shr	 ecx, 8
  004f2	0f b6 c9	 movzx	 ecx, cl
  004f5	2b d9		 sub	 ebx, ecx
  004f7	c1 e8 10	 shr	 eax, 16			; 00000010H
  004fa	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  004fd	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00500	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00503	66 89 44 4a 74	 mov	 WORD PTR [edx+ecx*2+116], ax
  00508	ff 42 6c	 inc	 DWORD PTR [edx+108]
  0050b	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]

; 395  :                 }

  0050e	e9 9b 01 00 00	 jmp	 $LN406@inflateBac
$LN284@inflateBac:

; 396  :                 else {
; 397  :                     if (here.val == 16) {

  00513	66 83 7d e0 10	 cmp	 WORD PTR tv3235[ebp], 16 ; 00000010H
  00518	0f b6 c2	 movzx	 eax, dl
  0051b	75 7e		 jne	 SHORT $LN286@inflateBac

; 398  :                         NEEDBITS(here.bits + 2);

  0051d	83 c0 02	 add	 eax, 2
  00520	89 45 e0	 mov	 DWORD PTR tv3287[ebp], eax
  00523	3b d8		 cmp	 ebx, eax
  00525	73 35		 jae	 SHORT $LN106@inflateBac
$LL109@inflateBac:
  00527	85 f6		 test	 esi, esi
  00529	75 1a		 jne	 SHORT $LN114@inflateBac
  0052b	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  0052e	50		 push	 eax
  0052f	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00532	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00535	8b f0		 mov	 esi, eax
  00537	83 c4 08	 add	 esp, 8
  0053a	85 f6		 test	 esi, esi
  0053c	0f 84 45 08 00
	00		 je	 $LN369@inflateBac
  00542	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN114@inflateBac:
  00545	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00548	8b cb		 mov	 ecx, ebx
  0054a	d3 e0		 shl	 eax, cl
  0054c	47		 inc	 edi
  0054d	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  00550	83 c3 08	 add	 ebx, 8
  00553	4e		 dec	 esi
  00554	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00557	3b 5d e0	 cmp	 ebx, DWORD PTR tv3287[ebp]
  0055a	72 cb		 jb	 SHORT $LL109@inflateBac
$LN106@inflateBac:

; 399  :                         DROPBITS(here.bits);

  0055c	8b 45 f0	 mov	 eax, DWORD PTR _here$1$[ebp]

; 400  :                         if (state->have == 0) {

  0055f	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00562	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00565	0f b6 cc	 movzx	 ecx, ah
  00568	d3 ef		 shr	 edi, cl
  0056a	2b d9		 sub	 ebx, ecx
  0056c	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0056f	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00572	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00575	85 c9		 test	 ecx, ecx
  00577	0f 84 6c 01 00
	00		 je	 $LN380@inflateBac

; 401  :                             strm->msg = (char *)"invalid bit length repeat";
; 402  :                             state->mode = BAD;
; 403  :                             break;
; 404  :                         }
; 405  :                         len = (unsigned)(state->lens[state->have - 1]);
; 406  :                         copy = 3 + BITS(2);
; 407  :                         DROPBITS(2);

  0057d	0f b7 4c 4a 72	 movzx	 ecx, WORD PTR [edx+ecx*2+114]
  00582	8b c7		 mov	 eax, edi
  00584	83 e0 03	 and	 eax, 3
  00587	c1 ef 02	 shr	 edi, 2
  0058a	83 c0 03	 add	 eax, 3
  0058d	89 4d e0	 mov	 DWORD PTR $T5[ebp], ecx
  00590	89 45 e4	 mov	 DWORD PTR _copy$4$[ebp], eax
  00593	83 eb 02	 sub	 ebx, 2

; 408  :                     }

  00596	e9 d9 00 00 00	 jmp	 $LN595@inflateBac
$LN286@inflateBac:

; 409  :                     else if (here.val == 17) {

  0059b	66 83 7d e4 11	 cmp	 WORD PTR tv3237[ebp], 17 ; 00000011H
  005a0	75 63		 jne	 SHORT $LN142@inflateBac

; 410  :                         NEEDBITS(here.bits + 3);

  005a2	83 c0 03	 add	 eax, 3
  005a5	89 45 e0	 mov	 DWORD PTR tv3247[ebp], eax
  005a8	3b d8		 cmp	 ebx, eax
  005aa	73 39		 jae	 SHORT $LN123@inflateBac
  005ac	0f 1f 40 00	 npad	 4
$LL126@inflateBac:
  005b0	85 f6		 test	 esi, esi
  005b2	75 1a		 jne	 SHORT $LN131@inflateBac
  005b4	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  005b7	50		 push	 eax
  005b8	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  005bb	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  005be	8b f0		 mov	 esi, eax
  005c0	83 c4 08	 add	 esp, 8
  005c3	85 f6		 test	 esi, esi
  005c5	0f 84 bc 07 00
	00		 je	 $LN369@inflateBac
  005cb	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN131@inflateBac:
  005ce	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  005d1	8b cb		 mov	 ecx, ebx
  005d3	d3 e0		 shl	 eax, cl
  005d5	47		 inc	 edi
  005d6	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  005d9	83 c3 08	 add	 ebx, 8
  005dc	4e		 dec	 esi
  005dd	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  005e0	3b 5d e0	 cmp	 ebx, DWORD PTR tv3247[ebp]
  005e3	72 cb		 jb	 SHORT $LL126@inflateBac
$LN123@inflateBac:

; 411  :                         DROPBITS(here.bits);

  005e5	8b 45 f0	 mov	 eax, DWORD PTR _here$1$[ebp]
  005e8	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  005eb	0f b6 cc	 movzx	 ecx, ah
  005ee	d3 ef		 shr	 edi, cl

; 412  :                         len = 0;
; 413  :                         copy = 3 + BITS(3);

  005f0	8b c7		 mov	 eax, edi
  005f2	83 e0 07	 and	 eax, 7
  005f5	83 c0 03	 add	 eax, 3

; 414  :                         DROPBITS(3);

  005f8	c1 ef 03	 shr	 edi, 3
  005fb	89 45 e4	 mov	 DWORD PTR _copy$4$[ebp], eax
  005fe	b8 fd ff ff ff	 mov	 eax, -3			; fffffffdH

; 415  :                     }

  00603	eb 5e		 jmp	 SHORT $LN596@inflateBac
$LN142@inflateBac:

; 416  :                     else {
; 417  :                         NEEDBITS(here.bits + 7);

  00605	83 c0 07	 add	 eax, 7
  00608	89 45 e0	 mov	 DWORD PTR tv3246[ebp], eax
  0060b	3b d8		 cmp	 ebx, eax
  0060d	73 36		 jae	 SHORT $LN140@inflateBac
  0060f	90		 npad	 1
$LL143@inflateBac:
  00610	85 f6		 test	 esi, esi
  00612	75 1a		 jne	 SHORT $LN148@inflateBac
  00614	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00617	50		 push	 eax
  00618	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0061b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0061e	8b f0		 mov	 esi, eax
  00620	83 c4 08	 add	 esp, 8
  00623	85 f6		 test	 esi, esi
  00625	0f 84 5c 07 00
	00		 je	 $LN369@inflateBac
  0062b	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
$LN148@inflateBac:
  0062e	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00631	8b cb		 mov	 ecx, ebx
  00633	d3 e0		 shl	 eax, cl
  00635	47		 inc	 edi
  00636	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  00639	83 c3 08	 add	 ebx, 8
  0063c	4e		 dec	 esi
  0063d	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00640	3b 5d e0	 cmp	 ebx, DWORD PTR tv3246[ebp]
  00643	72 cb		 jb	 SHORT $LL143@inflateBac
$LN140@inflateBac:

; 418  :                         DROPBITS(here.bits);

  00645	8b 45 f0	 mov	 eax, DWORD PTR _here$1$[ebp]
  00648	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0064b	0f b6 cc	 movzx	 ecx, ah
  0064e	d3 ef		 shr	 edi, cl

; 419  :                         len = 0;
; 420  :                         copy = 11 + BITS(7);

  00650	8b c7		 mov	 eax, edi
  00652	83 e0 7f	 and	 eax, 127		; 0000007fH
  00655	83 c0 0b	 add	 eax, 11			; 0000000bH

; 421  :                         DROPBITS(7);

  00658	c1 ef 07	 shr	 edi, 7
  0065b	89 45 e4	 mov	 DWORD PTR _copy$4$[ebp], eax
  0065e	b8 f9 ff ff ff	 mov	 eax, -7			; fffffff9H
$LN596@inflateBac:

; 422  :                     }
; 423  :                     if (state->have + copy > state->nlen + state->ndist) {

  00663	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00666	2b c1		 sub	 eax, ecx
  00668	03 d8		 add	 ebx, eax
  0066a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR $T5[ebp], 0
  00671	8b 45 e4	 mov	 eax, DWORD PTR _copy$4$[ebp]
$LN595@inflateBac:
  00674	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  00677	89 4d d8	 mov	 DWORD PTR $T1[ebp], ecx
  0067a	03 c8		 add	 ecx, eax
  0067c	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  0067f	03 42 64	 add	 eax, DWORD PTR [edx+100]
  00682	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00685	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00688	3b c8		 cmp	 ecx, eax
  0068a	77 5d		 ja	 SHORT $LN380@inflateBac
  0068c	8b 7d e4	 mov	 edi, DWORD PTR _copy$4$[ebp]
  0068f	8b 4d d8	 mov	 ecx, DWORD PTR $T1[ebp]
  00692	8b 5d e0	 mov	 ebx, DWORD PTR $T5[ebp]
$LL157@inflateBac:

; 424  :                         strm->msg = (char *)"invalid bit length repeat";
; 425  :                         state->mode = BAD;
; 426  :                         break;
; 427  :                     }
; 428  :                     while (copy--)
; 429  :                         state->lens[state->have++] = (unsigned short)len;

  00695	66 89 5c 4a 74	 mov	 WORD PTR [edx+ecx*2+116], bx
  0069a	8b 4a 6c	 mov	 ecx, DWORD PTR [edx+108]
  0069d	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  006a0	89 4a 6c	 mov	 DWORD PTR [edx+108], ecx
  006a3	83 ef 01	 sub	 edi, 1
  006a6	75 ed		 jne	 SHORT $LL157@inflateBac
  006a8	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  006ab	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
$LN406@inflateBac:

; 381  :             }
; 382  :             Tracev((stderr, "inflate:       code lengths ok\n"));
; 383  : 
; 384  :             /* get length and distance code code lengths */
; 385  :             state->have = 0;
; 386  :             while (state->have < state->nlen + state->ndist) {

  006ae	8b 42 68	 mov	 eax, DWORD PTR [edx+104]
  006b1	03 42 64	 add	 eax, DWORD PTR [edx+100]
  006b4	3b c8		 cmp	 ecx, eax
  006b6	0f 82 75 fd ff
	ff		 jb	 $LL92@inflateBac
$LN495@inflateBac:

; 430  :                 }
; 431  :             }
; 432  : 
; 433  :             /* handle error breaks in while */
; 434  :             if (state->mode == BAD) break;

  006bc	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
$LN93@inflateBac:
  006bf	81 7a 04 51 3f
	00 00		 cmp	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006c6	0f 84 67 06 00
	00		 je	 $LN489@inflateBac

; 435  : 
; 436  :             /* check for end-of-block code (better have one) */
; 437  :             if (state->lens[256] == 0) {

  006cc	66 83 ba 74 02
	00 00 00	 cmp	 WORD PTR [edx+628], 0
  006d4	75 26		 jne	 SHORT $LN299@inflateBac

; 438  :                 strm->msg = (char *)"invalid code -- missing end-of-block";

  006d6	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0CF@DGDMADCD@invalid?5code?5?9?9?5missing?5end?9of?9@

; 439  :                 state->mode = BAD;

  006dd	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 440  :                 break;

  006e4	e9 4a 06 00 00	 jmp	 $LN489@inflateBac
$LN380@inflateBac:

; 430  :                 }
; 431  :             }
; 432  : 
; 433  :             /* handle error breaks in while */
; 434  :             if (state->mode == BAD) break;

  006e9	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  006ec	c7 41 18 00 00
	00 00		 mov	 DWORD PTR [ecx+24], OFFSET ??_C@_0BK@BMMPFBBH@invalid?5bit?5length?5repeat@
  006f3	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H
  006fa	eb c3		 jmp	 SHORT $LN93@inflateBac
$LN299@inflateBac:

; 441  :             }
; 442  : 
; 443  :             /* build code tables -- note: do not change the lenbits or distbits
; 444  :                values here (9 and 6) without reading the comments in inftrees.h
; 445  :                concerning the ENOUGH constants, which depend on those values */
; 446  :             state->next = state->codes;

  006fc	8d 82 34 05 00
	00		 lea	 eax, DWORD PTR [edx+1332]

; 447  :             state->lencode = (code const FAR *)(state->next);
; 448  :             state->lenbits = 9;

  00702	c7 42 58 09 00
	00 00		 mov	 DWORD PTR [edx+88], 9
  00709	89 42 70	 mov	 DWORD PTR [edx+112], eax

; 449  :             ret = inflate_table(LENS, state->lens, state->nlen, &(state->next),

  0070c	b9 01 00 00 00	 mov	 ecx, 1
  00711	89 42 50	 mov	 DWORD PTR [edx+80], eax
  00714	8d 82 f4 02 00
	00		 lea	 eax, DWORD PTR [edx+756]
  0071a	50		 push	 eax
  0071b	8d 42 58	 lea	 eax, DWORD PTR [edx+88]
  0071e	50		 push	 eax
  0071f	8d 42 70	 lea	 eax, DWORD PTR [edx+112]
  00722	50		 push	 eax
  00723	ff 72 64	 push	 DWORD PTR [edx+100]
  00726	83 c2 74	 add	 edx, 116		; 00000074H
  00729	e8 00 00 00 00	 call	 _inflate_table

; 450  :                                 &(state->lenbits), state->work);
; 451  :             if (ret) {

  0072e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00731	83 c4 10	 add	 esp, 16			; 00000010H
  00734	85 c0		 test	 eax, eax
  00736	74 16		 je	 SHORT $LN300@inflateBac

; 452  :                 strm->msg = (char *)"invalid literal/lengths set";

  00738	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0073b	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@IIMGAINC@invalid?5literal?1lengths?5set@

; 453  :                 state->mode = BAD;

  00742	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 454  :                 break;

  00749	e9 e5 05 00 00	 jmp	 $LN489@inflateBac
$LN300@inflateBac:

; 455  :             }
; 456  :             state->distcode = (code const FAR *)(state->next);

  0074e	8b 42 70	 mov	 eax, DWORD PTR [edx+112]

; 457  :             state->distbits = 6;

  00751	8d 4a 5c	 lea	 ecx, DWORD PTR [edx+92]
  00754	89 42 54	 mov	 DWORD PTR [edx+84], eax

; 458  :             ret = inflate_table(DISTS, state->lens + state->nlen, state->ndist,

  00757	8d 82 f4 02 00
	00		 lea	 eax, DWORD PTR [edx+756]
  0075d	50		 push	 eax
  0075e	8d 42 70	 lea	 eax, DWORD PTR [edx+112]
  00761	c7 01 06 00 00
	00		 mov	 DWORD PTR [ecx], 6
  00767	51		 push	 ecx
  00768	50		 push	 eax
  00769	8b 42 64	 mov	 eax, DWORD PTR [edx+100]
  0076c	b9 02 00 00 00	 mov	 ecx, 2
  00771	ff 72 68	 push	 DWORD PTR [edx+104]
  00774	8d 14 42	 lea	 edx, DWORD PTR [edx+eax*2]
  00777	83 c2 74	 add	 edx, 116		; 00000074H
  0077a	e8 00 00 00 00	 call	 _inflate_table

; 459  :                             &(state->next), &(state->distbits), state->work);
; 460  :             if (ret) {

  0077f	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00782	83 c4 10	 add	 esp, 16			; 00000010H
  00785	85 c0		 test	 eax, eax
  00787	74 16		 je	 SHORT $LN301@inflateBac

; 461  :                 strm->msg = (char *)"invalid distances set";

  00789	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  0078c	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@GMDFCBGP@invalid?5distances?5set@

; 462  :                 state->mode = BAD;

  00793	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 463  :                 break;

  0079a	e9 94 05 00 00	 jmp	 $LN489@inflateBac
$LN301@inflateBac:

; 464  :             }
; 465  :             Tracev((stderr, "inflate:       codes ok\n"));
; 466  :             state->mode = LEN;

  0079f	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H
$LN302@inflateBac:

; 467  :                 /* fallthrough */
; 468  : 
; 469  :         case LEN:
; 470  :             /* use inflate_fast() if we have enough input and output */
; 471  :             if (have >= 6 && left >= 258) {

  007a6	83 fe 06	 cmp	 esi, 6
  007a9	0f 82 87 00 00
	00		 jb	 $LN303@inflateBac
  007af	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  007b2	81 f9 02 01 00
	00		 cmp	 ecx, 258		; 00000102H
  007b8	72 7c		 jb	 SHORT $LN303@inflateBac

; 472  :                 RESTORE();

  007ba	8b 55 08	 mov	 edx, DWORD PTR _strm$[ebp]
  007bd	8b 45 e8	 mov	 eax, DWORD PTR _put$1$[ebp]
  007c0	89 42 0c	 mov	 DWORD PTR [edx+12], eax
  007c3	8b c2		 mov	 eax, edx
  007c5	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  007c8	8b ca		 mov	 ecx, edx
  007ca	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  007cd	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  007d0	89 01		 mov	 DWORD PTR [ecx], eax
  007d2	89 71 04	 mov	 DWORD PTR [ecx+4], esi

; 473  :                 if (state->whave < state->wsize)

  007d5	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  007d8	89 7a 3c	 mov	 DWORD PTR [edx+60], edi
  007db	89 5a 40	 mov	 DWORD PTR [edx+64], ebx
  007de	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  007e1	73 08		 jae	 SHORT $LN304@inflateBac

; 474  :                     state->whave = state->wsize - left;

  007e3	8b c1		 mov	 eax, ecx
  007e5	2b 45 ec	 sub	 eax, DWORD PTR _left$1$[ebp]
  007e8	89 42 30	 mov	 DWORD PTR [edx+48], eax
$LN304@inflateBac:

; 475  :                 inflate_fast(strm, state->wsize);

  007eb	8b d1		 mov	 edx, ecx
  007ed	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007f0	e8 00 00 00 00	 call	 _inflate_fast

; 476  :                 LOAD();

  007f5	8b 4d 08	 mov	 ecx, DWORD PTR _strm$[ebp]
  007f8	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  007fb	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  007fe	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00801	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00804	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00807	89 45 ec	 mov	 DWORD PTR _left$1$[ebp], eax
  0080a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0080c	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  0080f	8b 7a 3c	 mov	 edi, DWORD PTR [edx+60]
  00812	8b 5a 40	 mov	 ebx, DWORD PTR [edx+64]
  00815	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00818	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 477  :                 break;

  0081b	e9 13 05 00 00	 jmp	 $LN489@inflateBac
$LN277@inflateBac:

; 356  :                 strm->msg = (char *)"too many length or distance symbols";

  00820	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00823	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0CE@GMIGFPBB@too?5many?5length?5or?5distance?5sym@

; 357  :                 state->mode = BAD;

  0082a	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 358  :                 break;

  00831	e9 fd 04 00 00	 jmp	 $LN489@inflateBac
$LN303@inflateBac:

; 478  :             }
; 479  : 
; 480  :             /* get a literal, length, or end-of-block code */
; 481  :             for (;;) {
; 482  :                 here = state->lencode[BITS(state->lenbits)];

  00836	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  00839	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  0083c	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
  0083f	b8 01 00 00 00	 mov	 eax, 1
  00844	d3 e0		 shl	 eax, cl
  00846	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  00849	48		 dec	 eax
  0084a	23 c7		 and	 eax, edi
  0084c	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  0084f	8b c8		 mov	 ecx, eax
  00851	c1 e9 08	 shr	 ecx, 8
  00854	0f b6 c9	 movzx	 ecx, cl

; 483  :                 if ((unsigned)(here.bits) <= bits) break;

  00857	3b cb		 cmp	 ecx, ebx
  00859	76 61		 jbe	 SHORT $LN475@inflateBac
  0085b	0f 1f 44 00 00	 npad	 5
$LL165@inflateBac:

; 484  :                 PULLBYTE();

  00860	85 f6		 test	 esi, esi
  00862	75 1a		 jne	 SHORT $LN171@inflateBac
  00864	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00867	50		 push	 eax
  00868	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0086b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0086e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00871	8b f0		 mov	 esi, eax
  00873	83 c4 08	 add	 esp, 8
  00876	85 f6		 test	 esi, esi
  00878	0f 84 24 05 00
	00		 je	 $LN383@inflateBac
$LN171@inflateBac:
  0087e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00881	8b cb		 mov	 ecx, ebx
  00883	83 c3 08	 add	 ebx, 8
  00886	4e		 dec	 esi
  00887	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0088a	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  0088d	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00890	d3 e0		 shl	 eax, cl
  00892	8b 4a 58	 mov	 ecx, DWORD PTR [edx+88]
  00895	03 f8		 add	 edi, eax
  00897	8b 42 50	 mov	 eax, DWORD PTR [edx+80]
  0089a	89 45 dc	 mov	 DWORD PTR $T4[ebp], eax
  0089d	b8 01 00 00 00	 mov	 eax, 1
  008a2	d3 e0		 shl	 eax, cl
  008a4	8b 4a 50	 mov	 ecx, DWORD PTR [edx+80]
  008a7	48		 dec	 eax
  008a8	23 c7		 and	 eax, edi
  008aa	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  008ad	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  008b0	8b c8		 mov	 ecx, eax
  008b2	c1 e9 08	 shr	 ecx, 8
  008b5	0f b6 c9	 movzx	 ecx, cl
  008b8	3b cb		 cmp	 ecx, ebx
  008ba	77 a4		 ja	 SHORT $LL165@inflateBac
$LN475@inflateBac:

; 485  :             }
; 486  :             if (here.op && (here.op & 0xf0) == 0) {

  008bc	84 c0		 test	 al, al
  008be	0f 84 c5 00 00
	00		 je	 $LN184@inflateBac
  008c4	a8 f0		 test	 al, 240			; 000000f0H
  008c6	0f 85 bd 00 00
	00		 jne	 $LN184@inflateBac

; 487  :                 last = here;
; 488  :                 for (;;) {
; 489  :                     here = state->lencode[last.val +

  008cc	8b c8		 mov	 ecx, eax
  008ce	bf 01 00 00 00	 mov	 edi, 1
  008d3	c1 e9 08	 shr	 ecx, 8
  008d6	8b d0		 mov	 edx, eax
  008d8	0f b6 d9	 movzx	 ebx, cl
  008db	0f b6 c8	 movzx	 ecx, al
  008de	03 cb		 add	 ecx, ebx
  008e0	c1 e8 10	 shr	 eax, 16			; 00000010H
  008e3	d3 e7		 shl	 edi, cl
  008e5	8b cb		 mov	 ecx, ebx
  008e7	4f		 dec	 edi
  008e8	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  008eb	23 7d f4	 and	 edi, DWORD PTR _hold$1$[ebp]
  008ee	d3 ef		 shr	 edi, cl
  008f0	8b 4d dc	 mov	 ecx, DWORD PTR $T4[ebp]
  008f3	03 f8		 add	 edi, eax
  008f5	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  008f8	8b c8		 mov	 ecx, eax
  008fa	c1 e9 08	 shr	 ecx, 8

; 490  :                             (BITS(last.bits + last.op) >> last.bits)];
; 491  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  008fd	0f b6 c9	 movzx	 ecx, cl
  00900	03 cb		 add	 ecx, ebx
  00902	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00905	3b cb		 cmp	 ecx, ebx
  00907	76 73		 jbe	 SHORT $LN185@inflateBac
  00909	0f 1f 80 00 00
	00 00		 npad	 7
$LL174@inflateBac:

; 492  :                     PULLBYTE();

  00910	85 f6		 test	 esi, esi
  00912	75 1a		 jne	 SHORT $LN180@inflateBac
  00914	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00917	50		 push	 eax
  00918	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  0091b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  0091e	8b f0		 mov	 esi, eax
  00920	83 c4 08	 add	 esp, 8
  00923	85 f6		 test	 esi, esi
  00925	0f 84 5c 04 00
	00		 je	 $LN369@inflateBac
  0092b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN180@inflateBac:
  0092e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00931	8b cb		 mov	 ecx, ebx
  00933	83 c3 08	 add	 ebx, 8
  00936	bf 01 00 00 00	 mov	 edi, 1
  0093b	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  0093e	4e		 dec	 esi
  0093f	0f b6 de	 movzx	 ebx, dh
  00942	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00945	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00948	d3 e0		 shl	 eax, cl
  0094a	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  0094d	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00951	0f b6 ca	 movzx	 ecx, dl
  00954	03 cb		 add	 ecx, ebx
  00956	d3 e7		 shl	 edi, cl
  00958	8b cb		 mov	 ecx, ebx
  0095a	4f		 dec	 edi
  0095b	23 7d f4	 and	 edi, DWORD PTR _hold$1$[ebp]
  0095e	d3 ef		 shr	 edi, cl
  00960	03 f8		 add	 edi, eax
  00962	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00965	8b 40 50	 mov	 eax, DWORD PTR [eax+80]
  00968	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  0096b	8b c8		 mov	 ecx, eax
  0096d	c1 e9 08	 shr	 ecx, 8
  00970	0f b6 c9	 movzx	 ecx, cl
  00973	03 cb		 add	 ecx, ebx
  00975	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00978	3b cb		 cmp	 ecx, ebx
  0097a	77 94		 ja	 SHORT $LL174@inflateBac
$LN185@inflateBac:

; 493  :                 }
; 494  :                 DROPBITS(last.bits);

  0097c	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  0097f	0f b6 ce	 movzx	 ecx, dh
  00982	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00985	d3 ef		 shr	 edi, cl
  00987	2b d9		 sub	 ebx, ecx
$LN184@inflateBac:

; 495  :             }
; 496  :             DROPBITS(here.bits);

  00989	8b c8		 mov	 ecx, eax
  0098b	c1 e9 08	 shr	 ecx, 8
  0098e	0f b6 c9	 movzx	 ecx, cl
  00991	d3 ef		 shr	 edi, cl
  00993	2b d9		 sub	 ebx, ecx

; 497  :             state->length = (unsigned)here.val;

  00995	8b c8		 mov	 ecx, eax
  00997	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  0099a	c1 e9 10	 shr	 ecx, 16			; 00000010H
  0099d	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  009a0	89 4a 44	 mov	 DWORD PTR [edx+68], ecx

; 498  : 
; 499  :             /* process literal */
; 500  :             if (here.op == 0) {

  009a3	84 c0		 test	 al, al
  009a5	75 46		 jne	 SHORT $LN312@inflateBac

; 501  :                 Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
; 502  :                         "inflate:         literal '%c'\n" :
; 503  :                         "inflate:         literal 0x%02x\n", here.val));
; 504  :                 ROOM();

  009a7	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  009ab	75 25		 jne	 SHORT $LN189@inflateBac
  009ad	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  009b0	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  009b3	51		 push	 ecx
  009b4	50		 push	 eax
  009b5	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  009b8	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  009bb	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  009be	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  009c1	ff 55 14	 call	 DWORD PTR _out$[ebp]
  009c4	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  009c7	83 c4 0c	 add	 esp, 12			; 0000000cH
  009ca	85 c0		 test	 eax, eax
  009cc	0f 85 c9 03 00
	00		 jne	 $LN394@inflateBac
$LN189@inflateBac:

; 505  :                 *put++ = (unsigned char)(state->length);

  009d2	8b 4d e8	 mov	 ecx, DWORD PTR _put$1$[ebp]
  009d5	8a 42 44	 mov	 al, BYTE PTR [edx+68]
  009d8	88 01		 mov	 BYTE PTR [ecx], al
  009da	41		 inc	 ecx

; 506  :                 left--;

  009db	ff 4d ec	 dec	 DWORD PTR _left$1$[ebp]
  009de	89 4d e8	 mov	 DWORD PTR _put$1$[ebp], ecx

; 507  :                 state->mode = LEN;

  009e1	c7 42 04 48 3f
	00 00		 mov	 DWORD PTR [edx+4], 16200 ; 00003f48H

; 508  :                 break;

  009e8	e9 46 03 00 00	 jmp	 $LN489@inflateBac
$LN312@inflateBac:

; 509  :             }
; 510  : 
; 511  :             /* process end of block */
; 512  :             if (here.op & 32) {

  009ed	a8 20		 test	 al, 32			; 00000020H
  009ef	74 0c		 je	 SHORT $LN315@inflateBac

; 513  :                 Tracevv((stderr, "inflate:         end of block\n"));
; 514  :                 state->mode = TYPE;

  009f1	c7 42 04 3f 3f
	00 00		 mov	 DWORD PTR [edx+4], 16191 ; 00003f3fH

; 515  :                 break;

  009f8	e9 36 03 00 00	 jmp	 $LN489@inflateBac
$LN315@inflateBac:

; 516  :             }
; 517  : 
; 518  :             /* invalid code */
; 519  :             if (here.op & 64) {

  009fd	a8 40		 test	 al, 64			; 00000040H
  009ff	74 16		 je	 SHORT $LN316@inflateBac

; 520  :                 strm->msg = (char *)"invalid literal/length code";

  00a01	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00a04	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BM@FFFLPBBC@invalid?5literal?1length?5code@

; 521  :                 state->mode = BAD;

  00a0b	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 522  :                 break;

  00a12	e9 1c 03 00 00	 jmp	 $LN489@inflateBac
$LN316@inflateBac:

; 523  :             }
; 524  : 
; 525  :             /* length code -- get extra bits, if any */
; 526  :             state->extra = (unsigned)(here.op) & 15;

  00a17	0f b6 c8	 movzx	 ecx, al
  00a1a	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00a1d	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 527  :             if (state->extra != 0) {

  00a20	74 61		 je	 SHORT $LN204@inflateBac

; 528  :                 NEEDBITS(state->extra);

  00a22	3b d9		 cmp	 ebx, ecx
  00a24	73 46		 jae	 SHORT $LN192@inflateBac
  00a26	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a29	0f 1f 80 00 00
	00 00		 npad	 7
$LL195@inflateBac:
  00a30	85 f6		 test	 esi, esi
  00a32	75 1d		 jne	 SHORT $LN200@inflateBac
  00a34	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00a37	50		 push	 eax
  00a38	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00a3b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00a3e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00a41	8b f0		 mov	 esi, eax
  00a43	83 c4 08	 add	 esp, 8
  00a46	85 f6		 test	 esi, esi
  00a48	0f 84 54 03 00
	00		 je	 $LN383@inflateBac
  00a4e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN200@inflateBac:
  00a51	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00a54	8b cb		 mov	 ecx, ebx
  00a56	d3 e0		 shl	 eax, cl
  00a58	83 c3 08	 add	 ebx, 8
  00a5b	03 f8		 add	 edi, eax
  00a5d	4e		 dec	 esi
  00a5e	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00a61	40		 inc	 eax
  00a62	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00a65	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00a68	3b d9		 cmp	 ebx, ecx
  00a6a	72 c4		 jb	 SHORT $LL195@inflateBac
$LN192@inflateBac:

; 529  :                 state->length += BITS(state->extra);

  00a6c	b8 01 00 00 00	 mov	 eax, 1
  00a71	d3 e0		 shl	 eax, cl
  00a73	48		 dec	 eax
  00a74	23 c7		 and	 eax, edi

; 530  :                 DROPBITS(state->extra);

  00a76	d3 ef		 shr	 edi, cl
  00a78	01 42 44	 add	 DWORD PTR [edx+68], eax
  00a7b	2b d9		 sub	 ebx, ecx
  00a7d	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00a80	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
$LN204@inflateBac:

; 531  :             }
; 532  :             Tracevv((stderr, "inflate:         length %u\n", state->length));
; 533  : 
; 534  :             /* get distance code */
; 535  :             for (;;) {
; 536  :                 here = state->distcode[BITS(state->distbits)];

  00a83	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00a86	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00a89	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
  00a8c	b8 01 00 00 00	 mov	 eax, 1
  00a91	d3 e0		 shl	 eax, cl
  00a93	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00a96	48		 dec	 eax
  00a97	23 c7		 and	 eax, edi
  00a99	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00a9c	8b c8		 mov	 ecx, eax
  00a9e	c1 e9 08	 shr	 ecx, 8
  00aa1	0f b6 c9	 movzx	 ecx, cl

; 537  :                 if ((unsigned)(here.bits) <= bits) break;

  00aa4	3b cb		 cmp	 ecx, ebx
  00aa6	76 5c		 jbe	 SHORT $LN488@inflateBac
$LL206@inflateBac:

; 538  :                 PULLBYTE();

  00aa8	85 f6		 test	 esi, esi
  00aaa	75 1a		 jne	 SHORT $LN212@inflateBac
  00aac	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00aaf	50		 push	 eax
  00ab0	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00ab3	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00ab6	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00ab9	8b f0		 mov	 esi, eax
  00abb	83 c4 08	 add	 esp, 8
  00abe	85 f6		 test	 esi, esi
  00ac0	0f 84 dc 02 00
	00		 je	 $LN383@inflateBac
$LN212@inflateBac:
  00ac6	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00ac9	8b cb		 mov	 ecx, ebx
  00acb	83 c3 08	 add	 ebx, 8
  00ace	4e		 dec	 esi
  00acf	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00ad2	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00ad5	ff 45 fc	 inc	 DWORD PTR _next$[ebp]
  00ad8	d3 e0		 shl	 eax, cl
  00ada	8b 4a 5c	 mov	 ecx, DWORD PTR [edx+92]
  00add	03 f8		 add	 edi, eax
  00adf	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  00ae2	89 45 dc	 mov	 DWORD PTR $T3[ebp], eax
  00ae5	b8 01 00 00 00	 mov	 eax, 1
  00aea	d3 e0		 shl	 eax, cl
  00aec	8b 4a 54	 mov	 ecx, DWORD PTR [edx+84]
  00aef	48		 dec	 eax
  00af0	23 c7		 and	 eax, edi
  00af2	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00af5	8b 04 81	 mov	 eax, DWORD PTR [ecx+eax*4]
  00af8	8b c8		 mov	 ecx, eax
  00afa	c1 e9 08	 shr	 ecx, 8
  00afd	0f b6 c9	 movzx	 ecx, cl
  00b00	3b cb		 cmp	 ecx, ebx
  00b02	77 a4		 ja	 SHORT $LL206@inflateBac
$LN488@inflateBac:

; 539  :             }
; 540  :             if ((here.op & 0xf0) == 0) {

  00b04	a8 f0		 test	 al, 240			; 000000f0H
  00b06	0f 85 be 00 00
	00		 jne	 $LN225@inflateBac

; 541  :                 last = here;
; 542  :                 for (;;) {
; 543  :                     here = state->distcode[last.val +

  00b0c	8b c8		 mov	 ecx, eax
  00b0e	bf 01 00 00 00	 mov	 edi, 1
  00b13	c1 e9 08	 shr	 ecx, 8
  00b16	8b d0		 mov	 edx, eax
  00b18	0f b6 d9	 movzx	 ebx, cl
  00b1b	0f b6 c8	 movzx	 ecx, al
  00b1e	03 cb		 add	 ecx, ebx
  00b20	c1 e8 10	 shr	 eax, 16			; 00000010H
  00b23	d3 e7		 shl	 edi, cl
  00b25	8b cb		 mov	 ecx, ebx
  00b27	4f		 dec	 edi
  00b28	89 55 e4	 mov	 DWORD PTR _last$[ebp], edx
  00b2b	23 7d f4	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b2e	d3 ef		 shr	 edi, cl
  00b30	8b 4d dc	 mov	 ecx, DWORD PTR $T3[ebp]
  00b33	03 f8		 add	 edi, eax
  00b35	8b 04 b9	 mov	 eax, DWORD PTR [ecx+edi*4]
  00b38	8b c8		 mov	 ecx, eax
  00b3a	c1 e9 08	 shr	 ecx, 8

; 544  :                             (BITS(last.bits + last.op) >> last.bits)];
; 545  :                     if ((unsigned)(last.bits + here.bits) <= bits) break;

  00b3d	0f b6 c9	 movzx	 ecx, cl
  00b40	03 cb		 add	 ecx, ebx
  00b42	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00b45	3b cb		 cmp	 ecx, ebx
  00b47	76 74		 jbe	 SHORT $LN226@inflateBac
  00b49	0f 1f 80 00 00
	00 00		 npad	 7
$LL215@inflateBac:

; 546  :                     PULLBYTE();

  00b50	85 f6		 test	 esi, esi
  00b52	75 1a		 jne	 SHORT $LN221@inflateBac
  00b54	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00b57	50		 push	 eax
  00b58	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00b5b	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00b5e	8b f0		 mov	 esi, eax
  00b60	83 c4 08	 add	 esp, 8
  00b63	85 f6		 test	 esi, esi
  00b65	0f 84 1c 02 00
	00		 je	 $LN369@inflateBac
  00b6b	8b 55 e4	 mov	 edx, DWORD PTR _last$[ebp]
$LN221@inflateBac:
  00b6e	8b 7d fc	 mov	 edi, DWORD PTR _next$[ebp]
  00b71	8b cb		 mov	 ecx, ebx
  00b73	83 c3 08	 add	 ebx, 8
  00b76	4e		 dec	 esi
  00b77	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00b7a	0f b6 de	 movzx	 ebx, dh
  00b7d	0f b6 07	 movzx	 eax, BYTE PTR [edi]
  00b80	47		 inc	 edi
  00b81	d3 e0		 shl	 eax, cl
  00b83	01 45 f4	 add	 DWORD PTR _hold$1$[ebp], eax
  00b86	0f b7 45 e6	 movzx	 eax, WORD PTR _last$[ebp+2]
  00b8a	89 7d fc	 mov	 DWORD PTR _next$[ebp], edi
  00b8d	bf 01 00 00 00	 mov	 edi, 1
  00b92	0f b6 ca	 movzx	 ecx, dl
  00b95	03 cb		 add	 ecx, ebx
  00b97	d3 e7		 shl	 edi, cl
  00b99	8b cb		 mov	 ecx, ebx
  00b9b	4f		 dec	 edi
  00b9c	23 7d f4	 and	 edi, DWORD PTR _hold$1$[ebp]
  00b9f	d3 ef		 shr	 edi, cl
  00ba1	03 f8		 add	 edi, eax
  00ba3	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00ba6	8b 40 54	 mov	 eax, DWORD PTR [eax+84]
  00ba9	8b 04 b8	 mov	 eax, DWORD PTR [eax+edi*4]
  00bac	8b c8		 mov	 ecx, eax
  00bae	c1 e9 08	 shr	 ecx, 8
  00bb1	0f b6 c9	 movzx	 ecx, cl
  00bb4	03 cb		 add	 ecx, ebx
  00bb6	8b 5d f0	 mov	 ebx, DWORD PTR _bits$1$[ebp]
  00bb9	3b cb		 cmp	 ecx, ebx
  00bbb	77 93		 ja	 SHORT $LL215@inflateBac
$LN226@inflateBac:

; 547  :                 }
; 548  :                 DROPBITS(last.bits);

  00bbd	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00bc0	0f b6 ce	 movzx	 ecx, dh
  00bc3	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00bc6	d3 ef		 shr	 edi, cl
  00bc8	2b d9		 sub	 ebx, ecx
$LN225@inflateBac:

; 549  :             }
; 550  :             DROPBITS(here.bits);

  00bca	8b c8		 mov	 ecx, eax
  00bcc	c1 e9 08	 shr	 ecx, 8
  00bcf	0f b6 c9	 movzx	 ecx, cl
  00bd2	d3 ef		 shr	 edi, cl
  00bd4	2b d9		 sub	 ebx, ecx
  00bd6	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00bd9	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx

; 551  :             if (here.op & 64) {

  00bdc	a8 40		 test	 al, 64			; 00000040H
  00bde	74 16		 je	 SHORT $LN327@inflateBac

; 552  :                 strm->msg = (char *)"invalid distance code";

  00be0	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00be3	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BG@LBKINIKP@invalid?5distance?5code@

; 553  :                 state->mode = BAD;

  00bea	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 554  :                 break;

  00bf1	e9 3d 01 00 00	 jmp	 $LN489@inflateBac
$LN327@inflateBac:

; 555  :             }
; 556  :             state->offset = (unsigned)here.val;

  00bf6	8b c8		 mov	 ecx, eax
  00bf8	c1 e9 10	 shr	 ecx, 16			; 00000010H
  00bfb	89 4d dc	 mov	 DWORD PTR $T2[ebp], ecx
  00bfe	89 4a 48	 mov	 DWORD PTR [edx+72], ecx

; 557  : 
; 558  :             /* get distance extra bits, if any */
; 559  :             state->extra = (unsigned)(here.op) & 15;

  00c01	0f b6 c8	 movzx	 ecx, al
  00c04	83 e1 0f	 and	 ecx, 15			; 0000000fH
  00c07	89 4a 4c	 mov	 DWORD PTR [edx+76], ecx

; 560  :             if (state->extra != 0) {

  00c0a	74 68		 je	 SHORT $LN242@inflateBac

; 561  :                 NEEDBITS(state->extra);

  00c0c	3b d9		 cmp	 ebx, ecx
  00c0e	73 3f		 jae	 SHORT $LN230@inflateBac
  00c10	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LL233@inflateBac:
  00c13	85 f6		 test	 esi, esi
  00c15	75 1d		 jne	 SHORT $LN238@inflateBac
  00c17	8d 45 fc	 lea	 eax, DWORD PTR _next$[ebp]
  00c1a	50		 push	 eax
  00c1b	ff 75 10	 push	 DWORD PTR _in_desc$[ebp]
  00c1e	ff 55 0c	 call	 DWORD PTR _in$[ebp]
  00c21	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c24	8b f0		 mov	 esi, eax
  00c26	83 c4 08	 add	 esp, 8
  00c29	85 f6		 test	 esi, esi
  00c2b	0f 84 71 01 00
	00		 je	 $LN383@inflateBac
  00c31	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
$LN238@inflateBac:
  00c34	0f b6 00	 movzx	 eax, BYTE PTR [eax]
  00c37	8b cb		 mov	 ecx, ebx
  00c39	d3 e0		 shl	 eax, cl
  00c3b	83 c3 08	 add	 ebx, 8
  00c3e	03 f8		 add	 edi, eax
  00c40	4e		 dec	 esi
  00c41	8b 45 fc	 mov	 eax, DWORD PTR _next$[ebp]
  00c44	40		 inc	 eax
  00c45	89 45 fc	 mov	 DWORD PTR _next$[ebp], eax
  00c48	8b 4a 4c	 mov	 ecx, DWORD PTR [edx+76]
  00c4b	3b d9		 cmp	 ebx, ecx
  00c4d	72 c4		 jb	 SHORT $LL233@inflateBac
$LN230@inflateBac:

; 562  :                 state->offset += BITS(state->extra);

  00c4f	8b 45 f8	 mov	 eax, DWORD PTR _state$1$[ebp]
  00c52	ba 01 00 00 00	 mov	 edx, 1
  00c57	d3 e2		 shl	 edx, cl
  00c59	4a		 dec	 edx
  00c5a	23 d7		 and	 edx, edi

; 563  :                 DROPBITS(state->extra);

  00c5c	d3 ef		 shr	 edi, cl
  00c5e	8b 40 48	 mov	 eax, DWORD PTR [eax+72]
  00c61	03 c2		 add	 eax, edx
  00c63	89 7d f4	 mov	 DWORD PTR _hold$1$[ebp], edi
  00c66	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00c69	2b d9		 sub	 ebx, ecx
  00c6b	89 45 dc	 mov	 DWORD PTR $T2[ebp], eax
  00c6e	89 5d f0	 mov	 DWORD PTR _bits$1$[ebp], ebx
  00c71	89 42 48	 mov	 DWORD PTR [edx+72], eax
$LN242@inflateBac:

; 564  :             }
; 565  :             if (state->offset > state->wsize - (state->whave < state->wsize ?

  00c74	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00c77	39 4a 30	 cmp	 DWORD PTR [edx+48], ecx
  00c7a	1b c0		 sbb	 eax, eax
  00c7c	23 45 ec	 and	 eax, DWORD PTR _left$1$[ebp]
  00c7f	2b c8		 sub	 ecx, eax
  00c81	39 4d dc	 cmp	 DWORD PTR $T2[ebp], ecx
  00c84	76 1a		 jbe	 SHORT $LL246@inflateBac

; 566  :                                                 left : 0)) {
; 567  :                 strm->msg = (char *)"invalid distance too far back";

  00c86	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00c89	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [eax+24], OFFSET ??_C@_0BO@ECPMAOGG@invalid?5distance?5too?5far?5back@

; 568  :                 state->mode = BAD;

  00c90	c7 42 04 51 3f
	00 00		 mov	 DWORD PTR [edx+4], 16209 ; 00003f51H

; 569  :                 break;

  00c97	e9 97 00 00 00	 jmp	 $LN489@inflateBac
  00c9c	0f 1f 40 00	 npad	 4
$LL246@inflateBac:

; 570  :             }
; 571  :             Tracevv((stderr, "inflate:         distance %u\n", state->offset));
; 572  : 
; 573  :             /* copy match from window to output */
; 574  :             do {
; 575  :                 ROOM();

  00ca0	83 7d ec 00	 cmp	 DWORD PTR _left$1$[ebp], 0
  00ca4	75 25		 jne	 SHORT $LN247@inflateBac
  00ca6	8b 4a 2c	 mov	 ecx, DWORD PTR [edx+44]
  00ca9	8b 42 38	 mov	 eax, DWORD PTR [edx+56]
  00cac	51		 push	 ecx
  00cad	50		 push	 eax
  00cae	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00cb1	89 45 e8	 mov	 DWORD PTR _put$1$[ebp], eax
  00cb4	89 4d ec	 mov	 DWORD PTR _left$1$[ebp], ecx
  00cb7	89 4a 30	 mov	 DWORD PTR [edx+48], ecx
  00cba	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00cbd	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cc0	83 c4 0c	 add	 esp, 12			; 0000000cH
  00cc3	85 c0		 test	 eax, eax
  00cc5	0f 85 d0 00 00
	00		 jne	 $LN394@inflateBac
$LN247@inflateBac:

; 576  :                 copy = state->wsize - state->offset;

  00ccb	8b 42 48	 mov	 eax, DWORD PTR [edx+72]
  00cce	8b 52 2c	 mov	 edx, DWORD PTR [edx+44]

; 577  :                 if (copy < left) {
; 578  :                     from = put + copy;
; 579  :                     copy = left - copy;
; 580  :                 }
; 581  :                 else {
; 582  :                     from = put - state->offset;
; 583  :                     copy = left;
; 584  :                 }
; 585  :                 if (copy > state->length) copy = state->length;

  00cd1	8b 7d e8	 mov	 edi, DWORD PTR _put$1$[ebp]
  00cd4	2b d0		 sub	 edx, eax
  00cd6	8b cf		 mov	 ecx, edi
  00cd8	2b c8		 sub	 ecx, eax
  00cda	3b 55 ec	 cmp	 edx, DWORD PTR _left$1$[ebp]
  00cdd	8d 04 3a	 lea	 eax, DWORD PTR [edx+edi]
  00ce0	0f 43 c1	 cmovae	 eax, ecx
  00ce3	89 45 d8	 mov	 DWORD PTR _from$1$[ebp], eax
  00ce6	8b 45 ec	 mov	 eax, DWORD PTR _left$1$[ebp]
  00ce9	8b c8		 mov	 ecx, eax
  00ceb	2b ca		 sub	 ecx, edx
  00ced	3b d0		 cmp	 edx, eax
  00cef	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00cf2	0f 43 c8	 cmovae	 ecx, eax
  00cf5	8b 42 44	 mov	 eax, DWORD PTR [edx+68]

; 586  :                 state->length -= copy;

  00cf8	3b c8		 cmp	 ecx, eax
  00cfa	8b d0		 mov	 edx, eax
  00cfc	0f 46 d1	 cmovbe	 edx, ecx
  00cff	8b 4d d8	 mov	 ecx, DWORD PTR _from$1$[ebp]
  00d02	2b c2		 sub	 eax, edx
  00d04	89 55 dc	 mov	 DWORD PTR _copy$5$[ebp], edx
  00d07	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d0a	89 42 44	 mov	 DWORD PTR [edx+68], eax

; 587  :                 left -= copy;

  00d0d	8b 55 dc	 mov	 edx, DWORD PTR _copy$5$[ebp]
  00d10	29 55 ec	 sub	 DWORD PTR _left$1$[ebp], edx
$LL252@inflateBac:

; 588  :                 do {
; 589  :                     *put++ = *from++;

  00d13	8a 01		 mov	 al, BYTE PTR [ecx]
  00d15	8d 49 01	 lea	 ecx, DWORD PTR [ecx+1]
  00d18	88 07		 mov	 BYTE PTR [edi], al
  00d1a	47		 inc	 edi

; 590  :                 } while (--copy);

  00d1b	83 ea 01	 sub	 edx, 1
  00d1e	75 f3		 jne	 SHORT $LL252@inflateBac

; 591  :             } while (state->length != 0);

  00d20	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d23	89 7d e8	 mov	 DWORD PTR _put$1$[ebp], edi
  00d26	8b 7d f4	 mov	 edi, DWORD PTR _hold$1$[ebp]
  00d29	83 7a 44 00	 cmp	 DWORD PTR [edx+68], 0
  00d2d	0f 85 6d ff ff
	ff		 jne	 $LL246@inflateBac
$LN489@inflateBac:

; 275  : 
; 276  :     /* Inflate until end of block marked as last */
; 277  :     for (;;)
; 278  :         switch (state->mode) {

  00d33	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00d36	2d 3f 3f 00 00	 sub	 eax, 16191		; 00003f3fH
  00d3b	83 f8 12	 cmp	 eax, 18			; 00000012H
  00d3e	0f 86 31 f3 ff
	ff		 jbe	 $LN597@inflateBac
$LN339@inflateBac:

; 602  : 
; 603  :         default:
; 604  :             /* can't happen, but makes compilers happy */
; 605  :             ret = Z_STREAM_ERROR;

  00d44	bf fe ff ff ff	 mov	 edi, -2			; fffffffeH
$inf_leave$599:

; 606  :             goto inf_leave;
; 607  :         }
; 608  : 
; 609  :     /* Write leftover output and return unused input */
; 610  :   inf_leave:
; 611  :     if (left < state->wsize) {

  00d49	8b 42 2c	 mov	 eax, DWORD PTR [edx+44]
  00d4c	8b 4d ec	 mov	 ecx, DWORD PTR _left$1$[ebp]
  00d4f	5b		 pop	 ebx
  00d50	3b c8		 cmp	 ecx, eax
  00d52	73 1e		 jae	 SHORT $LN490@inflateBac

; 612  :         if (out(out_desc, state->window, state->wsize - left) &&

  00d54	2b c1		 sub	 eax, ecx
  00d56	50		 push	 eax
  00d57	ff 72 38	 push	 DWORD PTR [edx+56]
  00d5a	ff 75 18	 push	 DWORD PTR _out_desc$[ebp]
  00d5d	ff 55 14	 call	 DWORD PTR _out$[ebp]
  00d60	83 c4 0c	 add	 esp, 12			; 0000000cH
  00d63	85 c0		 test	 eax, eax
  00d65	74 0b		 je	 SHORT $LN490@inflateBac
  00d67	83 ff 01	 cmp	 edi, 1
  00d6a	b8 fb ff ff ff	 mov	 eax, -5			; fffffffbH
  00d6f	0f 44 f8	 cmove	 edi, eax
$LN490@inflateBac:

; 613  :             ret == Z_STREAM_END)
; 614  :             ret = Z_BUF_ERROR;
; 615  :     }
; 616  :     strm->next_in = next;

  00d72	8b 45 08	 mov	 eax, DWORD PTR _strm$[ebp]
  00d75	8b 4d fc	 mov	 ecx, DWORD PTR _next$[ebp]

; 617  :     strm->avail_in = have;

  00d78	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00d7b	89 08		 mov	 DWORD PTR [eax], ecx

; 618  :     return ret;

  00d7d	8b c7		 mov	 eax, edi
  00d7f	5f		 pop	 edi
  00d80	5e		 pop	 esi

; 619  : }

  00d81	8b e5		 mov	 esp, ebp
  00d83	5d		 pop	 ebp
  00d84	c2 14 00	 ret	 20			; 00000014H
$LN369@inflateBac:

; 606  :             goto inf_leave;
; 607  :         }
; 608  : 
; 609  :     /* Write leftover output and return unused input */
; 610  :   inf_leave:
; 611  :     if (left < state->wsize) {

  00d87	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
$LN372@inflateBac:
  00d8e	8b 55 f8	 mov	 edx, DWORD PTR _state$1$[ebp]
  00d91	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00d96	eb b1		 jmp	 SHORT $inf_leave$599
$LN371@inflateBac:

; 329  :                 copy = state->length;
; 330  :                 PULL();

  00d98	89 5d fc	 mov	 DWORD PTR _next$[ebp], ebx
$LN394@inflateBac:

; 606  :             goto inf_leave;
; 607  :         }
; 608  : 
; 609  :     /* Write leftover output and return unused input */
; 610  :   inf_leave:
; 611  :     if (left < state->wsize) {

  00d9b	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00da0	eb a7		 jmp	 SHORT $inf_leave$599
$LN383@inflateBac:
  00da2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _next$[ebp], 0
  00da9	bf fb ff ff ff	 mov	 edi, -5			; fffffffbH
  00dae	eb 99		 jmp	 SHORT $inf_leave$599
$LN337@inflateBac:

; 592  :             break;
; 593  : 
; 594  :         case DONE:
; 595  :             /* inflate stream terminated properly */
; 596  :             ret = Z_STREAM_END;

  00db0	bf 01 00 00 00	 mov	 edi, 1

; 597  :             goto inf_leave;

  00db5	eb 92		 jmp	 SHORT $inf_leave$599
$LN338@inflateBac:

; 598  : 
; 599  :         case BAD:
; 600  :             ret = Z_DATA_ERROR;

  00db7	bf fd ff ff ff	 mov	 edi, -3			; fffffffdH

; 601  :             goto inf_leave;

  00dbc	eb 8b		 jmp	 SHORT $inf_leave$599
$LN254@inflateBac:

; 261  :         return Z_STREAM_ERROR;

  00dbe	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 619  : }

  00dc3	8b e5		 mov	 esp, ebp
  00dc5	5d		 pop	 ebp
  00dc6	c2 14 00	 ret	 20			; 00000014H
  00dc9	0f 1f 00	 npad	 3
$LN483@inflateBac:
  00dcc	00 00 00 00	 DD	 $LN255@inflateBac
  00dd0	00 00 00 00	 DD	 $LN31@inflateBac
  00dd4	00 00 00 00	 DD	 $LN56@inflateBac
  00dd8	00 00 00 00	 DD	 $LN302@inflateBac
  00ddc	00 00 00 00	 DD	 $LN337@inflateBac
  00de0	00 00 00 00	 DD	 $LN338@inflateBac
  00de4	00 00 00 00	 DD	 $LN339@inflateBac
$LN482@inflateBac:
  00de8	00		 DB	 0
  00de9	06		 DB	 6
  00dea	01		 DB	 1
  00deb	06		 DB	 6
  00dec	06		 DB	 6
  00ded	02		 DB	 2
  00dee	06		 DB	 6
  00def	06		 DB	 6
  00df0	06		 DB	 6
  00df1	03		 DB	 3
  00df2	06		 DB	 6
  00df3	06		 DB	 6
  00df4	06		 DB	 6
  00df5	06		 DB	 6
  00df6	06		 DB	 6
  00df7	06		 DB	 6
  00df8	06		 DB	 6
  00df9	04		 DB	 4
  00dfa	05		 DB	 5
  00dfb	90		 npad	 1
$LN484@inflateBac:
  00dfc	00 00 00 00	 DD	 $LN259@inflateBac
  00e00	00 00 00 00	 DD	 $LN260@inflateBac
  00e04	00 00 00 00	 DD	 $LN261@inflateBac
  00e08	00 00 00 00	 DD	 $LN262@inflateBac
_inflateBack@20 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Users\Pichau\Documents\Boldergarte\Softwares\LIBRARIES\downloads\zlib\zlib-develop\zlib-develop\infback.c
;	COMDAT _inflateBackEnd@4
_TEXT	SEGMENT
_strm$ = 8						; size = 4
_inflateBackEnd@4 PROC					; COMDAT

; 621  : int ZEXPORT inflateBackEnd(z_streamp strm) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 622  :     if (strm == Z_NULL || strm->state == Z_NULL || strm->zfree == (free_func)0)

  00004	8b 75 08	 mov	 esi, DWORD PTR _strm$[ebp]
  00007	85 f6		 test	 esi, esi
  00009	74 25		 je	 SHORT $LN3@inflateBac
  0000b	8b 4e 1c	 mov	 ecx, DWORD PTR [esi+28]
  0000e	85 c9		 test	 ecx, ecx
  00010	74 1e		 je	 SHORT $LN3@inflateBac
  00012	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00015	85 c0		 test	 eax, eax
  00017	74 17		 je	 SHORT $LN3@inflateBac

; 624  :     ZFREE(strm, strm->state);

  00019	51		 push	 ecx
  0001a	ff 76 28	 push	 DWORD PTR [esi+40]
  0001d	ff d0		 call	 eax
  0001f	83 c4 08	 add	 esp, 8

; 625  :     strm->state = Z_NULL;

  00022	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 626  :     Tracev((stderr, "inflate: end\n"));
; 627  :     return Z_OK;

  00029	33 c0		 xor	 eax, eax
  0002b	5e		 pop	 esi

; 628  : }

  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
$LN3@inflateBac:

; 623  :         return Z_STREAM_ERROR;

  00030	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00035	5e		 pop	 esi

; 628  : }

  00036	5d		 pop	 ebp
  00037	c2 04 00	 ret	 4
_inflateBackEnd@4 ENDP
_TEXT	ENDS
END
